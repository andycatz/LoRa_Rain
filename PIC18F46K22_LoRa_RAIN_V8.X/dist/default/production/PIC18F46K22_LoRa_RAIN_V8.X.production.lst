

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Sep 18 16:09:10 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og9 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    63                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    64  0000                     
    65                           ; Version 2.20
    66                           ; Generated 05/05/2020 GMT
    67                           ; 
    68                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F46K22 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     
   100                           	psect	idataBANK0
   101  0028C4                     __pidataBANK0:
   102                           	callstack 0
   103                           
   104                           ;initializer for _address
   105  0028C4  E6                 	db	230
   106  0028C5  BA                 	db	186
   107  0028C6  08                 	db	8
   108  0028C7  FB                 	db	251
   109  0028C8  3A                 	db	58
   110  0028C9  4F                 	db	79
   111  0028CA  5E                 	db	94
   112  0028CB  CE                 	db	206
   113                           
   114                           	psect	mediumconst
   115  00FC1C                     __pmediumconst:
   116                           	callstack 0
   117  00FC1C  00                 	db	0
   118  00FC1D                     CRC16@wCRCTable:
   119                           	callstack 0
   120  00FC1D  0000               	dw	0
   121  00FC1F  C0C1               	dw	49345
   122  00FC21  C181               	dw	49537
   123  00FC23  0140               	dw	320
   124  00FC25  C301               	dw	49921
   125  00FC27  03C0               	dw	960
   126  00FC29  0280               	dw	640
   127  00FC2B  C241               	dw	49729
   128  00FC2D  C601               	dw	50689
   129  00FC2F  06C0               	dw	1728
   130  00FC31  0780               	dw	1920
   131  00FC33  C741               	dw	51009
   132  00FC35  0500               	dw	1280
   133  00FC37  C5C1               	dw	50625
   134  00FC39  C481               	dw	50305
   135  00FC3B  0440               	dw	1088
   136  00FC3D  CC01               	dw	52225
   137  00FC3F  0CC0               	dw	3264
   138  00FC41  0D80               	dw	3456
   139  00FC43  CD41               	dw	52545
   140  00FC45  0F00               	dw	3840
   141  00FC47  CFC1               	dw	53185
   142  00FC49  CE81               	dw	52865
   143  00FC4B  0E40               	dw	3648
   144  00FC4D  0A00               	dw	2560
   145  00FC4F  CAC1               	dw	51905
   146  00FC51  CB81               	dw	52097
   147  00FC53  0B40               	dw	2880
   148  00FC55  C901               	dw	51457
   149  00FC57  09C0               	dw	2496
   150  00FC59  0880               	dw	2176
   151  00FC5B  C841               	dw	51265
   152  00FC5D  D801               	dw	55297
   153  00FC5F  18C0               	dw	6336
   154  00FC61  1980               	dw	6528
   155  00FC63  D941               	dw	55617
   156  00FC65  1B00               	dw	6912
   157  00FC67  DBC1               	dw	56257
   158  00FC69  DA81               	dw	55937
   159  00FC6B  1A40               	dw	6720
   160  00FC6D  1E00               	dw	7680
   161  00FC6F  DEC1               	dw	57025
   162  00FC71  DF81               	dw	57217
   163  00FC73  1F40               	dw	8000
   164  00FC75  DD01               	dw	56577
   165  00FC77  1DC0               	dw	7616
   166  00FC79  1C80               	dw	7296
   167  00FC7B  DC41               	dw	56385
   168  00FC7D  1400               	dw	5120
   169  00FC7F  D4C1               	dw	54465
   170  00FC81  D581               	dw	54657
   171  00FC83  1540               	dw	5440
   172  00FC85  D701               	dw	55041
   173  00FC87  17C0               	dw	6080
   174  00FC89  1680               	dw	5760
   175  00FC8B  D641               	dw	54849
   176  00FC8D  D201               	dw	53761
   177  00FC8F  12C0               	dw	4800
   178  00FC91  1380               	dw	4992
   179  00FC93  D341               	dw	54081
   180  00FC95  1100               	dw	4352
   181  00FC97  D1C1               	dw	53697
   182  00FC99  D081               	dw	53377
   183  00FC9B  1040               	dw	4160
   184  00FC9D  F001               	dw	61441
   185  00FC9F  30C0               	dw	12480
   186  00FCA1  3180               	dw	12672
   187  00FCA3  F141               	dw	61761
   188  00FCA5  3300               	dw	13056
   189  00FCA7  F3C1               	dw	62401
   190  00FCA9  F281               	dw	62081
   191  00FCAB  3240               	dw	12864
   192  00FCAD  3600               	dw	13824
   193  00FCAF  F6C1               	dw	63169
   194  00FCB1  F781               	dw	63361
   195  00FCB3  3740               	dw	14144
   196  00FCB5  F501               	dw	62721
   197  00FCB7  35C0               	dw	13760
   198  00FCB9  3480               	dw	13440
   199  00FCBB  F441               	dw	62529
   200  00FCBD  3C00               	dw	15360
   201  00FCBF  FCC1               	dw	64705
   202  00FCC1  FD81               	dw	64897
   203  00FCC3  3D40               	dw	15680
   204  00FCC5  FF01               	dw	65281
   205  00FCC7  3FC0               	dw	16320
   206  00FCC9  3E80               	dw	16000
   207  00FCCB  FE41               	dw	65089
   208  00FCCD  FA01               	dw	64001
   209  00FCCF  3AC0               	dw	15040
   210  00FCD1  3B80               	dw	15232
   211  00FCD3  FB41               	dw	64321
   212  00FCD5  3900               	dw	14592
   213  00FCD7  F9C1               	dw	63937
   214  00FCD9  F881               	dw	63617
   215  00FCDB  3840               	dw	14400
   216  00FCDD  2800               	dw	10240
   217  00FCDF  E8C1               	dw	59585
   218  00FCE1  E981               	dw	59777
   219  00FCE3  2940               	dw	10560
   220  00FCE5  EB01               	dw	60161
   221  00FCE7  2BC0               	dw	11200
   222  00FCE9  2A80               	dw	10880
   223  00FCEB  EA41               	dw	59969
   224  00FCED  EE01               	dw	60929
   225  00FCEF  2EC0               	dw	11968
   226  00FCF1  2F80               	dw	12160
   227  00FCF3  EF41               	dw	61249
   228  00FCF5  2D00               	dw	11520
   229  00FCF7  EDC1               	dw	60865
   230  00FCF9  EC81               	dw	60545
   231  00FCFB  2C40               	dw	11328
   232  00FCFD  E401               	dw	58369
   233  00FCFF  24C0               	dw	9408
   234  00FD01  2580               	dw	9600
   235  00FD03  E541               	dw	58689
   236  00FD05  2700               	dw	9984
   237  00FD07  E7C1               	dw	59329
   238  00FD09  E681               	dw	59009
   239  00FD0B  2640               	dw	9792
   240  00FD0D  2200               	dw	8704
   241  00FD0F  E2C1               	dw	58049
   242  00FD11  E381               	dw	58241
   243  00FD13  2340               	dw	9024
   244  00FD15  E101               	dw	57601
   245  00FD17  21C0               	dw	8640
   246  00FD19  2080               	dw	8320
   247  00FD1B  E041               	dw	57409
   248  00FD1D  A001               	dw	40961
   249  00FD1F  60C0               	dw	24768
   250  00FD21  6180               	dw	24960
   251  00FD23  A141               	dw	41281
   252  00FD25  6300               	dw	25344
   253  00FD27  A3C1               	dw	41921
   254  00FD29  A281               	dw	41601
   255  00FD2B  6240               	dw	25152
   256  00FD2D  6600               	dw	26112
   257  00FD2F  A6C1               	dw	42689
   258  00FD31  A781               	dw	42881
   259  00FD33  6740               	dw	26432
   260  00FD35  A501               	dw	42241
   261  00FD37  65C0               	dw	26048
   262  00FD39  6480               	dw	25728
   263  00FD3B  A441               	dw	42049
   264  00FD3D  6C00               	dw	27648
   265  00FD3F  ACC1               	dw	44225
   266  00FD41  AD81               	dw	44417
   267  00FD43  6D40               	dw	27968
   268  00FD45  AF01               	dw	44801
   269  00FD47  6FC0               	dw	28608
   270  00FD49  6E80               	dw	28288
   271  00FD4B  AE41               	dw	44609
   272  00FD4D  AA01               	dw	43521
   273  00FD4F  6AC0               	dw	27328
   274  00FD51  6B80               	dw	27520
   275  00FD53  AB41               	dw	43841
   276  00FD55  6900               	dw	26880
   277  00FD57  A9C1               	dw	43457
   278  00FD59  A881               	dw	43137
   279  00FD5B  6840               	dw	26688
   280  00FD5D  7800               	dw	30720
   281  00FD5F  B8C1               	dw	47297
   282  00FD61  B981               	dw	47489
   283  00FD63  7940               	dw	31040
   284  00FD65  BB01               	dw	47873
   285  00FD67  7BC0               	dw	31680
   286  00FD69  7A80               	dw	31360
   287  00FD6B  BA41               	dw	47681
   288  00FD6D  BE01               	dw	48641
   289  00FD6F  7EC0               	dw	32448
   290  00FD71  7F80               	dw	32640
   291  00FD73  BF41               	dw	48961
   292  00FD75  7D00               	dw	32000
   293  00FD77  BDC1               	dw	48577
   294  00FD79  BC81               	dw	48257
   295  00FD7B  7C40               	dw	31808
   296  00FD7D  B401               	dw	46081
   297  00FD7F  74C0               	dw	29888
   298  00FD81  7580               	dw	30080
   299  00FD83  B541               	dw	46401
   300  00FD85  7700               	dw	30464
   301  00FD87  B7C1               	dw	47041
   302  00FD89  B681               	dw	46721
   303  00FD8B  7640               	dw	30272
   304  00FD8D  7200               	dw	29184
   305  00FD8F  B2C1               	dw	45761
   306  00FD91  B381               	dw	45953
   307  00FD93  7340               	dw	29504
   308  00FD95  B101               	dw	45313
   309  00FD97  71C0               	dw	29120
   310  00FD99  7080               	dw	28800
   311  00FD9B  B041               	dw	45121
   312  00FD9D  5000               	dw	20480
   313  00FD9F  90C1               	dw	37057
   314  00FDA1  9181               	dw	37249
   315  00FDA3  5140               	dw	20800
   316  00FDA5  9301               	dw	37633
   317  00FDA7  53C0               	dw	21440
   318  00FDA9  5280               	dw	21120
   319  00FDAB  9241               	dw	37441
   320  00FDAD  9601               	dw	38401
   321  00FDAF  56C0               	dw	22208
   322  00FDB1  5780               	dw	22400
   323  00FDB3  9741               	dw	38721
   324  00FDB5  5500               	dw	21760
   325  00FDB7  95C1               	dw	38337
   326  00FDB9  9481               	dw	38017
   327  00FDBB  5440               	dw	21568
   328  00FDBD  9C01               	dw	39937
   329  00FDBF  5CC0               	dw	23744
   330  00FDC1  5D80               	dw	23936
   331  00FDC3  9D41               	dw	40257
   332  00FDC5  5F00               	dw	24320
   333  00FDC7  9FC1               	dw	40897
   334  00FDC9  9E81               	dw	40577
   335  00FDCB  5E40               	dw	24128
   336  00FDCD  5A00               	dw	23040
   337  00FDCF  9AC1               	dw	39617
   338  00FDD1  9B81               	dw	39809
   339  00FDD3  5B40               	dw	23360
   340  00FDD5  9901               	dw	39169
   341  00FDD7  59C0               	dw	22976
   342  00FDD9  5880               	dw	22656
   343  00FDDB  9841               	dw	38977
   344  00FDDD  8801               	dw	34817
   345  00FDDF  48C0               	dw	18624
   346  00FDE1  4980               	dw	18816
   347  00FDE3  8941               	dw	35137
   348  00FDE5  4B00               	dw	19200
   349  00FDE7  8BC1               	dw	35777
   350  00FDE9  8A81               	dw	35457
   351  00FDEB  4A40               	dw	19008
   352  00FDED  4E00               	dw	19968
   353  00FDEF  8EC1               	dw	36545
   354  00FDF1  8F81               	dw	36737
   355  00FDF3  4F40               	dw	20288
   356  00FDF5  8D01               	dw	36097
   357  00FDF7  4DC0               	dw	19904
   358  00FDF9  4C80               	dw	19584
   359  00FDFB  8C41               	dw	35905
   360  00FDFD  4400               	dw	17408
   361  00FDFF  84C1               	dw	33985
   362  00FE01  8581               	dw	34177
   363  00FE03  4540               	dw	17728
   364  00FE05  8701               	dw	34561
   365  00FE07  47C0               	dw	18368
   366  00FE09  4680               	dw	18048
   367  00FE0B  8641               	dw	34369
   368  00FE0D  8201               	dw	33281
   369  00FE0F  42C0               	dw	17088
   370  00FE11  4380               	dw	17280
   371  00FE13  8341               	dw	33601
   372  00FE15  4100               	dw	16640
   373  00FE17  81C1               	dw	33217
   374  00FE19  8081               	dw	32897
   375  00FE1B  4040               	dw	16448
   376  00FE1D                     __end_ofCRC16@wCRCTable:
   377                           	callstack 0
   378  00FE1D                     __powers_:
   379                           	callstack 0
   380  00FE1D  0000               	dw	0
   381  00FE1F  3F80               	dw	16256
   382  00FE21  0000               	dw	0
   383  00FE23  4120               	dw	16672
   384  00FE25  0000               	dw	0
   385  00FE27  42C8               	dw	17096
   386  00FE29  0000               	dw	0
   387  00FE2B  447A               	dw	17530
   388  00FE2D  4000               	dw	16384
   389  00FE2F  461C               	dw	17948
   390  00FE31  5000               	dw	20480
   391  00FE33  47C3               	dw	18371
   392  00FE35  2400               	dw	9216
   393  00FE37  4974               	dw	18804
   394  00FE39  9680               	dw	38528
   395  00FE3B  4B18               	dw	19224
   396  00FE3D  BC20               	dw	48160
   397  00FE3F  4CBE               	dw	19646
   398  00FE41  6B28               	dw	27432
   399  00FE43  4E6E               	dw	20078
   400  00FE45  02F9               	dw	761
   401  00FE47  5015               	dw	20501
   402  00FE49  78EC               	dw	30956
   403  00FE4B  60AD               	dw	24749
   404  00FE4D  F2CA               	dw	62154
   405  00FE4F  7149               	dw	29001
   406  00FE51                     __end_of__powers_:
   407                           	callstack 0
   408  00FE51                     __npowers_:
   409                           	callstack 0
   410  00FE51  0000               	dw	0
   411  00FE53  3F80               	dw	16256
   412  00FE55  CCCD               	dw	52429
   413  00FE57  3DCC               	dw	15820
   414  00FE59  D70A               	dw	55050
   415  00FE5B  3C23               	dw	15395
   416  00FE5D  126F               	dw	4719
   417  00FE5F  3A83               	dw	14979
   418  00FE61  B717               	dw	46871
   419  00FE63  38D1               	dw	14545
   420  00FE65  C5AC               	dw	50604
   421  00FE67  3727               	dw	14119
   422  00FE69  37BD               	dw	14269
   423  00FE6B  3586               	dw	13702
   424  00FE6D  BF95               	dw	49045
   425  00FE6F  33D6               	dw	13270
   426  00FE71  CC77               	dw	52343
   427  00FE73  322B               	dw	12843
   428  00FE75  705F               	dw	28767
   429  00FE77  3089               	dw	12425
   430  00FE79  E6FF               	dw	59135
   431  00FE7B  2EDB               	dw	11995
   432  00FE7D  E508               	dw	58632
   433  00FE7F  1E3C               	dw	7740
   434  00FE81  4260               	dw	16992
   435  00FE83  0DA2               	dw	3490
   436  00FE85                     __end_of__npowers_:
   437                           	callstack 0
   438  00FE85                     _hexpowers:
   439                           	callstack 0
   440  00FE85  0001               	dw	1
   441  00FE87  0000               	dw	0
   442  00FE89  0010               	dw	16
   443  00FE8B  0000               	dw	0
   444  00FE8D  0100               	dw	256
   445  00FE8F  0000               	dw	0
   446  00FE91  1000               	dw	4096
   447  00FE93  0000               	dw	0
   448  00FE95  0000               	dw	0
   449  00FE97  0001               	dw	1
   450  00FE99  0000               	dw	0
   451  00FE9B  0010               	dw	16
   452  00FE9D  0000               	dw	0
   453  00FE9F  0100               	dw	256
   454  00FEA1  0000               	dw	0
   455  00FEA3  1000               	dw	4096
   456  00FEA5                     __end_of_hexpowers:
   457                           	callstack 0
   458  00FEA5                     _dpowers:
   459                           	callstack 0
   460  00FEA5  0001               	dw	1
   461  00FEA7  0000               	dw	0
   462  00FEA9  000A               	dw	10
   463  00FEAB  0000               	dw	0
   464  00FEAD  0064               	dw	100
   465  00FEAF  0000               	dw	0
   466  00FEB1  03E8               	dw	1000
   467  00FEB3  0000               	dw	0
   468  00FEB5  2710               	dw	10000
   469  00FEB7  0000               	dw	0
   470  00FEB9  86A0               	dw	34464
   471  00FEBB  0001               	dw	1
   472  00FEBD  4240               	dw	16960
   473  00FEBF  000F               	dw	15
   474  00FEC1  9680               	dw	38528
   475  00FEC3  0098               	dw	152
   476  00FEC5  E100               	dw	57600
   477  00FEC7  05F5               	dw	1525
   478  00FEC9  CA00               	dw	51712
   479  00FECB  3B9A               	dw	15258
   480  00FECD                     __end_of_dpowers:
   481                           	callstack 0
   482  0000                     _PMD1bits	set	3902
   483  0000                     _VREFCON0bits	set	3906
   484  0000                     _PMD2	set	3901
   485  0000                     _PMD1	set	3902
   486  0000                     _ANSELDbits	set	3899
   487  0000                     _ANSELBbits	set	3897
   488  0000                     _ANSELEbits	set	3900
   489  0000                     _ANSELAbits	set	3896
   490  0000                     _PMD2bits	set	3901
   491  0000                     _PMD0bits	set	3903
   492  0000                     _TXREG2	set	3955
   493  0000                     _SPBRG2	set	3957
   494  0000                     _SPBRGH2	set	3958
   495  0000                     _BAUDCON2bits	set	3952
   496  0000                     _RCSTA2bits	set	3953
   497  0000                     _TXSTA2bits	set	3954
   498  0000                     _SSP2BUF	set	3951
   499  0000                     _SSP2STATbits	set	3949
   500  0000                     _SSP2CON1bits	set	3948
   501  0000                     _ADCON2bits	set	4032
   502  0000                     _ADRESL	set	4035
   503  0000                     _ADRESH	set	4036
   504  0000                     _ADCON1bits	set	4033
   505  0000                     _LATDbits	set	3980
   506  0000                     _TRISDbits	set	3989
   507  0000                     _LATE	set	3981
   508  0000                     _LATD	set	3980
   509  0000                     _LATC	set	3979
   510  0000                     _LATB	set	3978
   511  0000                     _LATA	set	3977
   512  0000                     _TRISE	set	3990
   513  0000                     _TRISD	set	3989
   514  0000                     _TRISC	set	3988
   515  0000                     _TRISB	set	3987
   516  0000                     _TRISA	set	3986
   517  0000                     _ADCON0bits	set	4034
   518  0000                     _INTCONbits	set	4082
   519  0000                     _INTCON3bits	set	4080
   520  0000                     _TRISBbits	set	3987
   521  0000                     _TRISEbits	set	3990
   522  0000                     _LATAbits	set	3977
   523  0000                     _TRISAbits	set	3986
   524  0000                     _LATEbits	set	3981
   525  0000                     _INTCON2bits	set	4081
   526  0000                     _TRMT2	set	31633
   527  0000                     _SSP2IF	set	32039
   528  00FECD                     STR_14:
   529  00FECD  4C                 	db	76	;'L'
   530  00FECE  6F                 	db	111	;'o'
   531  00FECF  52                 	db	82	;'R'
   532  00FED0  61                 	db	97	;'a'
   533  00FED1  20                 	db	32
   534  00FED2  6C                 	db	108	;'l'
   535  00FED3  6F                 	db	111	;'o'
   536  00FED4  61                 	db	97	;'a'
   537  00FED5  64                 	db	100	;'d'
   538  00FED6  20                 	db	32
   539  00FED7  6F                 	db	111	;'o'
   540  00FED8  70                 	db	112	;'p'
   541  00FED9  74                 	db	116	;'t'
   542  00FEDA  69                 	db	105	;'i'
   543  00FEDB  6D                 	db	109	;'m'
   544  00FEDC  61                 	db	97	;'a'
   545  00FEDD  6C                 	db	108	;'l'
   546  00FEDE  20                 	db	32
   547  00FEDF  72                 	db	114	;'r'
   548  00FEE0  65                 	db	101	;'e'
   549  00FEE1  67                 	db	103	;'g'
   550  00FEE2  69                 	db	105	;'i'
   551  00FEE3  73                 	db	115	;'s'
   552  00FEE4  74                 	db	116	;'t'
   553  00FEE5  65                 	db	101	;'e'
   554  00FEE6  72                 	db	114	;'r'
   555  00FEE7  20                 	db	32
   556  00FEE8  76                 	db	118	;'v'
   557  00FEE9  61                 	db	97	;'a'
   558  00FEEA  6C                 	db	108	;'l'
   559  00FEEB  75                 	db	117	;'u'
   560  00FEEC  65                 	db	101	;'e'
   561  00FEED  73                 	db	115	;'s'
   562  00FEEE  0D                 	db	13
   563  00FEEF  0A                 	db	10
   564  00FEF0  00                 	db	0
   565  00FEF1  57                 	db	87	;'W'
   566  00FEF2  61                 	db	97	;'a'
   567  00FEF3  69                 	db	105	;'i'
   568  00FEF4  74                 	db	116	;'t'
   569  00FEF5  20                 	db	32
   570  00FEF6  66                 	db	102	;'f'
   571  00FEF7  6F                 	db	111	;'o'
   572  00FEF8  72                 	db	114	;'r'
   573  00FEF9  20                 	db	32
   574  00FEFA  65                 	db	101	;'e'
   575  00FEFB  6E                 	db	110	;'n'
   576  00FEFC  64                 	db	100	;'d'
   577  00FEFD  20                 	db	32
   578  00FEFE  6F                 	db	111	;'o'
   579  00FEFF  66                 	db	102	;'f'
   580  00FF00  20                 	db	32
   581  00FF01  74                 	db	116	;'t'
   582  00FF02  72                 	db	114	;'r'
   583  00FF03  61                 	db	97	;'a'
   584  00FF04  6E                 	db	110	;'n'
   585  00FF05  73                 	db	115	;'s'
   586  00FF06  6D                 	db	109	;'m'
   587  00FF07  69                 	db	105	;'i'
   588  00FF08  73                 	db	115	;'s'
   589  00FF09  73                 	db	115	;'s'
   590  00FF0A  69                 	db	105	;'i'
   591  00FF0B  6F                 	db	111	;'o'
   592  00FF0C  6E                 	db	110	;'n'
   593  00FF0D  2E                 	db	46
   594  00FF0E  2E                 	db	46
   595  00FF0F  2E                 	db	46
   596  00FF10  0D                 	db	13
   597  00FF11  0A                 	db	10
   598  00FF12  00                 	db	0
   599  00FF13                     STR_15:
   600  00FF13  4C                 	db	76	;'L'
   601  00FF14  6F                 	db	111	;'o'
   602  00FF15  52                 	db	82	;'R'
   603  00FF16  61                 	db	97	;'a'
   604  00FF17  20                 	db	32
   605  00FF18  73                 	db	115	;'s'
   606  00FF19  65                 	db	101	;'e'
   607  00FF1A  74                 	db	116	;'t'
   608  00FF1B  20                 	db	32
   609  00FF1C  66                 	db	102	;'f'
   610  00FF1D  72                 	db	114	;'r'
   611  00FF1E  65                 	db	101	;'e'
   612  00FF1F  71                 	db	113	;'q'
   613  00FF20  75                 	db	117	;'u'
   614  00FF21  65                 	db	101	;'e'
   615  00FF22  6E                 	db	110	;'n'
   616  00FF23  63                 	db	99	;'c'
   617  00FF24  79                 	db	121	;'y'
   618  00FF25  0D                 	db	13
   619  00FF26  0A                 	db	10
   620  00FF27  00                 	db	0
   621  00FF28  4D                 	db	77	;'M'
   622  00FF29  65                 	db	101	;'e'
   623  00FF2A  73                 	db	115	;'s'
   624  00FF2B  73                 	db	115	;'s'
   625  00FF2C  61                 	db	97	;'a'
   626  00FF2D  67                 	db	103	;'g'
   627  00FF2E  65                 	db	101	;'e'
   628  00FF2F  20                 	db	32
   629  00FF30  63                 	db	99	;'c'
   630  00FF31  6F                 	db	111	;'o'
   631  00FF32  75                 	db	117	;'u'
   632  00FF33  6E                 	db	110	;'n'
   633  00FF34  74                 	db	116	;'t'
   634  00FF35  20                 	db	32
   635  00FF36  25                 	db	37
   636  00FF37  6C                 	db	108	;'l'
   637  00FF38  75                 	db	117	;'u'
   638  00FF39  0D                 	db	13
   639  00FF3A  0A                 	db	10
   640  00FF3B  00                 	db	0
   641  00FF3C  54                 	db	84	;'T'
   642  00FF3D  72                 	db	114	;'r'
   643  00FF3E  61                 	db	97	;'a'
   644  00FF3F  6E                 	db	110	;'n'
   645  00FF40  73                 	db	115	;'s'
   646  00FF41  6D                 	db	109	;'m'
   647  00FF42  69                 	db	105	;'i'
   648  00FF43  74                 	db	116	;'t'
   649  00FF44  74                 	db	116	;'t'
   650  00FF45  69                 	db	105	;'i'
   651  00FF46  6E                 	db	110	;'n'
   652  00FF47  67                 	db	103	;'g'
   653  00FF48  2E                 	db	46
   654  00FF49  2E                 	db	46
   655  00FF4A  2E                 	db	46
   656  00FF4B  0D                 	db	13
   657  00FF4C  0A                 	db	10
   658  00FF4D  00                 	db	0
   659  00FF4E  4C                 	db	76	;'L'
   660  00FF4F  6F                 	db	111	;'o'
   661  00FF50  52                 	db	82	;'R'
   662  00FF51  61                 	db	97	;'a'
   663  00FF52  20                 	db	32
   664  00FF53  52                 	db	82	;'R'
   665  00FF54  61                 	db	97	;'a'
   666  00FF55  69                 	db	105	;'i'
   667  00FF56  6E                 	db	110	;'n'
   668  00FF57  20                 	db	32
   669  00FF58  47                 	db	71	;'G'
   670  00FF59  61                 	db	97	;'a'
   671  00FF5A  75                 	db	117	;'u'
   672  00FF5B  67                 	db	103	;'g'
   673  00FF5C  65                 	db	101	;'e'
   674  00FF5D  0D                 	db	13
   675  00FF5E  0A                 	db	10
   676  00FF5F  00                 	db	0
   677  00FF60                     STR_19:
   678  00FF60  30                 	db	48	;'0'
   679  00FF61  31                 	db	49	;'1'
   680  00FF62  32                 	db	50	;'2'
   681  00FF63  33                 	db	51	;'3'
   682  00FF64  34                 	db	52	;'4'
   683  00FF65  35                 	db	53	;'5'
   684  00FF66  36                 	db	54	;'6'
   685  00FF67  37                 	db	55	;'7'
   686  00FF68  38                 	db	56	;'8'
   687  00FF69  39                 	db	57	;'9'
   688  00FF6A  41                 	db	65	;'A'
   689  00FF6B  42                 	db	66	;'B'
   690  00FF6C  43                 	db	67	;'C'
   691  00FF6D  44                 	db	68	;'D'
   692  00FF6E  45                 	db	69	;'E'
   693  00FF6F  46                 	db	70	;'F'
   694  00FF70  00                 	db	0
   695  00FF71                     STR_16:
   696  00FF71  54                 	db	84	;'T'
   697  00FF72  72                 	db	114	;'r'
   698  00FF73  61                 	db	97	;'a'
   699  00FF74  6E                 	db	110	;'n'
   700  00FF75  73                 	db	115	;'s'
   701  00FF76  6D                 	db	109	;'m'
   702  00FF77  69                 	db	105	;'i'
   703  00FF78  74                 	db	116	;'t'
   704  00FF79  74                 	db	116	;'t'
   705  00FF7A  69                 	db	105	;'i'
   706  00FF7B  6E                 	db	110	;'n'
   707  00FF7C  67                 	db	103	;'g'
   708  00FF7D  2E                 	db	46
   709  00FF7E  0D                 	db	13
   710  00FF7F  0A                 	db	10
   711  00FF80  00                 	db	0
   712  00FF81                     STR_13:
   713  00FF81  53                 	db	83	;'S'
   714  00FF82  65                 	db	101	;'e'
   715  00FF83  74                 	db	116	;'t'
   716  00FF84  20                 	db	32
   717  00FF85  4C                 	db	76	;'L'
   718  00FF86  6F                 	db	111	;'o'
   719  00FF87  52                 	db	82	;'R'
   720  00FF88  61                 	db	97	;'a'
   721  00FF89  20                 	db	32
   722  00FF8A  4D                 	db	77	;'M'
   723  00FF8B  6F                 	db	111	;'o'
   724  00FF8C  64                 	db	100	;'d'
   725  00FF8D  65                 	db	101	;'e'
   726  00FF8E  0D                 	db	13
   727  00FF8F  0A                 	db	10
   728  00FF90  00                 	db	0
   729  00FF91  52                 	db	82	;'R'
   730  00FF92  61                 	db	97	;'a'
   731  00FF93  69                 	db	105	;'i'
   732  00FF94  6E                 	db	110	;'n'
   733  00FF95  20                 	db	32
   734  00FF96  74                 	db	116	;'t'
   735  00FF97  69                 	db	105	;'i'
   736  00FF98  70                 	db	112	;'p'
   737  00FF99  73                 	db	115	;'s'
   738  00FF9A  20                 	db	32
   739  00FF9B  25                 	db	37
   740  00FF9C  6C                 	db	108	;'l'
   741  00FF9D  75                 	db	117	;'u'
   742  00FF9E  0D                 	db	13
   743  00FF9F  0A                 	db	10
   744  00FFA0  00                 	db	0
   745  00FFA1                     STR_12:
   746  00FFA1  4C                 	db	76	;'L'
   747  00FFA2  6F                 	db	111	;'o'
   748  00FFA3  52                 	db	82	;'R'
   749  00FFA4  61                 	db	97	;'a'
   750  00FFA5  20                 	db	32
   751  00FFA6  53                 	db	83	;'S'
   752  00FFA7  74                 	db	116	;'t'
   753  00FFA8  61                 	db	97	;'a'
   754  00FFA9  72                 	db	114	;'r'
   755  00FFAA  74                 	db	116	;'t'
   756  00FFAB  0D                 	db	13
   757  00FFAC  0A                 	db	10
   758  00FFAD  00                 	db	0
   759  00FFAE  52                 	db	82	;'R'
   760  00FFAF  65                 	db	101	;'e'
   761  00FFB0  67                 	db	103	;'g'
   762  00FFB1  20                 	db	32
   763  00FFB2  25                 	db	37
   764  00FFB3  58                 	db	88	;'X'
   765  00FFB4  3A                 	db	58	;':'
   766  00FFB5  25                 	db	37
   767  00FFB6  58                 	db	88	;'X'
   768  00FFB7  0D                 	db	13
   769  00FFB8  0A                 	db	10
   770  00FFB9  00                 	db	0
   771  00FFBA  53                 	db	83	;'S'
   772  00FFBB  6C                 	db	108	;'l'
   773  00FFBC  65                 	db	101	;'e'
   774  00FFBD  65                 	db	101	;'e'
   775  00FFBE  70                 	db	112	;'p'
   776  00FFBF  69                 	db	105	;'i'
   777  00FFC0  6E                 	db	110	;'n'
   778  00FFC1  67                 	db	103	;'g'
   779  00FFC2  0D                 	db	13
   780  00FFC3  0A                 	db	10
   781  00FFC4  00                 	db	0
   782  00FFC5                     STR_17:
   783  00FFC5  54                 	db	84	;'T'
   784  00FFC6  58                 	db	88	;'X'
   785  00FFC7  20                 	db	32
   786  00FFC8  4D                 	db	77	;'M'
   787  00FFC9  6F                 	db	111	;'o'
   788  00FFCA  64                 	db	100	;'d'
   789  00FFCB  65                 	db	101	;'e'
   790  00FFCC  0D                 	db	13
   791  00FFCD  0A                 	db	10
   792  00FFCE  00                 	db	0
   793  00FFCF  54                 	db	84	;'T'
   794  00FFD0  45                 	db	69	;'E'
   795  00FFD1  4D                 	db	77	;'M'
   796  00FFD2  50                 	db	80	;'P'
   797  00FFD3  20                 	db	32
   798  00FFD4  25                 	db	37
   799  00FFD5  64                 	db	100	;'d'
   800  00FFD6  0D                 	db	13
   801  00FFD7  0A                 	db	10
   802  00FFD8  00                 	db	0
   803  00FFD9  42                 	db	66	;'B'
   804  00FFDA  41                 	db	65	;'A'
   805  00FFDB  54                 	db	84	;'T'
   806  00FFDC  54                 	db	84	;'T'
   807  00FFDD  20                 	db	32
   808  00FFDE  25                 	db	37
   809  00FFDF  64                 	db	100	;'d'
   810  00FFE0  0D                 	db	13
   811  00FFE1  0A                 	db	10
   812  00FFE2  00                 	db	0
   813  00FFE3  54                 	db	84	;'T'
   814  00FFE4  58                 	db	88	;'X'
   815  00FFE5  46                 	db	70	;'F'
   816  00FFE6  3A                 	db	58	;':'
   817  00FFE7  20                 	db	32
   818  00FFE8  25                 	db	37
   819  00FFE9  66                 	db	102	;'f'
   820  00FFEA  0D                 	db	13
   821  00FFEB  0A                 	db	10
   822  00FFEC  00                 	db	0
   823  00FFED  54                 	db	84	;'T'
   824  00FFEE  58                 	db	88	;'X'
   825  00FFEF  20                 	db	32
   826  00FFF0  46                 	db	70	;'F'
   827  00FFF1  61                 	db	97	;'a'
   828  00FFF2  69                 	db	105	;'i'
   829  00FFF3  6C                 	db	108	;'l'
   830  00FFF4  0D                 	db	13
   831  00FFF5  0A                 	db	10
   832  00FFF6  00                 	db	0
   833  00FFF7  44                 	db	68	;'D'
   834  00FFF8  6F                 	db	111	;'o'
   835  00FFF9  6E                 	db	110	;'n'
   836  00FFFA  65                 	db	101	;'e'
   837  00FFFB  2E                 	db	46
   838  00FFFC  0D                 	db	13
   839  00FFFD  0A                 	db	10
   840  00FFFE  00                 	db	0
   841  00FFFF  00                 	db	0	; dummy byte at the end
   842  0000                     
   843                           ; #config settings
   844                           
   845                           	psect	cinit
   846  002658                     __pcinit:
   847                           	callstack 0
   848  002658                     start_initialization:
   849                           	callstack 0
   850  002658                     __initialization:
   851                           	callstack 0
   852                           
   853                           ; Initialize objects allocated to BANK0 (8 bytes)
   854                           ; load TBLPTR registers with __pidataBANK0
   855  002658  0EC4               	movlw	low __pidataBANK0
   856  00265A  6EF6               	movwf	tblptrl,c
   857  00265C  0E28               	movlw	high __pidataBANK0
   858  00265E  6EF7               	movwf	tblptrh,c
   859  002660  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   860  002662  6EF8               	movwf	tblptru,c
   861  002664  EE00  F0BF         	lfsr	0,__pdataBANK0
   862  002668  EE10 F008          	lfsr	1,8
   863  00266C                     copy_data0:
   864  00266C  0009               	tblrd		*+
   865  00266E  CFF5 FFEE          	movff	tablat,postinc0
   866  002672  50E5               	movf	postdec1,w,c
   867  002674  50E1               	movf	fsr1l,w,c
   868  002676  E1FA               	bnz	copy_data0
   869                           
   870                           ; Clear objects allocated to BANK0 (62 bytes)
   871  002678  EE00  F060         	lfsr	0,__pbssBANK0
   872  00267C  0E3E               	movlw	62
   873  00267E                     clear_0:
   874  00267E  6AEE               	clrf	postinc0,c
   875  002680  06E8               	decf	wreg,f,c
   876  002682  E1FD               	bnz	clear_0
   877  002684                     end_of_initialization:
   878                           	callstack 0
   879  002684                     __end_of__initialization:
   880                           	callstack 0
   881  002684  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   882  002686  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   883  002688  0E00               	movlw	low (__Lmediumconst shr (0+16))
   884  00268A  6EF8               	movwf	tblptru,c
   885  00268C  0100               	movlb	0
   886  00268E  EF64  F00E         	goto	_main	;jump to C main() function
   887                           
   888                           	psect	bssBANK0
   889  000060                     __pbssBANK0:
   890                           	callstack 0
   891  000060                     _messageCount:
   892                           	callstack 0
   893  000060                     	ds	4
   894  000064                     _tips:
   895                           	callstack 0
   896  000064                     	ds	4
   897  000068                     _temp:
   898                           	callstack 0
   899  000068                     	ds	2
   900  00006A                     _batt:
   901                           	callstack 0
   902  00006A                     	ds	2
   903  00006C                     _txData:
   904                           	callstack 0
   905  00006C                     	ds	50
   906                           
   907                           	psect	dataBANK0
   908  0000BF                     __pdataBANK0:
   909                           	callstack 0
   910  0000BF                     _address:
   911                           	callstack 0
   912  0000BF                     	ds	8
   913                           
   914                           	psect	cstackBANK0
   915  00009E                     __pcstackBANK0:
   916                           	callstack 0
   917  00009E                     _printf$2401:
   918                           	callstack 0
   919                           
   920                           ; 4 bytes @ 0x0
   921  00009E                     	ds	4
   922  0000A2                     printf@idx:
   923                           	callstack 0
   924                           
   925                           ; 1 bytes @ 0x4
   926  0000A2                     	ds	1
   927  0000A3                     printf@ap:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x5
   931  0000A3                     	ds	1
   932  0000A4                     printf@prec:
   933                           	callstack 0
   934                           
   935                           ; 2 bytes @ 0x6
   936  0000A4                     	ds	2
   937  0000A6                     printf@flag:
   938                           	callstack 0
   939                           
   940                           ; 2 bytes @ 0x8
   941  0000A6                     	ds	2
   942  0000A8                     printf@eexp:
   943                           	callstack 0
   944                           
   945                           ; 2 bytes @ 0xA
   946  0000A8                     	ds	2
   947  0000AA                     printf@tmpval:
   948                           	callstack 0
   949                           
   950                           ; 4 bytes @ 0xC
   951  0000AA                     	ds	4
   952  0000AE                     printf@val:
   953                           	callstack 0
   954                           
   955                           ; 4 bytes @ 0x10
   956  0000AE                     	ds	4
   957  0000B2                     printf@fval:
   958                           	callstack 0
   959                           
   960                           ; 4 bytes @ 0x14
   961  0000B2                     	ds	4
   962  0000B6                     printf@c:
   963                           	callstack 0
   964                           
   965                           ; 1 bytes @ 0x18
   966  0000B6                     	ds	1
   967  0000B7                     transmitData@flags:
   968                           	callstack 0
   969                           
   970                           ; 1 bytes @ 0x19
   971  0000B7                     	ds	1
   972  0000B8                     transmitData@calcCRC:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0x1A
   976  0000B8                     	ds	2
   977  0000BA                     transmitData@i_881:
   978                           	callstack 0
   979                           
   980                           ; 1 bytes @ 0x1C
   981  0000BA                     	ds	1
   982  0000BB                     transmitData@j:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0x1D
   986  0000BB                     	ds	1
   987  0000BC                     transmitData@i:
   988                           	callstack 0
   989                           
   990                           ; 1 bytes @ 0x1E
   991  0000BC                     	ds	1
   992  0000BD                     ??_main:
   993                           
   994                           ; 1 bytes @ 0x1F
   995  0000BD                     	ds	2
   996                           
   997                           	psect	cstackCOMRAM
   998  000001                     __pcstackCOMRAM:
   999                           	callstack 0
  1000  000001                     ?_readBattery:
  1001                           	callstack 0
  1002  000001                     ?_readTemperature:
  1003                           	callstack 0
  1004  000001                     ?_CRC16:
  1005                           	callstack 0
  1006  000001                     ?___wmul:
  1007                           	callstack 0
  1008  000001                     ?___awmod:
  1009                           	callstack 0
  1010  000001                     ?__tdiv_to_l_:
  1011                           	callstack 0
  1012  000001                     ?__div_to_l_:
  1013                           	callstack 0
  1014  000001                     ?___lldiv:
  1015                           	callstack 0
  1016  000001                     ?___flneg:
  1017                           	callstack 0
  1018  000001                     ?___xxtofl:
  1019                           	callstack 0
  1020  000001                     SPI2WriteByte@data:
  1021                           	callstack 0
  1022  000001                     SPI2ReadByte@address:
  1023                           	callstack 0
  1024  000001                     USART2_Start@baudrate:
  1025                           	callstack 0
  1026  000001                     putch@data:
  1027                           	callstack 0
  1028  000001                     CRC16@nData:
  1029                           	callstack 0
  1030  000001                     ___lbmod@divisor:
  1031                           	callstack 0
  1032  000001                     ___wmul@multiplier:
  1033                           	callstack 0
  1034  000001                     ___awmod@dividend:
  1035                           	callstack 0
  1036  000001                     ___lldiv@dividend:
  1037                           	callstack 0
  1038  000001                     __div_to_l_@f1:
  1039                           	callstack 0
  1040  000001                     ___fleq@ff1:
  1041                           	callstack 0
  1042  000001                     ___flge@ff1:
  1043                           	callstack 0
  1044  000001                     ___flneg@f1:
  1045                           	callstack 0
  1046  000001                     __tdiv_to_l_@f1:
  1047                           	callstack 0
  1048  000001                     ___xxtofl@val:
  1049                           	callstack 0
  1050                           
  1051                           ; 4 bytes @ 0x0
  1052  000001                     	ds	1
  1053  000002                     SPI2ReadByte@dataByte:
  1054                           	callstack 0
  1055  000002                     ___lbmod@dividend:
  1056                           	callstack 0
  1057  000002                     CRC16@wLength:
  1058                           	callstack 0
  1059                           
  1060                           ; 2 bytes @ 0x1
  1061  000002                     	ds	1
  1062  000003                     ??_readBattery:
  1063  000003                     ??_readTemperature:
  1064  000003                     SPI2WriteByte@address:
  1065                           	callstack 0
  1066  000003                     LoRaGetIRQFlags@regValue:
  1067                           	callstack 0
  1068  000003                     ___lbmod@counter:
  1069                           	callstack 0
  1070  000003                     ___wmul@multiplicand:
  1071                           	callstack 0
  1072  000003                     ___awmod@divisor:
  1073                           	callstack 0
  1074                           
  1075                           ; 2 bytes @ 0x2
  1076  000003                     	ds	1
  1077  000004                     ??_CRC16:
  1078  000004                     writeOpModeRegister@regValue:
  1079                           	callstack 0
  1080  000004                     ___lbmod@rem:
  1081                           	callstack 0
  1082                           
  1083                           ; 1 bytes @ 0x3
  1084  000004                     	ds	1
  1085  000005                     ??___xxtofl:
  1086  000005                     setLoRaMode@regValue:
  1087                           	callstack 0
  1088  000005                     LoRaStandbyMode@regValue:
  1089                           	callstack 0
  1090  000005                     LoRaSleepMode@regValue:
  1091                           	callstack 0
  1092  000005                     ___awmod@counter:
  1093                           	callstack 0
  1094  000005                     ___lbdiv@divisor:
  1095                           	callstack 0
  1096  000005                     readBattery@result:
  1097                           	callstack 0
  1098  000005                     readTemperature@result:
  1099                           	callstack 0
  1100  000005                     ___wmul@product:
  1101                           	callstack 0
  1102  000005                     ___lldiv@divisor:
  1103                           	callstack 0
  1104  000005                     __div_to_l_@f2:
  1105                           	callstack 0
  1106  000005                     ___fleq@ff2:
  1107                           	callstack 0
  1108  000005                     ___flge@ff2:
  1109                           	callstack 0
  1110  000005                     __tdiv_to_l_@f2:
  1111                           	callstack 0
  1112                           
  1113                           ; 4 bytes @ 0x4
  1114  000005                     	ds	1
  1115  000006                     ??_LoRaOptimalLoad:
  1116  000006                     CRC16@nTemp:
  1117                           	callstack 0
  1118  000006                     ___awmod@sign:
  1119                           	callstack 0
  1120  000006                     ___lbdiv@dividend:
  1121                           	callstack 0
  1122                           
  1123                           ; 1 bytes @ 0x5
  1124  000006                     	ds	1
  1125  000007                     ?___awdiv:
  1126                           	callstack 0
  1127  000007                     LoRaOptimalLoad@syncWord:
  1128                           	callstack 0
  1129  000007                     ___lbdiv@counter:
  1130                           	callstack 0
  1131  000007                     CRC16@wCRCWord:
  1132                           	callstack 0
  1133  000007                     ___awdiv@dividend:
  1134                           	callstack 0
  1135                           
  1136                           ; 2 bytes @ 0x6
  1137  000007                     	ds	1
  1138  000008                     ___lbdiv@quotient:
  1139                           	callstack 0
  1140                           
  1141                           ; 1 bytes @ 0x7
  1142  000008                     	ds	1
  1143  000009                     ??__tdiv_to_l_:
  1144  000009                     ??___fleq:
  1145  000009                     ??___flge:
  1146  000009                     ___xxtofl@sign:
  1147                           	callstack 0
  1148  000009                     ___awdiv@divisor:
  1149                           	callstack 0
  1150  000009                     ___lldiv@quotient:
  1151                           	callstack 0
  1152  000009                     __div_to_l_@quot:
  1153                           	callstack 0
  1154                           
  1155                           ; 4 bytes @ 0x8
  1156  000009                     	ds	1
  1157  00000A                     ___xxtofl@exp:
  1158                           	callstack 0
  1159                           
  1160                           ; 1 bytes @ 0x9
  1161  00000A                     	ds	1
  1162  00000B                     ___awdiv@counter:
  1163                           	callstack 0
  1164  00000B                     ___xxtofl@arg:
  1165                           	callstack 0
  1166                           
  1167                           ; 4 bytes @ 0xA
  1168  00000B                     	ds	1
  1169  00000C                     ___awdiv@sign:
  1170                           	callstack 0
  1171  00000C                     __tdiv_to_l_@quot:
  1172                           	callstack 0
  1173                           
  1174                           ; 4 bytes @ 0xB
  1175  00000C                     	ds	1
  1176  00000D                     ___lldiv@counter:
  1177                           	callstack 0
  1178  00000D                     __div_to_l_@cntr:
  1179                           	callstack 0
  1180  00000D                     ___awdiv@quotient:
  1181                           	callstack 0
  1182                           
  1183                           ; 2 bytes @ 0xC
  1184  00000D                     	ds	1
  1185  00000E                     ?___llmod:
  1186                           	callstack 0
  1187  00000E                     __div_to_l_@exp1:
  1188                           	callstack 0
  1189  00000E                     ___llmod@dividend:
  1190                           	callstack 0
  1191                           
  1192                           ; 4 bytes @ 0xD
  1193  00000E                     	ds	1
  1194  00000F                     ?___fldiv:
  1195                           	callstack 0
  1196  00000F                     ?___flmul:
  1197                           	callstack 0
  1198  00000F                     ___fldiv@b:
  1199                           	callstack 0
  1200  00000F                     ___flmul@b:
  1201                           	callstack 0
  1202                           
  1203                           ; 4 bytes @ 0xE
  1204  00000F                     	ds	1
  1205  000010                     __tdiv_to_l_@cntr:
  1206                           	callstack 0
  1207                           
  1208                           ; 1 bytes @ 0xF
  1209  000010                     	ds	1
  1210  000011                     __tdiv_to_l_@exp1:
  1211                           	callstack 0
  1212                           
  1213                           ; 1 bytes @ 0x10
  1214  000011                     	ds	1
  1215  000012                     ___llmod@divisor:
  1216                           	callstack 0
  1217                           
  1218                           ; 4 bytes @ 0x11
  1219  000012                     	ds	1
  1220  000013                     ___fldiv@a:
  1221                           	callstack 0
  1222  000013                     ___flmul@a:
  1223                           	callstack 0
  1224                           
  1225                           ; 4 bytes @ 0x12
  1226  000013                     	ds	3
  1227  000016                     ___llmod@counter:
  1228                           	callstack 0
  1229                           
  1230                           ; 1 bytes @ 0x15
  1231  000016                     	ds	1
  1232  000017                     ??___fldiv:
  1233  000017                     ??___flmul:
  1234                           
  1235                           ; 1 bytes @ 0x16
  1236  000017                     	ds	4
  1237  00001B                     ___flmul@sign:
  1238                           	callstack 0
  1239  00001B                     ___fldiv@rem:
  1240                           	callstack 0
  1241                           
  1242                           ; 4 bytes @ 0x1A
  1243  00001B                     	ds	1
  1244  00001C                     ___flmul@aexp:
  1245                           	callstack 0
  1246                           
  1247                           ; 1 bytes @ 0x1B
  1248  00001C                     	ds	1
  1249  00001D                     ___flmul@grs:
  1250                           	callstack 0
  1251                           
  1252                           ; 4 bytes @ 0x1C
  1253  00001D                     	ds	2
  1254  00001F                     ___fldiv@sign:
  1255                           	callstack 0
  1256                           
  1257                           ; 1 bytes @ 0x1E
  1258  00001F                     	ds	1
  1259  000020                     ___fldiv@new_exp:
  1260                           	callstack 0
  1261                           
  1262                           ; 2 bytes @ 0x1F
  1263  000020                     	ds	1
  1264  000021                     ___flmul@bexp:
  1265                           	callstack 0
  1266                           
  1267                           ; 1 bytes @ 0x20
  1268  000021                     	ds	1
  1269  000022                     ___fldiv@grs:
  1270                           	callstack 0
  1271  000022                     ___flmul@prod:
  1272                           	callstack 0
  1273                           
  1274                           ; 4 bytes @ 0x21
  1275  000022                     	ds	4
  1276  000026                     ___fldiv@bexp:
  1277                           	callstack 0
  1278  000026                     ___flmul@temp:
  1279                           	callstack 0
  1280                           
  1281                           ; 2 bytes @ 0x25
  1282  000026                     	ds	1
  1283  000027                     ___fldiv@aexp:
  1284                           	callstack 0
  1285                           
  1286                           ; 1 bytes @ 0x26
  1287  000027                     	ds	1
  1288  000028                     ?_LoRaGetFrequency:
  1289                           	callstack 0
  1290  000028                     ?_fround:
  1291                           	callstack 0
  1292  000028                     ?_scale:
  1293                           	callstack 0
  1294                           
  1295                           ; 4 bytes @ 0x27
  1296  000028                     	ds	4
  1297  00002C                     ??_LoRaGetFrequency:
  1298  00002C                     ??_fround:
  1299  00002C                     _scale$2400:
  1300                           	callstack 0
  1301                           
  1302                           ; 4 bytes @ 0x2B
  1303  00002C                     	ds	2
  1304  00002E                     _fround$2399:
  1305                           	callstack 0
  1306                           
  1307                           ; 4 bytes @ 0x2D
  1308  00002E                     	ds	2
  1309  000030                     scale@scl:
  1310                           	callstack 0
  1311                           
  1312                           ; 1 bytes @ 0x2F
  1313  000030                     	ds	1
  1314  000031                     ?___fltol:
  1315                           	callstack 0
  1316  000031                     ___fltol@f1:
  1317                           	callstack 0
  1318                           
  1319                           ; 4 bytes @ 0x30
  1320  000031                     	ds	1
  1321  000032                     _fround$2398:
  1322                           	callstack 0
  1323                           
  1324                           ; 4 bytes @ 0x31
  1325  000032                     	ds	3
  1326  000035                     ??___fltol:
  1327                           
  1328                           ; 1 bytes @ 0x34
  1329  000035                     	ds	1
  1330  000036                     fround@prec:
  1331                           	callstack 0
  1332                           
  1333                           ; 1 bytes @ 0x35
  1334  000036                     	ds	1
  1335  000037                     ?___fladd:
  1336                           	callstack 0
  1337  000037                     ___fladd@b:
  1338                           	callstack 0
  1339                           
  1340                           ; 4 bytes @ 0x36
  1341  000037                     	ds	1
  1342  000038                     LoRaGetFrequency@intermediate:
  1343                           	callstack 0
  1344                           
  1345                           ; 4 bytes @ 0x37
  1346  000038                     	ds	1
  1347  000039                     ___fltol@sign1:
  1348                           	callstack 0
  1349                           
  1350                           ; 1 bytes @ 0x38
  1351  000039                     	ds	1
  1352  00003A                     ___fltol@exp1:
  1353                           	callstack 0
  1354                           
  1355                           ; 1 bytes @ 0x39
  1356  00003A                     	ds	1
  1357  00003B                     LoRaSetFrequency@freqMHz:
  1358                           	callstack 0
  1359  00003B                     ___fladd@a:
  1360                           	callstack 0
  1361                           
  1362                           ; 4 bytes @ 0x3A
  1363  00003B                     	ds	1
  1364  00003C                     LoRaGetFrequency@freqMHz:
  1365                           	callstack 0
  1366                           
  1367                           ; 4 bytes @ 0x3B
  1368  00003C                     	ds	3
  1369  00003F                     ??___fladd:
  1370  00003F                     LoRaSetFrequency@msb:
  1371                           	callstack 0
  1372                           
  1373                           ; 1 bytes @ 0x3E
  1374  00003F                     	ds	1
  1375  000040                     LoRaSetFrequency@mid:
  1376                           	callstack 0
  1377  000040                     LoRaGetFrequency@msb:
  1378                           	callstack 0
  1379                           
  1380                           ; 1 bytes @ 0x3F
  1381  000040                     	ds	1
  1382  000041                     LoRaSetFrequency@lsb:
  1383                           	callstack 0
  1384  000041                     LoRaGetFrequency@mid:
  1385                           	callstack 0
  1386                           
  1387                           ; 1 bytes @ 0x40
  1388  000041                     	ds	1
  1389  000042                     LoRaGetFrequency@lsb:
  1390                           	callstack 0
  1391  000042                     LoRaSetFrequency@intermediate:
  1392                           	callstack 0
  1393                           
  1394                           ; 4 bytes @ 0x41
  1395  000042                     	ds	1
  1396  000043                     ___fladd@signs:
  1397                           	callstack 0
  1398                           
  1399                           ; 1 bytes @ 0x42
  1400  000043                     	ds	1
  1401  000044                     ___fladd@aexp:
  1402                           	callstack 0
  1403                           
  1404                           ; 1 bytes @ 0x43
  1405  000044                     	ds	1
  1406  000045                     ___fladd@bexp:
  1407                           	callstack 0
  1408                           
  1409                           ; 1 bytes @ 0x44
  1410  000045                     	ds	1
  1411  000046                     ___fladd@grs:
  1412                           	callstack 0
  1413                           
  1414                           ; 1 bytes @ 0x45
  1415  000046                     	ds	1
  1416  000047                     ?___flsub:
  1417                           	callstack 0
  1418  000047                     ___flsub@b:
  1419                           	callstack 0
  1420                           
  1421                           ; 4 bytes @ 0x46
  1422  000047                     	ds	4
  1423  00004B                     ___flsub@a:
  1424                           	callstack 0
  1425                           
  1426                           ; 4 bytes @ 0x4A
  1427  00004B                     	ds	4
  1428  00004F                     ?_printf:
  1429                           	callstack 0
  1430  00004F                     printf@f:
  1431                           	callstack 0
  1432                           
  1433                           ; 2 bytes @ 0x4E
  1434  00004F                     	ds	6
  1435  000055                     ??_printf:
  1436                           
  1437                           ; 1 bytes @ 0x54
  1438  000055                     	ds	2
  1439  000057                     LoRaTXMode@regValue:
  1440                           	callstack 0
  1441  000057                     LoRaStart@freq:
  1442                           	callstack 0
  1443                           
  1444                           ; 4 bytes @ 0x56
  1445  000057                     	ds	1
  1446  000058                     LoRaTXData@data:
  1447                           	callstack 0
  1448                           
  1449                           ; 1 bytes @ 0x57
  1450  000058                     	ds	1
  1451  000059                     LoRaTXData@dataLength:
  1452                           	callstack 0
  1453                           
  1454                           ; 1 bytes @ 0x58
  1455  000059                     	ds	1
  1456  00005A                     LoRaTXData@i:
  1457                           	callstack 0
  1458                           
  1459                           ; 1 bytes @ 0x59
  1460  00005A                     	ds	1
  1461  00005B                     LoRaStart@syncWord:
  1462                           	callstack 0
  1463                           
  1464                           ; 1 bytes @ 0x5A
  1465  00005B                     	ds	1
  1466  00005C                     ??_LoRaStart:
  1467                           
  1468                           ; 1 bytes @ 0x5B
  1469  00005C                     	ds	1
  1470  00005D                     ??_transmitData:
  1471                           
  1472                           ; 1 bytes @ 0x5C
  1473  00005D                     	ds	1
  1474                           
  1475 ;;
  1476 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1477 ;;
  1478 ;; *************** function _main *****************
  1479 ;; Defined at:
  1480 ;;		line 70 in file "main.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;		None
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;		None
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      void 
  1487 ;; Registers used:
  1488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1496 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1498 ;;Total ram usage:        2 bytes
  1499 ;; Hardware stack levels required when called:    7
  1500 ;; This function calls:
  1501 ;;		_configureIO
  1502 ;;		_disablePeripherals
  1503 ;;		_printf
  1504 ;;		_readBattery
  1505 ;;		_readTemperature
  1506 ;;		_setupAtoD
  1507 ;;		_transmitData
  1508 ;; This function is called by:
  1509 ;;		Startup code after reset
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text0
  1514  001CC8                     __ptext0:
  1515                           	callstack 0
  1516  001CC8                     _main:
  1517                           	callstack 24
  1518                           
  1519                           ;main.c: 71: INTCON2bits.INTEDG1=0;
  1520                           
  1521                           ;incstack = 0
  1522  001CC8  9AF1               	bcf	241,5,c	;volatile
  1523  001CCA                     l4613:
  1524                           
  1525                           ;main.c: 73: configureIO();
  1526  001CCA  ECD9  F013         	call	_configureIO	;wreg free
  1527                           
  1528                           ;main.c: 74: setupAtoD();
  1529  001CCE  EC66  F013         	call	_setupAtoD	;wreg free
  1530                           
  1531                           ; BSR set to: 15
  1532                           ;main.c: 75: _delay((unsigned long)((5)*(64000000/4000.0)));
  1533  001CD2  0E68               	movlw	104
  1534  001CD4  0100               	movlb	0	; () banked
  1535  001CD6  6FBD               	movwf	??_main& (0+255),b
  1536  001CD8  0EE4               	movlw	228
  1537  001CDA                     u4057:
  1538  001CDA  2EE8               	decfsz	wreg,f,c
  1539  001CDC  D7FE               	bra	u4057
  1540  001CDE  2FBD               	decfsz	??_main& (0+255),f,b
  1541  001CE0  D7FC               	bra	u4057
  1542  001CE2  F000               	nop	
  1543                           
  1544                           ;main.c: 78: };main.c: 79: batt = readBattery();
  1545                           
  1546                           ;main.c: 76: if(0){
  1547  001CE4  ECC4  F013         	call	_readBattery	;wreg free
  1548  001CE8  C001  F06A         	movff	?_readBattery,_batt
  1549  001CEC  C002  F06B         	movff	?_readBattery+1,_batt+1
  1550                           
  1551                           ;main.c: 80: temp = readTemperature();
  1552  001CF0  EC98  F013         	call	_readTemperature	;wreg free
  1553  001CF4  C001  F068         	movff	?_readTemperature,_temp
  1554  001CF8  C002  F069         	movff	?_readTemperature+1,_temp+1
  1555                           
  1556                           ;main.c: 84: };main.c: 85: if(batt>2000/4){
  1557                           
  1558                           ;main.c: 81: if(0){
  1559  001CFC  0EF5               	movlw	245
  1560  001CFE  0100               	movlb	0	; () banked
  1561  001D00  5D6A               	subwf	_batt& (0+255),w,b
  1562  001D02  0E01               	movlw	1
  1563  001D04  596B               	subwfb	(_batt+1)& (0+255),w,b
  1564  001D06  A0D8               	btfss	status,0,c
  1565  001D08  D003               	goto	l120
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 86: transmitData();
  1569  001D0A  EC54  F00D         	call	_transmitData	;wreg free
  1570                           
  1571                           ;main.c: 87: }
  1572  001D0E  D054               	goto	l4645
  1573  001D10                     l120:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 88: else{;main.c: 90: LATEbits.LATE2=1;
  1577  001D10  848D               	bsf	141,2,c	;volatile
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;main.c: 91: _delay((unsigned long)((300)*(64000000/4000.0)));
  1581  001D12  0E19               	movlw	25
  1582  001D14  0100               	movlb	0	; () banked
  1583  001D16  6FBE               	movwf	(??_main+1)& (0+255),b
  1584  001D18  0E5A               	movlw	90
  1585  001D1A  6FBD               	movwf	??_main& (0+255),b
  1586  001D1C  0EB1               	movlw	177
  1587  001D1E                     u4067:
  1588  001D1E  2EE8               	decfsz	wreg,f,c
  1589  001D20  D7FE               	bra	u4067
  1590  001D22  2FBD               	decfsz	??_main& (0+255),f,b
  1591  001D24  D7FC               	bra	u4067
  1592  001D26  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1593  001D28  D7FA               	bra	u4067
  1594  001D2A  D000               	nop2	
  1595                           
  1596                           ;main.c: 92: LATEbits.LATE2=0;
  1597  001D2C  948D               	bcf	141,2,c	;volatile
  1598                           
  1599                           ;main.c: 93: _delay((unsigned long)((300)*(64000000/4000.0)));
  1600  001D2E  0E19               	movlw	25
  1601  001D30  0100               	movlb	0	; () banked
  1602  001D32  6FBE               	movwf	(??_main+1)& (0+255),b
  1603  001D34  0E5A               	movlw	90
  1604  001D36  6FBD               	movwf	??_main& (0+255),b
  1605  001D38  0EB1               	movlw	177
  1606  001D3A                     u4077:
  1607  001D3A  2EE8               	decfsz	wreg,f,c
  1608  001D3C  D7FE               	bra	u4077
  1609  001D3E  2FBD               	decfsz	??_main& (0+255),f,b
  1610  001D40  D7FC               	bra	u4077
  1611  001D42  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1612  001D44  D7FA               	bra	u4077
  1613  001D46  D000               	nop2	
  1614                           
  1615                           ;main.c: 94: LATEbits.LATE2=1;
  1616  001D48  848D               	bsf	141,2,c	;volatile
  1617                           
  1618                           ;main.c: 95: _delay((unsigned long)((300)*(64000000/4000.0)));
  1619  001D4A  0E19               	movlw	25
  1620  001D4C  0100               	movlb	0	; () banked
  1621  001D4E  6FBE               	movwf	(??_main+1)& (0+255),b
  1622  001D50  0E5A               	movlw	90
  1623  001D52  6FBD               	movwf	??_main& (0+255),b
  1624  001D54  0EB1               	movlw	177
  1625  001D56                     u4087:
  1626  001D56  2EE8               	decfsz	wreg,f,c
  1627  001D58  D7FE               	bra	u4087
  1628  001D5A  2FBD               	decfsz	??_main& (0+255),f,b
  1629  001D5C  D7FC               	bra	u4087
  1630  001D5E  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1631  001D60  D7FA               	bra	u4087
  1632  001D62  D000               	nop2	
  1633                           
  1634                           ;main.c: 96: LATEbits.LATE2=0;
  1635  001D64  948D               	bcf	141,2,c	;volatile
  1636                           
  1637                           ;main.c: 97: _delay((unsigned long)((300)*(64000000/4000.0)));
  1638  001D66  0E19               	movlw	25
  1639  001D68  0100               	movlb	0	; () banked
  1640  001D6A  6FBE               	movwf	(??_main+1)& (0+255),b
  1641  001D6C  0E5A               	movlw	90
  1642  001D6E  6FBD               	movwf	??_main& (0+255),b
  1643  001D70  0EB1               	movlw	177
  1644  001D72                     u4097:
  1645  001D72  2EE8               	decfsz	wreg,f,c
  1646  001D74  D7FE               	bra	u4097
  1647  001D76  2FBD               	decfsz	??_main& (0+255),f,b
  1648  001D78  D7FC               	bra	u4097
  1649  001D7A  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1650  001D7C  D7FA               	bra	u4097
  1651  001D7E  D000               	nop2	
  1652                           
  1653                           ;main.c: 98: LATEbits.LATE2=1;
  1654  001D80  848D               	bsf	141,2,c	;volatile
  1655                           
  1656                           ;main.c: 99: _delay((unsigned long)((300)*(64000000/4000.0)));
  1657  001D82  0E19               	movlw	25
  1658  001D84  0100               	movlb	0	; () banked
  1659  001D86  6FBE               	movwf	(??_main+1)& (0+255),b
  1660  001D88  0E5A               	movlw	90
  1661  001D8A  6FBD               	movwf	??_main& (0+255),b
  1662  001D8C  0EB1               	movlw	177
  1663  001D8E                     u4107:
  1664  001D8E  2EE8               	decfsz	wreg,f,c
  1665  001D90  D7FE               	bra	u4107
  1666  001D92  2FBD               	decfsz	??_main& (0+255),f,b
  1667  001D94  D7FC               	bra	u4107
  1668  001D96  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1669  001D98  D7FA               	bra	u4107
  1670  001D9A  D000               	nop2	
  1671                           
  1672                           ;main.c: 100: LATEbits.LATE2=0;
  1673  001D9C  948D               	bcf	141,2,c	;volatile
  1674                           
  1675                           ;main.c: 101: _delay((unsigned long)((300)*(64000000/4000.0)));
  1676  001D9E  0E19               	movlw	25
  1677  001DA0  0100               	movlb	0	; () banked
  1678  001DA2  6FBE               	movwf	(??_main+1)& (0+255),b
  1679  001DA4  0E5A               	movlw	90
  1680  001DA6  6FBD               	movwf	??_main& (0+255),b
  1681  001DA8  0EB1               	movlw	177
  1682  001DAA                     u4117:
  1683  001DAA  2EE8               	decfsz	wreg,f,c
  1684  001DAC  D7FE               	bra	u4117
  1685  001DAE  2FBD               	decfsz	??_main& (0+255),f,b
  1686  001DB0  D7FC               	bra	u4117
  1687  001DB2  2FBE               	decfsz	(??_main+1)& (0+255),f,b
  1688  001DB4  D7FA               	bra	u4117
  1689  001DB6  D000               	nop2	
  1690  001DB8                     l4645:
  1691                           
  1692                           ;main.c: 106: };main.c: 107: disablePeripherals();
  1693  001DB8  ECC3  F012         	call	_disablePeripherals	;wreg free
  1694                           
  1695                           ; BSR set to: 15
  1696                           
  1697                           ;main.c: 108: if(0){
  1698  001DBC  0003               	sleep		;# 
  1699                           
  1700                           ;main.c: 113: goto start;
  1701  001DBE  D785               	goto	l4613
  1702  001DC0                     __end_of_main:
  1703                           	callstack 0
  1704                           
  1705 ;; *************** function _transmitData *****************
  1706 ;; Defined at:
  1707 ;;		line 171 in file "main.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  flags           1   25[BANK0 ] unsigned char 
  1712 ;;  i               1   28[BANK0 ] unsigned char 
  1713 ;;  i               1   30[BANK0 ] unsigned char 
  1714 ;;  calcCRC         2   26[BANK0 ] unsigned short 
  1715 ;;  j               1   29[BANK0 ] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 3F/0
  1722 ;;		On exit  : 3F/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;Total ram usage:        7 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    6
  1732 ;; This function calls:
  1733 ;;		_CRC16
  1734 ;;		_LoRaClearIRQFlags
  1735 ;;		_LoRaGetFrequency
  1736 ;;		_LoRaGetIRQFlags
  1737 ;;		_LoRaSleepMode
  1738 ;;		_LoRaStart
  1739 ;;		_LoRaTXData
  1740 ;;		_printf
  1741 ;; This function is called by:
  1742 ;;		_main
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text1
  1747  001AA8                     __ptext1:
  1748                           	callstack 0
  1749  001AA8                     _transmitData:
  1750                           	callstack 24
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 174: };main.c: 176: txData[0] = 50;
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 172: if(0){
  1757                           
  1758                           ;incstack = 0
  1759  001AA8  0E32               	movlw	50
  1760  001AAA  6F6C               	movwf	_txData& (0+255),b
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;main.c: 177: txData[1] = 0x00;
  1764  001AAC  0E00               	movlw	0
  1765  001AAE  6F6D               	movwf	(_txData+1)& (0+255),b
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 178: txData[2] = 0x01;
  1769  001AB0  0E01               	movlw	1
  1770  001AB2  6F6E               	movwf	(_txData+2)& (0+255),b
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 179: for(uint8_t i=0;i<8;i++){
  1774  001AB4  0E00               	movlw	0
  1775  001AB6  6FBC               	movwf	transmitData@i& (0+255),b
  1776  001AB8                     l4485:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 180: txData[i+3] = address[i];
  1780  001AB8  51BC               	movf	transmitData@i& (0+255),w,b
  1781  001ABA  0FBF               	addlw	low _address
  1782  001ABC  6ED9               	movwf	fsr2l,c
  1783  001ABE  6ADA               	clrf	fsr2h,c
  1784  001AC0  51BC               	movf	transmitData@i& (0+255),w,b
  1785  001AC2  0F6F               	addlw	low (_txData+3)
  1786  001AC4  6EE1               	movwf	fsr1l,c
  1787  001AC6  6AE2               	clrf	fsr1h,c
  1788  001AC8  CFDF FFE7          	movff	indf2,indf1
  1789                           
  1790                           ; BSR set to: 0
  1791  001ACC  2BBC               	incf	transmitData@i& (0+255),f,b
  1792                           
  1793                           ; BSR set to: 0
  1794  001ACE  0E07               	movlw	7
  1795  001AD0  65BC               	cpfsgt	transmitData@i& (0+255),b
  1796  001AD2  D7F2               	goto	l4485
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 181: };main.c: 182: txData[11] = 0x08;
  1800  001AD4  0E08               	movlw	8
  1801  001AD6  6F77               	movwf	(_txData+11)& (0+255),b
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;main.c: 185: txData[12]=(uint8_t)((messageCount>>24)&0xFF);
  1805  001AD8  C063  F078         	movff	_messageCount+3,_txData+12
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 186: txData[13]=(uint8_t)((messageCount>>16)&0xFF);
  1809  001ADC  C062  F079         	movff	_messageCount+2,_txData+13
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;main.c: 187: txData[14]=(uint8_t)((messageCount>>8)&0xFF);
  1813  001AE0  C061  F07A         	movff	_messageCount+1,_txData+14
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 188: txData[15]=(uint8_t)((messageCount & 0xFF));
  1817  001AE4  C060  F07B         	movff	_messageCount,_txData+15
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;main.c: 191: txData[16]=(uint8_t)((batt>>8)&0xFF);
  1821  001AE8  C06B  F07C         	movff	_batt+1,_txData+16
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 192: txData[17]=(uint8_t)(batt & 0xFF);
  1825  001AEC  C06A  F07D         	movff	_batt,_txData+17
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 195: txData[18]=(uint8_t)((temp>>8)&0xFF);
  1829  001AF0  C069  F07E         	movff	_temp+1,_txData+18
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 196: txData[19]=(uint8_t)(temp & 0xFF);
  1833  001AF4  C068  F07F         	movff	_temp,_txData+19
  1834                           
  1835                           ;main.c: 199: txData[20] = 0;
  1836  001AF8  0E00               	movlw	0
  1837  001AFA  6F80               	movwf	(_txData+20)& (0+255),b
  1838                           
  1839                           ;main.c: 200: txData[21] = 0;
  1840  001AFC  0E00               	movlw	0
  1841  001AFE  6F81               	movwf	(_txData+21)& (0+255),b
  1842                           
  1843                           ;main.c: 203: txData[22] = 0;
  1844  001B00  0E00               	movlw	0
  1845  001B02  6F82               	movwf	(_txData+22)& (0+255),b
  1846                           
  1847                           ;main.c: 204: txData[23] = 0;
  1848  001B04  0E00               	movlw	0
  1849  001B06  6F83               	movwf	(_txData+23)& (0+255),b
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;main.c: 208: txData[24]=(uint8_t)((tips>>24)&0xFF);
  1853  001B08  C067  F084         	movff	_tips+3,_txData+24	;volatile
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;main.c: 209: txData[25]=(uint8_t)((tips>>16)&0xFF);
  1857  001B0C  C066  F085         	movff	_tips+2,_txData+25	;volatile
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;main.c: 210: txData[26]=(uint8_t)((tips>>8)&0xFF);
  1861  001B10  C065  F086         	movff	_tips+1,_txData+26	;volatile
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 211: txData[27]=(uint8_t)((tips & 0xFF));
  1865  001B14  C064  F087         	movff	_tips,_txData+27	;volatile
  1866                           
  1867                           ;main.c: 214: for(uint8_t i=28;i<48;i++){
  1868  001B18  0E1C               	movlw	28
  1869  001B1A  6FBA               	movwf	transmitData@i_881& (0+255),b
  1870  001B1C                     l4521:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 215: txData[i] = 0;
  1874  001B1C  51BA               	movf	transmitData@i_881& (0+255),w,b
  1875  001B1E  0F6C               	addlw	low _txData
  1876  001B20  6ED9               	movwf	fsr2l,c
  1877  001B22  6ADA               	clrf	fsr2h,c
  1878  001B24  0E00               	movlw	0
  1879  001B26  6EDF               	movwf	indf2,c
  1880                           
  1881                           ; BSR set to: 0
  1882  001B28  2BBA               	incf	transmitData@i_881& (0+255),f,b
  1883                           
  1884                           ; BSR set to: 0
  1885  001B2A  0E2F               	movlw	47
  1886  001B2C  65BA               	cpfsgt	transmitData@i_881& (0+255),b
  1887  001B2E  D7F6               	goto	l4521
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;main.c: 216: };main.c: 219: unsigned short int calcCRC = CRC16(txData, 50-2);
  1891  001B30  0E6C               	movlw	low _txData
  1892  001B32  6E01               	movwf	CRC16@nData^0,c
  1893  001B34  0E00               	movlw	0
  1894  001B36  6E03               	movwf	(CRC16@wLength+1)^0,c
  1895  001B38  0E30               	movlw	48
  1896  001B3A  6E02               	movwf	CRC16@wLength^0,c
  1897  001B3C  EC6C  F012         	call	_CRC16	;wreg free
  1898  001B40  C001  F0B8         	movff	?_CRC16,transmitData@calcCRC
  1899  001B44  C002  F0B9         	movff	?_CRC16+1,transmitData@calcCRC+1
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;main.c: 220: txData[49] = (calcCRC&0xFF00u)>>8u;
  1903  001B48  C0B9  F09D         	movff	transmitData@calcCRC+1,_txData+49
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;main.c: 221: txData[48] = (calcCRC&0xFF);
  1907  001B4C  C0B8  F09C         	movff	transmitData@calcCRC,_txData+48
  1908                           
  1909                           ;main.c: 225: LoRaStart(866.5, 0x55);
  1910  001B50  0E00               	movlw	0
  1911  001B52  6E57               	movwf	LoRaStart@freq^0,c
  1912  001B54  0EA0               	movlw	160
  1913  001B56  6E58               	movwf	(LoRaStart@freq+1)^0,c
  1914  001B58  0E58               	movlw	88
  1915  001B5A  6E59               	movwf	(LoRaStart@freq+2)^0,c
  1916  001B5C  0E44               	movlw	68
  1917  001B5E  6E5A               	movwf	(LoRaStart@freq+3)^0,c
  1918  001B60  0E55               	movlw	85
  1919  001B62  6E5B               	movwf	LoRaStart@syncWord^0,c
  1920  001B64  EC85  F010         	call	_LoRaStart	;wreg free
  1921                           
  1922                           ;main.c: 228: };main.c: 229: LoRaClearIRQFlags();
  1923                           
  1924                           ;main.c: 226: if(0){
  1925  001B68  EC5C  F014         	call	_LoRaClearIRQFlags	;wreg free
  1926                           
  1927                           ;main.c: 230: LATEbits.LATE2=1;
  1928  001B6C  848D               	bsf	141,2,c	;volatile
  1929                           
  1930                           ;main.c: 231: LoRaTXData(txData, 50);
  1931  001B6E  0E6C               	movlw	low _txData
  1932  001B70  6E58               	movwf	LoRaTXData@data^0,c
  1933  001B72  0E32               	movlw	50
  1934  001B74  6E59               	movwf	LoRaTXData@dataLength^0,c
  1935  001B76  EC98  F012         	call	_LoRaTXData	;wreg free
  1936                           
  1937                           ;main.c: 236: for(j=0;j<50;j++){
  1938                           
  1939                           ;main.c: 232: if(0){
  1940  001B7A  0E00               	movlw	0
  1941  001B7C  0100               	movlb	0	; () banked
  1942  001B7E  6FBB               	movwf	transmitData@j& (0+255),b
  1943  001B80                     l4551:
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;main.c: 237: uint8_t flags = LoRaGetIRQFlags();
  1947  001B80  EC56  F014         	call	_LoRaGetIRQFlags	;wreg free
  1948  001B84  0100               	movlb	0	; () banked
  1949  001B86  6FB7               	movwf	transmitData@flags& (0+255),b
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;main.c: 239: if(flags>0){
  1953  001B88  51B7               	movf	transmitData@flags& (0+255),w,b
  1954  001B8A  A4D8               	btfss	status,2,c
  1955  001B8C  D00C               	goto	u4020
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;main.c: 241: };main.c: 242: _delay((unsigned long)((10)*(64000000/4000.0)));
  1959  001B8E  0ED0               	movlw	208
  1960  001B90  6E5D               	movwf	??_transmitData^0,c
  1961  001B92  0ECA               	movlw	202
  1962  001B94                     u4127:
  1963  001B94  2EE8               	decfsz	wreg,f,c
  1964  001B96  D7FE               	bra	u4127
  1965  001B98  2E5D               	decfsz	??_transmitData^0,f,c
  1966  001B9A  D7FC               	bra	u4127
  1967  001B9C  0100               	movlb	0	; () banked
  1968  001B9E  2BBB               	incf	transmitData@j& (0+255),f,b
  1969  001BA0  0E31               	movlw	49
  1970  001BA2  65BB               	cpfsgt	transmitData@j& (0+255),b
  1971  001BA4  D7ED               	goto	l4551
  1972  001BA6                     u4020:
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;main.c: 250: };main.c: 251: };main.c: 252: LoRaSleepMode();
  1976  001BA6  EC3D  F014         	call	_LoRaSleepMode	;wreg free
  1977                           
  1978                           ;main.c: 253: _delay((unsigned long)((10)*(64000000/4000.0)));
  1979  001BAA  0ED0               	movlw	208
  1980  001BAC  6E5D               	movwf	??_transmitData^0,c
  1981  001BAE  0ECA               	movlw	202
  1982  001BB0                     u4137:
  1983  001BB0  2EE8               	decfsz	wreg,f,c
  1984  001BB2  D7FE               	bra	u4137
  1985  001BB4  2E5D               	decfsz	??_transmitData^0,f,c
  1986  001BB6  D7FC               	bra	u4137
  1987                           
  1988                           ;main.c: 254: messageCount++;
  1989  001BB8  0E01               	movlw	1
  1990  001BBA  0100               	movlb	0	; () banked
  1991  001BBC  2760               	addwf	_messageCount& (0+255),f,b
  1992  001BBE  0E00               	movlw	0
  1993  001BC0  2361               	addwfc	(_messageCount+1)& (0+255),f,b
  1994  001BC2  2362               	addwfc	(_messageCount+2)& (0+255),f,b
  1995  001BC4  2363               	addwfc	(_messageCount+3)& (0+255),f,b
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 255: LATEbits.LATE2=0;
  1999  001BC6  948D               	bcf	141,2,c	;volatile
  2000                           
  2001                           ; BSR set to: 0
  2002  001BC8  0012               	return		;funcret
  2003  001BCA                     __end_of_transmitData:
  2004                           	callstack 0
  2005                           
  2006 ;; *************** function _LoRaTXData *****************
  2007 ;; Defined at:
  2008 ;;		line 154 in file "LoRa.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  data            1   87[COMRAM] PTR unsigned char 
  2011 ;;		 -> txData(50), 
  2012 ;;  dataLength      1   88[COMRAM] unsigned char 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  i               1   89[COMRAM] unsigned char 
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  1    wreg      void 
  2017 ;; Registers used:
  2018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2024 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;Total ram usage:        3 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; Hardware stack levels required when called:    5
  2031 ;; This function calls:
  2032 ;;		_LoRaStandbyMode
  2033 ;;		_LoRaTXMode
  2034 ;;		_SPI2WriteByte
  2035 ;;		_printf
  2036 ;; This function is called by:
  2037 ;;		_transmitData
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text2
  2042  002530                     __ptext2:
  2043                           	callstack 0
  2044  002530                     _LoRaTXData:
  2045                           	callstack 24
  2046                           
  2047                           ;LoRa.c: 156: LoRaStandbyMode();
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;incstack = 0
  2051  002530  EC26  F014         	call	_LoRaStandbyMode	;wreg free
  2052                           
  2053                           ;LoRa.c: 157: printf("Transmitting.\r\n");
  2054  002534  0E71               	movlw	low STR_16
  2055  002536  6E4F               	movwf	printf@f^0,c
  2056  002538  0EFF               	movlw	high STR_16
  2057  00253A  6E50               	movwf	(printf@f+1)^0,c
  2058  00253C  EC14  F000         	call	_printf	;wreg free
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;LoRa.c: 158: SPI2WriteByte(0x0D, 0);
  2062  002540  0E00               	movlw	0
  2063  002542  6E01               	movwf	SPI2WriteByte@data^0,c
  2064  002544  0E0D               	movlw	13
  2065  002546  EC0D  F013         	call	_SPI2WriteByte
  2066                           
  2067                           ;LoRa.c: 159: SPI2WriteByte(0x22, 0);
  2068  00254A  0E00               	movlw	0
  2069  00254C  6E01               	movwf	SPI2WriteByte@data^0,c
  2070  00254E  0E22               	movlw	34
  2071  002550  EC0D  F013         	call	_SPI2WriteByte
  2072                           
  2073                           ;LoRa.c: 162: for(uint8_t i=0;i<dataLength;i++){
  2074  002554  0E00               	movlw	0
  2075  002556  6E5A               	movwf	LoRaTXData@i^0,c
  2076  002558  D00A               	goto	l4417
  2077  00255A                     l4413:
  2078                           
  2079                           ;LoRa.c: 163: SPI2WriteByte(0x00, data[i]);
  2080  00255A  5058               	movf	LoRaTXData@data^0,w,c
  2081  00255C  245A               	addwf	LoRaTXData@i^0,w,c
  2082  00255E  6ED9               	movwf	fsr2l,c
  2083  002560  6ADA               	clrf	fsr2h,c
  2084  002562  50DF               	movf	indf2,w,c
  2085  002564  6E01               	movwf	SPI2WriteByte@data^0,c
  2086  002566  0E00               	movlw	0
  2087  002568  EC0D  F013         	call	_SPI2WriteByte
  2088  00256C  2A5A               	incf	LoRaTXData@i^0,f,c
  2089  00256E                     l4417:
  2090  00256E  5059               	movf	LoRaTXData@dataLength^0,w,c
  2091  002570  5C5A               	subwf	LoRaTXData@i^0,w,c
  2092  002572  A0D8               	btfss	status,0,c
  2093  002574  D7F2               	goto	l4413
  2094                           
  2095                           ;LoRa.c: 164: };LoRa.c: 165: SPI2WriteByte(0x22, dataLength);
  2096  002576  C059  F001         	movff	LoRaTXData@dataLength,SPI2WriteByte@data
  2097  00257A  0E22               	movlw	34
  2098  00257C  EC0D  F013         	call	_SPI2WriteByte
  2099                           
  2100                           ;LoRa.c: 166: LoRaTXMode();
  2101  002580  ECEE  F013         	call	_LoRaTXMode	;wreg free
  2102  002584  0012               	return		;funcret
  2103  002586                     __end_of_LoRaTXData:
  2104                           	callstack 0
  2105                           
  2106 ;; *************** function _LoRaTXMode *****************
  2107 ;; Defined at:
  2108 ;;		line 203 in file "LoRa.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  regValue        1   86[COMRAM] unsigned char 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;Total ram usage:        1 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    4
  2129 ;; This function calls:
  2130 ;;		_printf
  2131 ;;		_readOpModeRegister
  2132 ;;		_writeOpModeRegister
  2133 ;; This function is called by:
  2134 ;;		_LoRaTXData
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text3
  2139  0027DC                     __ptext3:
  2140                           	callstack 0
  2141  0027DC                     _LoRaTXMode:
  2142                           	callstack 24
  2143                           
  2144                           ;LoRa.c: 204: printf("TX Mode\r\n");
  2145                           
  2146                           ;incstack = 0
  2147  0027DC  0EC5               	movlw	low STR_17
  2148  0027DE  6E4F               	movwf	printf@f^0,c
  2149  0027E0  0EFF               	movlw	high STR_17
  2150  0027E2  6E50               	movwf	(printf@f+1)^0,c
  2151  0027E4  EC14  F000         	call	_printf	;wreg free
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;LoRa.c: 205: uint8_t regValue = readOpModeRegister();
  2155  0027E8  EC66  F014         	call	_readOpModeRegister	;wreg free
  2156  0027EC  6E57               	movwf	LoRaTXMode@regValue^0,c
  2157                           
  2158                           ;LoRa.c: 206: regValue = regValue & 0b11111000;
  2159  0027EE  5057               	movf	LoRaTXMode@regValue^0,w,c
  2160  0027F0  0BF8               	andlw	248
  2161  0027F2  6E57               	movwf	LoRaTXMode@regValue^0,c
  2162                           
  2163                           ;LoRa.c: 207: regValue = regValue | 0b00000011;
  2164  0027F4  5057               	movf	LoRaTXMode@regValue^0,w,c
  2165  0027F6  0903               	iorlw	3
  2166  0027F8  6E57               	movwf	LoRaTXMode@regValue^0,c
  2167                           
  2168                           ;LoRa.c: 208: writeOpModeRegister(regValue);
  2169  0027FA  5057               	movf	LoRaTXMode@regValue^0,w,c
  2170  0027FC  EC4F  F014         	call	_writeOpModeRegister
  2171  002800  0012               	return		;funcret
  2172  002802                     __end_of_LoRaTXMode:
  2173                           	callstack 0
  2174                           
  2175 ;; *************** function _LoRaStart *****************
  2176 ;; Defined at:
  2177 ;;		line 12 in file "LoRa.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  freq            4   86[COMRAM] float 
  2180 ;;  syncWord        1   90[COMRAM] unsigned char 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;		None
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      void 
  2185 ;; Registers used:
  2186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 3F/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2192 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;Total ram usage:        6 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; Hardware stack levels required when called:    5
  2199 ;; This function calls:
  2200 ;;		_LoRaOptimalLoad
  2201 ;;		_LoRaSetFrequency
  2202 ;;		_printf
  2203 ;;		_setLoRaMode
  2204 ;; This function is called by:
  2205 ;;		_transmitData
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text4
  2210  00210A                     __ptext4:
  2211                           	callstack 0
  2212  00210A                     _LoRaStart:
  2213                           	callstack 24
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;LoRa.c: 13: printf("LoRa Start\r\n");
  2217                           
  2218                           ;incstack = 0
  2219  00210A  0EA1               	movlw	low STR_12
  2220  00210C  6E4F               	movwf	printf@f^0,c
  2221  00210E  0EFF               	movlw	high STR_12
  2222  002110  6E50               	movwf	(printf@f+1)^0,c
  2223  002112  EC14  F000         	call	_printf	;wreg free
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;LoRa.c: 15: ANSELAbits.ANSA2=0;
  2227  002116  010F               	movlb	15	; () banked
  2228  002118  9538               	bcf	56,2,b	;volatile
  2229                           
  2230                           ; BSR set to: 15
  2231                           ;LoRa.c: 19: TRISDbits.RD1=1;
  2232  00211A  8295               	bsf	149,1,c	;volatile
  2233                           
  2234                           ; BSR set to: 15
  2235                           ;LoRa.c: 20: TRISDbits.RD4=0;
  2236  00211C  9895               	bcf	149,4,c	;volatile
  2237                           
  2238                           ; BSR set to: 15
  2239                           ;LoRa.c: 21: TRISDbits.RD0=0;
  2240  00211E  9095               	bcf	149,0,c	;volatile
  2241                           
  2242                           ; BSR set to: 15
  2243                           ;LoRa.c: 22: TRISDbits.RD3=0;
  2244  002120  9695               	bcf	149,3,c	;volatile
  2245                           
  2246                           ; BSR set to: 15
  2247                           ;LoRa.c: 23: ANSELDbits.ANSD1=0;
  2248  002122  933B               	bcf	59,1,b	;volatile
  2249                           
  2250                           ; BSR set to: 15
  2251                           ;LoRa.c: 24: ANSELDbits.ANSD4=0;
  2252  002124  993B               	bcf	59,4,b	;volatile
  2253                           
  2254                           ; BSR set to: 15
  2255                           ;LoRa.c: 25: ANSELDbits.ANSD3=0;
  2256  002126  973B               	bcf	59,3,b	;volatile
  2257                           
  2258                           ; BSR set to: 15
  2259                           ;LoRa.c: 26: ANSELDbits.ANSD0=0;
  2260  002128  913B               	bcf	59,0,b	;volatile
  2261                           
  2262                           ; BSR set to: 15
  2263                           ;LoRa.c: 27: LATDbits.LATD3=1;
  2264  00212A  868C               	bsf	140,3,c	;volatile
  2265                           
  2266                           ; BSR set to: 15
  2267                           ;LoRa.c: 29: PMD1bits.MSSP2MD=0;
  2268  00212C  9F3E               	bcf	62,7,b	;volatile
  2269                           
  2270                           ; BSR set to: 15
  2271                           ;LoRa.c: 30: PMD0bits.SPI2MD=0;
  2272  00212E  953F               	bcf	63,2,b	;volatile
  2273                           
  2274                           ; BSR set to: 15
  2275                           ;LoRa.c: 34: SSP2CON1bits.CKP=0;
  2276  002130  986C               	bcf	108,4,c	;volatile
  2277                           
  2278                           ; BSR set to: 15
  2279                           ;LoRa.c: 35: SSP2STATbits.CKE=1;
  2280  002132  8C6D               	bsf	109,6,c	;volatile
  2281                           
  2282                           ; BSR set to: 15
  2283                           ;LoRa.c: 38: SSP2STATbits.SMP=1;
  2284  002134  8E6D               	bsf	109,7,c	;volatile
  2285                           
  2286                           ; BSR set to: 15
  2287                           ;LoRa.c: 41: SSP2CON1bits.SSPM=0b0010;
  2288  002136  506C               	movf	108,w,c	;volatile
  2289  002138  0BF0               	andlw	-16
  2290  00213A  0902               	iorlw	2
  2291  00213C  6E6C               	movwf	108,c	;volatile
  2292                           
  2293                           ; BSR set to: 15
  2294                           ;LoRa.c: 47: if(1){
  2295  00213E  8A6C               	bsf	108,5,c	;volatile
  2296                           
  2297                           ; BSR set to: 15
  2298                           ;LoRa.c: 48: printf("Set LoRa Mode\r\n");
  2299  002140  0E81               	movlw	low STR_13
  2300  002142  6E4F               	movwf	printf@f^0,c
  2301  002144  0EFF               	movlw	high STR_13
  2302  002146  6E50               	movwf	(printf@f+1)^0,c
  2303  002148  EC14  F000         	call	_printf	;wreg free
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;LoRa.c: 49: };LoRa.c: 50: _delay((unsigned long)((10)*(64000000/4000.0)));
  2307  00214C  0ED0               	movlw	208
  2308  00214E  6E5C               	movwf	??_LoRaStart^0,c
  2309  002150  0ECA               	movlw	202
  2310  002152                     u4147:
  2311  002152  2EE8               	decfsz	wreg,f,c
  2312  002154  D7FE               	bra	u4147
  2313  002156  2E5C               	decfsz	??_LoRaStart^0,f,c
  2314  002158  D7FC               	bra	u4147
  2315                           
  2316                           ;LoRa.c: 51: setLoRaMode();
  2317  00215A  EC33  F014         	call	_setLoRaMode	;wreg free
  2318                           
  2319                           ;LoRa.c: 53: if(1){
  2320  00215E  0ED0               	movlw	208
  2321  002160  6E5C               	movwf	??_LoRaStart^0,c
  2322  002162  0ECA               	movlw	202
  2323  002164                     u4157:
  2324  002164  2EE8               	decfsz	wreg,f,c
  2325  002166  D7FE               	bra	u4157
  2326  002168  2E5C               	decfsz	??_LoRaStart^0,f,c
  2327  00216A  D7FC               	bra	u4157
  2328                           
  2329                           ;LoRa.c: 54: printf("LoRa load optimal register values\r\n");
  2330  00216C  0ECD               	movlw	low STR_14
  2331  00216E  6E4F               	movwf	printf@f^0,c
  2332  002170  0EFE               	movlw	high STR_14
  2333  002172  6E50               	movwf	(printf@f+1)^0,c
  2334  002174  EC14  F000         	call	_printf	;wreg free
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;LoRa.c: 57: if(1){
  2338  002178  505B               	movf	LoRaStart@syncWord^0,w,c
  2339  00217A  ECF1  F00B         	call	_LoRaOptimalLoad
  2340                           
  2341                           ;LoRa.c: 58: printf("LoRa set frequency\r\n");
  2342  00217E  0E13               	movlw	low STR_15
  2343  002180  6E4F               	movwf	printf@f^0,c
  2344  002182  0EFF               	movlw	high STR_15
  2345  002184  6E50               	movwf	(printf@f+1)^0,c
  2346  002186  EC14  F000         	call	_printf	;wreg free
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;LoRa.c: 59: };LoRa.c: 60: LoRaSetFrequency(freq);
  2350  00218A  C057  F03B         	movff	LoRaStart@freq,LoRaSetFrequency@freqMHz
  2351  00218E  C058  F03C         	movff	LoRaStart@freq+1,LoRaSetFrequency@freqMHz+1
  2352  002192  C059  F03D         	movff	LoRaStart@freq+2,LoRaSetFrequency@freqMHz+2
  2353  002196  C05A  F03E         	movff	LoRaStart@freq+3,LoRaSetFrequency@freqMHz+3
  2354  00219A  EC98  F011         	call	_LoRaSetFrequency	;wreg free
  2355  00219E  0012               	return		;funcret
  2356  0021A0                     __end_of_LoRaStart:
  2357                           	callstack 0
  2358                           
  2359 ;; *************** function _printf *****************
  2360 ;; Defined at:
  2361 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  f               2   78[COMRAM] PTR const unsigned char 
  2364 ;;		 -> STR_18(12), STR_17(10), STR_16(16), STR_15(21), 
  2365 ;;		 -> STR_14(36), STR_13(16), STR_12(13), STR_11(8), 
  2366 ;;		 -> STR_10(10), STR_9(34), STR_8(10), STR_7(18), 
  2367 ;;		 -> STR_6(11), STR_5(16), STR_4(20), STR_3(10), 
  2368 ;;		 -> STR_2(10), STR_1(18), 
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  idx             1    4[BANK0 ] unsigned char 
  2371 ;;  fval            4   20[BANK0 ] unsigned char 
  2372 ;;  val             4   16[BANK0 ] unsigned long 
  2373 ;;  tmpval          4   12[BANK0 ] struct .
  2374 ;;  cp              3    0        PTR const unsigned char 
  2375 ;;  eexp            2   10[BANK0 ] int 
  2376 ;;  flag            2    8[BANK0 ] unsigned short 
  2377 ;;  prec            2    6[BANK0 ] int 
  2378 ;;  len             2    0        unsigned int 
  2379 ;;  width           2    0        int 
  2380 ;;  c               1   24[BANK0 ] unsigned char 
  2381 ;;  ap              1    5[BANK0 ] PTR void [1]
  2382 ;;		 -> ?_printf(2), 
  2383 ;;  d               1    0        unsigned char 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  2   78[COMRAM] int 
  2386 ;; Registers used:
  2387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 3F/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2393 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Totals:         8      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;Total ram usage:       33 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    3
  2400 ;; This function calls:
  2401 ;;		___awdiv
  2402 ;;		___fladd
  2403 ;;		___fleq
  2404 ;;		___flge
  2405 ;;		___flmul
  2406 ;;		___flneg
  2407 ;;		___flsub
  2408 ;;		___fltol
  2409 ;;		___lldiv
  2410 ;;		___llmod
  2411 ;;		___wmul
  2412 ;;		___xxtofl
  2413 ;;		__div_to_l_
  2414 ;;		__tdiv_to_l_
  2415 ;;		_fround
  2416 ;;		_putch
  2417 ;;		_scale
  2418 ;; This function is called by:
  2419 ;;		_main
  2420 ;;		_transmitData
  2421 ;;		_LoRaStart
  2422 ;;		_LoRaTXData
  2423 ;;		_LoRaTXMode
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text5
  2428  000028                     __ptext5:
  2429                           	callstack 0
  2430  000028                     _printf:
  2431                           	callstack 26
  2432                           
  2433                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  2434                           
  2435                           ;incstack = 0
  2436  000028  0E51               	movlw	low (?_printf+2)
  2437  00002A  0100               	movlb	0	; () banked
  2438  00002C  6FA3               	movwf	printf@ap& (0+255),b
  2439                           
  2440                           ;doprnt.c: 553: while((c = *f++)) {
  2441  00002E  EF65  F004         	goto	u3670
  2442  000032                     l3823:
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;doprnt.c: 555: if(c != '%')
  2446  000032  0E25               	movlw	37
  2447  000034  19B6               	xorwf	printf@c& (0+255),w,b
  2448  000036  B4D8               	btfsc	status,2,c
  2449  000038  D005               	goto	l3827
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
  2453  00003A  51B6               	movf	printf@c& (0+255),w,b
  2454  00003C  EC47  F014         	call	_putch
  2455                           
  2456                           ;doprnt.c: 559: continue;
  2457  000040  EF65  F004         	goto	u3670
  2458  000044                     l3827:
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  2462  000044  0E00               	movlw	0
  2463  000046  6FA7               	movwf	(printf@flag+1)& (0+255),b
  2464  000048  0E00               	movlw	0
  2465  00004A  6FA6               	movwf	printf@flag& (0+255),b
  2466  00004C  D009               	goto	l3839
  2467  00004E                     l3829:
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;doprnt.c: 669: flag |= 0x10;
  2471  00004E  89A6               	bsf	printf@flag& (0+255),4,b
  2472                           
  2473                           ;doprnt.c: 670: goto loop;
  2474  000050  D007               	goto	l3839
  2475  000052                     l3831:
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;doprnt.c: 689: flag |= 0x400;
  2479  000052  85A7               	bsf	(printf@flag+1)& (0+255),2,b
  2480                           
  2481                           ;doprnt.c: 690: break;
  2482  000054  D029               	goto	l3841
  2483  000056                     l3833:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 744: case 'x':;doprnt.c: 747: flag |= 0x80;
  2487  000056  8FA6               	bsf	printf@flag& (0+255),7,b
  2488                           
  2489                           ;doprnt.c: 749: break;
  2490  000058  D027               	goto	l3841
  2491  00005A                     l3835:
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;doprnt.c: 844: flag |= 0xC0;
  2495  00005A  0EC0               	movlw	192
  2496  00005C  13A6               	iorwf	printf@flag& (0+255),f,b
  2497                           
  2498                           ;doprnt.c: 845: break;
  2499  00005E  D024               	goto	l3841
  2500  000060                     l3839:
  2501                           
  2502                           ; BSR set to: 0
  2503  000060  C04F  FFF6         	movff	printf@f,tblptrl
  2504  000064  C050  FFF7         	movff	printf@f+1,tblptrh
  2505  000068  4A4F               	infsnz	printf@f^0,f,c
  2506  00006A  2A50               	incf	(printf@f+1)^0,f,c
  2507  00006C                     	if	0	;tblptru may be non-zero
  2508  00006C                     	endif
  2509  00006C                     	if	0	;tblptru may be non-zero
  2510  00006C                     	endif
  2511  00006C  0008               	tblrd		*
  2512  00006E  CFF5 F0B6          	movff	tablat,printf@c
  2513  000072  51B6               	movf	printf@c& (0+255),w,b
  2514                           
  2515                           ; Switch size 1, requested type "simple"
  2516                           ; Number of cases is 8, Range of values is 0 to 120
  2517                           ; switch strategies available:
  2518                           ; Name         Instructions Cycles
  2519                           ; simple_byte           25    13 (average)
  2520                           ;	Chosen strategy is simple_byte
  2521  000074  0A00               	xorlw	0	; case 0
  2522  000076  B4D8               	btfsc	status,2,c
  2523  000078  0012               	return	
  2524  00007A  0A58               	xorlw	88	; case 88
  2525  00007C  B4D8               	btfsc	status,2,c
  2526  00007E  D7EB               	goto	l3833
  2527  000080  0A3C               	xorlw	60	; case 100
  2528  000082  B4D8               	btfsc	status,2,c
  2529  000084  D011               	goto	l3841
  2530  000086  0A02               	xorlw	2	; case 102
  2531  000088  B4D8               	btfsc	status,2,c
  2532  00008A  D7E3               	goto	l3831
  2533  00008C  0A0F               	xorlw	15	; case 105
  2534  00008E  B4D8               	btfsc	status,2,c
  2535  000090  D00B               	goto	l3841
  2536  000092  0A05               	xorlw	5	; case 108
  2537  000094  B4D8               	btfsc	status,2,c
  2538  000096  D7DB               	goto	l3829
  2539  000098  0A19               	xorlw	25	; case 117
  2540  00009A  B4D8               	btfsc	status,2,c
  2541  00009C  D7DE               	goto	l3835
  2542  00009E  0A0D               	xorlw	13	; case 120
  2543  0000A0  B4D8               	btfsc	status,2,c
  2544  0000A2  D7D9               	goto	l3833
  2545  0000A4  EF65  F004         	goto	u3670
  2546  0000A8                     l3841:
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;doprnt.c: 851: if(flag & (0x700)) {
  2550  0000A8  0E07               	movlw	7
  2551  0000AA  15A7               	andwf	(printf@flag+1)& (0+255),w,b
  2552  0000AC  B4D8               	btfsc	status,2,c
  2553  0000AE  D2E1               	goto	l3973
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;doprnt.c: 855: prec = 6;
  2557  0000B0  0E00               	movlw	0
  2558  0000B2  6FA5               	movwf	(printf@prec+1)& (0+255),b
  2559  0000B4  0E06               	movlw	6
  2560  0000B6  6FA4               	movwf	printf@prec& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2564  0000B8  51A3               	movf	printf@ap& (0+255),w,b
  2565  0000BA  6ED9               	movwf	fsr2l,c
  2566  0000BC  6ADA               	clrf	fsr2h,c
  2567  0000BE  CFDE F0B2          	movff	postinc2,printf@fval
  2568  0000C2  CFDE F0B3          	movff	postinc2,printf@fval+1
  2569  0000C6  CFDE F0B4          	movff	postinc2,printf@fval+2
  2570  0000CA  CFDE F0B5          	movff	postinc2,printf@fval+3
  2571                           
  2572                           ; BSR set to: 0
  2573  0000CE  0E04               	movlw	4
  2574  0000D0  27A3               	addwf	printf@ap& (0+255),f,b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;doprnt.c: 857: if(fval < 0.0) {
  2578  0000D2  AFB5               	btfss	(printf@fval+3)& (0+255),7,b
  2579  0000D4  D014               	goto	l3855
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;doprnt.c: 858: fval = -fval;
  2583  0000D6  C0B2  F001         	movff	printf@fval,___flneg@f1
  2584  0000DA  C0B3  F002         	movff	printf@fval+1,___flneg@f1+1
  2585  0000DE  C0B4  F003         	movff	printf@fval+2,___flneg@f1+2
  2586  0000E2  C0B5  F004         	movff	printf@fval+3,___flneg@f1+3
  2587  0000E6  EC81  F013         	call	___flneg	;wreg free
  2588  0000EA  C001  F0B2         	movff	?___flneg,printf@fval
  2589  0000EE  C002  F0B3         	movff	?___flneg+1,printf@fval+1
  2590  0000F2  C003  F0B4         	movff	?___flneg+2,printf@fval+2
  2591  0000F6  C004  F0B5         	movff	?___flneg+3,printf@fval+3
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;doprnt.c: 859: flag |= 0x03;
  2595  0000FA  0E03               	movlw	3
  2596  0000FC  13A6               	iorwf	printf@flag& (0+255),f,b
  2597  0000FE                     l3855:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  2601  0000FE  0E00               	movlw	0
  2602  000100  6FA9               	movwf	(printf@eexp+1)& (0+255),b
  2603  000102  0E00               	movlw	0
  2604  000104  6FA8               	movwf	printf@eexp& (0+255),b
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;doprnt.c: 862: if( fval!=0) {
  2608  000106  C0B2  F001         	movff	printf@fval,___fleq@ff1
  2609  00010A  C0B3  F002         	movff	printf@fval+1,___fleq@ff1+1
  2610  00010E  C0B4  F003         	movff	printf@fval+2,___fleq@ff1+2
  2611  000112  C0B5  F004         	movff	printf@fval+3,___fleq@ff1+3
  2612  000116  0E00               	movlw	0
  2613  000118  6E05               	movwf	___fleq@ff2^0,c
  2614  00011A  0E00               	movlw	0
  2615  00011C  6E06               	movwf	(___fleq@ff2+1)^0,c
  2616  00011E  0E00               	movlw	0
  2617  000120  6E07               	movwf	(___fleq@ff2+2)^0,c
  2618  000122  0E00               	movlw	0
  2619  000124  6E08               	movwf	(___fleq@ff2+3)^0,c
  2620  000126  ECD0  F010         	call	___fleq	;wreg free
  2621  00012A  B0D8               	btfsc	status,0,c
  2622  00012C  D082               	goto	l3883
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;doprnt.c: 863: (void)(*(&eexp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255)
      +                           - 126);
  2626  00012E  35B4               	rlcf	(printf@fval+2)& (0+255),w,b
  2627  000130  35B5               	rlcf	(printf@fval+3)& (0+255),w,b
  2628  000132  0F82               	addlw	130
  2629  000134  6FA8               	movwf	printf@eexp& (0+255),b
  2630  000136  6BA9               	clrf	(printf@eexp+1)& (0+255),b
  2631  000138  0EFF               	movlw	255
  2632  00013A  23A9               	addwfc	(printf@eexp+1)& (0+255),f,b
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;doprnt.c: 864: eexp--;
  2636  00013C  07A8               	decf	printf@eexp& (0+255),f,b
  2637  00013E  A0D8               	btfss	status,0,c
  2638  000140  07A9               	decf	(printf@eexp+1)& (0+255),f,b
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;doprnt.c: 865: eexp *= 3;
  2642  000142  C0A8  F001         	movff	printf@eexp,___wmul@multiplier
  2643  000146  C0A9  F002         	movff	printf@eexp+1,___wmul@multiplier+1
  2644  00014A  0E00               	movlw	0
  2645  00014C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2646  00014E  0E03               	movlw	3
  2647  000150  6E03               	movwf	___wmul@multiplicand^0,c
  2648  000152  EC01  F014         	call	___wmul	;wreg free
  2649  000156  C001  F0A8         	movff	?___wmul,printf@eexp
  2650  00015A  C002  F0A9         	movff	?___wmul+1,printf@eexp+1
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;doprnt.c: 866: eexp /= 10;
  2654  00015E  C0A8  F007         	movff	printf@eexp,___awdiv@dividend
  2655  000162  C0A9  F008         	movff	printf@eexp+1,___awdiv@dividend+1
  2656  000166  0E00               	movlw	0
  2657  000168  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2658  00016A  0E0A               	movlw	10
  2659  00016C  6E09               	movwf	___awdiv@divisor^0,c
  2660  00016E  EC15  F011         	call	___awdiv	;wreg free
  2661  000172  C007  F0A8         	movff	?___awdiv,printf@eexp
  2662  000176  C008  F0A9         	movff	?___awdiv+1,printf@eexp+1
  2663                           
  2664                           ;doprnt.c: 867: if(eexp < 0)
  2665  00017A  0100               	movlb	0	; () banked
  2666  00017C  AFA9               	btfss	(printf@eexp+1)& (0+255),7,b
  2667  00017E  D003               	goto	l3871
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;doprnt.c: 868: eexp--;
  2671  000180  07A8               	decf	printf@eexp& (0+255),f,b
  2672  000182  A0D8               	btfss	status,0,c
  2673  000184  07A9               	decf	(printf@eexp+1)& (0+255),f,b
  2674  000186                     l3871:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  2678  000186  51A8               	movf	printf@eexp& (0+255),w,b
  2679  000188  0800               	sublw	0
  2680  00018A  EC74  F004         	call	_scale
  2681  00018E  C028  F0AA         	movff	?_scale,printf@tmpval
  2682  000192  C029  F0AB         	movff	?_scale+1,printf@tmpval+1
  2683  000196  C02A  F0AC         	movff	?_scale+2,printf@tmpval+2
  2684  00019A  C02B  F0AD         	movff	?_scale+3,printf@tmpval+3
  2685                           
  2686                           ;doprnt.c: 873: tmpval.integ *= fval;
  2687  00019E  C0AA  F00F         	movff	printf@tmpval,___flmul@b
  2688  0001A2  C0AB  F010         	movff	printf@tmpval+1,___flmul@b+1
  2689  0001A6  C0AC  F011         	movff	printf@tmpval+2,___flmul@b+2
  2690  0001AA  C0AD  F012         	movff	printf@tmpval+3,___flmul@b+3
  2691  0001AE  C0B2  F013         	movff	printf@fval,___flmul@a
  2692  0001B2  C0B3  F014         	movff	printf@fval+1,___flmul@a+1
  2693  0001B6  C0B4  F015         	movff	printf@fval+2,___flmul@a+2
  2694  0001BA  C0B5  F016         	movff	printf@fval+3,___flmul@a+3
  2695  0001BE  EC5C  F006         	call	___flmul	;wreg free
  2696  0001C2  C00F  F0AA         	movff	?___flmul,printf@tmpval
  2697  0001C6  C010  F0AB         	movff	?___flmul+1,printf@tmpval+1
  2698  0001CA  C011  F0AC         	movff	?___flmul+2,printf@tmpval+2
  2699  0001CE  C012  F0AD         	movff	?___flmul+3,printf@tmpval+3
  2700                           
  2701                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  2702  0001D2  C0AA  F001         	movff	printf@tmpval,___flge@ff1
  2703  0001D6  C0AB  F002         	movff	printf@tmpval+1,___flge@ff1+1
  2704  0001DA  C0AC  F003         	movff	printf@tmpval+2,___flge@ff1+2
  2705  0001DE  C0AD  F004         	movff	printf@tmpval+3,___flge@ff1+3
  2706  0001E2  0E00               	movlw	0
  2707  0001E4  6E05               	movwf	___flge@ff2^0,c
  2708  0001E6  0E00               	movlw	0
  2709  0001E8  6E06               	movwf	(___flge@ff2+1)^0,c
  2710  0001EA  0E80               	movlw	128
  2711  0001EC  6E07               	movwf	(___flge@ff2+2)^0,c
  2712  0001EE  0E3F               	movlw	63
  2713  0001F0  6E08               	movwf	(___flge@ff2+3)^0,c
  2714  0001F2  EC5A  F00F         	call	___flge	;wreg free
  2715  0001F6  B0D8               	btfsc	status,0,c
  2716  0001F8  D005               	goto	l3879
  2717                           
  2718                           ;doprnt.c: 875: eexp--;
  2719  0001FA  0100               	movlb	0	; () banked
  2720  0001FC  07A8               	decf	printf@eexp& (0+255),f,b
  2721  0001FE  A0D8               	btfss	status,0,c
  2722  000200  07A9               	decf	(printf@eexp+1)& (0+255),f,b
  2723  000202  D017               	goto	l3883
  2724  000204                     l3879:
  2725                           
  2726                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  2727  000204  C0AA  F001         	movff	printf@tmpval,___flge@ff1
  2728  000208  C0AB  F002         	movff	printf@tmpval+1,___flge@ff1+1
  2729  00020C  C0AC  F003         	movff	printf@tmpval+2,___flge@ff1+2
  2730  000210  C0AD  F004         	movff	printf@tmpval+3,___flge@ff1+3
  2731  000214  0E00               	movlw	0
  2732  000216  6E05               	movwf	___flge@ff2^0,c
  2733  000218  0E00               	movlw	0
  2734  00021A  6E06               	movwf	(___flge@ff2+1)^0,c
  2735  00021C  0E20               	movlw	32
  2736  00021E  6E07               	movwf	(___flge@ff2+2)^0,c
  2737  000220  0E41               	movlw	65
  2738  000222  6E08               	movwf	(___flge@ff2+3)^0,c
  2739  000224  EC5A  F00F         	call	___flge	;wreg free
  2740  000228  A0D8               	btfss	status,0,c
  2741  00022A  D003               	goto	l3883
  2742                           
  2743                           ;doprnt.c: 877: eexp++;
  2744  00022C  0100               	movlb	0	; () banked
  2745  00022E  4BA8               	infsnz	printf@eexp& (0+255),f,b
  2746  000230  2BA9               	incf	(printf@eexp+1)& (0+255),f,b
  2747  000232                     l3883:
  2748                           
  2749                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  2750                           
  2751                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  2752  000232  C0B2  F037         	movff	printf@fval,___fladd@b
  2753  000236  C0B3  F038         	movff	printf@fval+1,___fladd@b+1
  2754  00023A  C0B4  F039         	movff	printf@fval+2,___fladd@b+2
  2755  00023E  C0B5  F03A         	movff	printf@fval+3,___fladd@b+3
  2756  000242  0E06               	movlw	6
  2757  000244  ECBC  F00A         	call	_fround
  2758  000248  C028  F03B         	movff	?_fround,___fladd@a
  2759  00024C  C029  F03C         	movff	?_fround+1,___fladd@a+1
  2760  000250  C02A  F03D         	movff	?_fround+2,___fladd@a+2
  2761  000254  C02B  F03E         	movff	?_fround+3,___fladd@a+3
  2762  000258  ECF2  F007         	call	___fladd	;wreg free
  2763  00025C  C037  F0B2         	movff	?___fladd,printf@fval
  2764  000260  C038  F0B3         	movff	?___fladd+1,printf@fval+1
  2765  000264  C039  F0B4         	movff	?___fladd+2,printf@fval+2
  2766  000268  C03A  F0B5         	movff	?___fladd+3,printf@fval+3
  2767                           
  2768                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2769  00026C  0100               	movlb	0	; () banked
  2770  00026E  BFA9               	btfsc	(printf@eexp+1)& (0+255),7,b
  2771  000270  D006               	goto	u3440
  2772  000272  51A9               	movf	(printf@eexp+1)& (0+255),w,b
  2773  000274  E131               	bnz	l3895
  2774  000276  0E0A               	movlw	10
  2775  000278  5DA8               	subwf	printf@eexp& (0+255),w,b
  2776  00027A  B0D8               	btfsc	status,0,c
  2777  00027C  D02D               	goto	u3470
  2778  00027E                     u3440:
  2779                           
  2780                           ; BSR set to: 0
  2781  00027E  C0B2  F001         	movff	printf@fval,___fleq@ff1
  2782  000282  C0B3  F002         	movff	printf@fval+1,___fleq@ff1+1
  2783  000286  C0B4  F003         	movff	printf@fval+2,___fleq@ff1+2
  2784  00028A  C0B5  F004         	movff	printf@fval+3,___fleq@ff1+3
  2785  00028E  0E00               	movlw	0
  2786  000290  6E05               	movwf	___fleq@ff2^0,c
  2787  000292  0E00               	movlw	0
  2788  000294  6E06               	movwf	(___fleq@ff2+1)^0,c
  2789  000296  0E00               	movlw	0
  2790  000298  6E07               	movwf	(___fleq@ff2+2)^0,c
  2791  00029A  0E00               	movlw	0
  2792  00029C  6E08               	movwf	(___fleq@ff2+3)^0,c
  2793  00029E  ECD0  F010         	call	___fleq	;wreg free
  2794  0002A2  B0D8               	btfsc	status,0,c
  2795  0002A4  D064               	goto	l3909
  2796                           
  2797                           ; BSR set to: 0
  2798  0002A6  C0B2  F031         	movff	printf@fval,___fltol@f1
  2799  0002AA  C0B3  F032         	movff	printf@fval+1,___fltol@f1+1
  2800  0002AE  C0B4  F033         	movff	printf@fval+2,___fltol@f1+2
  2801  0002B2  C0B5  F034         	movff	printf@fval+3,___fltol@f1+3
  2802  0002B6  EC28  F010         	call	___fltol	;wreg free
  2803  0002BA  5031               	movf	?___fltol^0,w,c
  2804  0002BC  1032               	iorwf	(?___fltol+1)^0,w,c
  2805  0002BE  1033               	iorwf	(?___fltol+2)^0,w,c
  2806  0002C0  1034               	iorwf	(?___fltol+3)^0,w,c
  2807  0002C2  A4D8               	btfss	status,2,c
  2808  0002C4  D054               	goto	l3909
  2809  0002C6  0100               	movlb	0	; () banked
  2810  0002C8  BFA9               	btfsc	(printf@eexp+1)& (0+255),7,b
  2811  0002CA  D051               	goto	l3909
  2812  0002CC  51A9               	movf	(printf@eexp+1)& (0+255),w,b
  2813  0002CE  E104               	bnz	u3470
  2814  0002D0  0E02               	movlw	2
  2815  0002D2  5DA8               	subwf	printf@eexp& (0+255),w,b
  2816  0002D4  A0D8               	btfss	status,0,c
  2817  0002D6  D04B               	goto	l3909
  2818  0002D8                     u3470:
  2819  0002D8                     l3895:
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  2823  0002D8  C0AA  F001         	movff	printf@tmpval,___flge@ff1
  2824  0002DC  C0AB  F002         	movff	printf@tmpval+1,___flge@ff1+1
  2825  0002E0  C0AC  F003         	movff	printf@tmpval+2,___flge@ff1+2
  2826  0002E4  C0AD  F004         	movff	printf@tmpval+3,___flge@ff1+3
  2827  0002E8  0E5F               	movlw	95
  2828  0002EA  6E05               	movwf	___flge@ff2^0,c
  2829  0002EC  0E70               	movlw	112
  2830  0002EE  6E06               	movwf	(___flge@ff2+1)^0,c
  2831  0002F0  0E89               	movlw	137
  2832  0002F2  6E07               	movwf	(___flge@ff2+2)^0,c
  2833  0002F4  0E40               	movlw	64
  2834  0002F6  6E08               	movwf	(___flge@ff2+3)^0,c
  2835  0002F8  EC5A  F00F         	call	___flge	;wreg free
  2836  0002FC  B0D8               	btfsc	status,0,c
  2837  0002FE  D003               	goto	l3899
  2838                           
  2839                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2840  000300  0100               	movlb	0	; () banked
  2841  000302  0EF7               	movlw	247
  2842  000304  D002               	goto	L1
  2843  000306                     l3899:
  2844                           
  2845                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2846  000306  0100               	movlb	0	; () banked
  2847  000308  0EF8               	movlw	248
  2848  00030A                     L1:
  2849  00030A  27A8               	addwf	printf@eexp& (0+255),f,b
  2850  00030C  0EFF               	movlw	255
  2851  00030E  23A9               	addwfc	(printf@eexp+1)& (0+255),f,b
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2855  000310  51A8               	movf	printf@eexp& (0+255),w,b
  2856  000312  EC74  F004         	call	_scale
  2857  000316  C028  F0AA         	movff	?_scale,printf@tmpval
  2858  00031A  C029  F0AB         	movff	?_scale+1,printf@tmpval+1
  2859  00031E  C02A  F0AC         	movff	?_scale+2,printf@tmpval+2
  2860  000322  C02B  F0AD         	movff	?_scale+3,printf@tmpval+3
  2861  000326  C0B2  F001         	movff	printf@fval,__div_to_l_@f1
  2862  00032A  C0B3  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  2863  00032E  C0B4  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  2864  000332  C0B5  F004         	movff	printf@fval+3,__div_to_l_@f1+3
  2865  000336  C0AA  F005         	movff	printf@tmpval,__div_to_l_@f2
  2866  00033A  C0AB  F006         	movff	printf@tmpval+1,__div_to_l_@f2+1
  2867  00033E  C0AC  F007         	movff	printf@tmpval+2,__div_to_l_@f2+2
  2868  000342  C0AD  F008         	movff	printf@tmpval+3,__div_to_l_@f2+3
  2869  000346  ECE0  F00E         	call	__div_to_l_	;wreg free
  2870  00034A  C001  F0AE         	movff	?__div_to_l_,printf@val
  2871  00034E  C002  F0AF         	movff	?__div_to_l_+1,printf@val+1
  2872  000352  C003  F0B0         	movff	?__div_to_l_+2,printf@val+2
  2873  000356  C004  F0B1         	movff	?__div_to_l_+3,printf@val+3
  2874                           
  2875                           ;doprnt.c: 1155: fval = 0.0;
  2876  00035A  0E00               	movlw	0
  2877  00035C  0100               	movlb	0	; () banked
  2878  00035E  6FB2               	movwf	printf@fval& (0+255),b
  2879  000360  0E00               	movlw	0
  2880  000362  6FB3               	movwf	(printf@fval+1)& (0+255),b
  2881  000364  0E00               	movlw	0
  2882  000366  6FB4               	movwf	(printf@fval+2)& (0+255),b
  2883  000368  0E00               	movlw	0
  2884  00036A  6FB5               	movwf	(printf@fval+3)& (0+255),b
  2885                           
  2886                           ;doprnt.c: 1156: } else {
  2887  00036C  D03C               	goto	l3913
  2888  00036E                     l3909:
  2889                           
  2890                           ;doprnt.c: 1157: val = (unsigned long)fval;
  2891  00036E  C0B2  F031         	movff	printf@fval,___fltol@f1
  2892  000372  C0B3  F032         	movff	printf@fval+1,___fltol@f1+1
  2893  000376  C0B4  F033         	movff	printf@fval+2,___fltol@f1+2
  2894  00037A  C0B5  F034         	movff	printf@fval+3,___fltol@f1+3
  2895  00037E  EC28  F010         	call	___fltol	;wreg free
  2896  000382  C031  F0AE         	movff	?___fltol,printf@val
  2897  000386  C032  F0AF         	movff	?___fltol+1,printf@val+1
  2898  00038A  C033  F0B0         	movff	?___fltol+2,printf@val+2
  2899  00038E  C034  F0B1         	movff	?___fltol+3,printf@val+3
  2900                           
  2901                           ;doprnt.c: 1158: fval -= (double)val;
  2902  000392  C0B2  F047         	movff	printf@fval,___flsub@b
  2903  000396  C0B3  F048         	movff	printf@fval+1,___flsub@b+1
  2904  00039A  C0B4  F049         	movff	printf@fval+2,___flsub@b+2
  2905  00039E  C0B5  F04A         	movff	printf@fval+3,___flsub@b+3
  2906  0003A2  C0AE  F001         	movff	printf@val,___xxtofl@val
  2907  0003A6  C0AF  F002         	movff	printf@val+1,___xxtofl@val+1
  2908  0003AA  C0B0  F003         	movff	printf@val+2,___xxtofl@val+2
  2909  0003AE  C0B1  F004         	movff	printf@val+3,___xxtofl@val+3
  2910  0003B2  0E00               	movlw	0
  2911  0003B4  ECB4  F00C         	call	___xxtofl
  2912  0003B8  C001  F04B         	movff	?___xxtofl,___flsub@a
  2913  0003BC  C002  F04C         	movff	?___xxtofl+1,___flsub@a+1
  2914  0003C0  C003  F04D         	movff	?___xxtofl+2,___flsub@a+2
  2915  0003C4  C004  F04E         	movff	?___xxtofl+3,___flsub@a+3
  2916  0003C8  ECEA  F012         	call	___flsub	;wreg free
  2917  0003CC  C047  F0B2         	movff	?___flsub,printf@fval
  2918  0003D0  C048  F0B3         	movff	?___flsub+1,printf@fval+1
  2919  0003D4  C049  F0B4         	movff	?___flsub+2,printf@fval+2
  2920  0003D8  C04A  F0B5         	movff	?___flsub+3,printf@fval+3
  2921                           
  2922                           ;doprnt.c: 1159: eexp = 0;
  2923  0003DC  0E00               	movlw	0
  2924  0003DE  0100               	movlb	0	; () banked
  2925  0003E0  6FA9               	movwf	(printf@eexp+1)& (0+255),b
  2926  0003E2  0E00               	movlw	0
  2927  0003E4  6FA8               	movwf	printf@eexp& (0+255),b
  2928  0003E6                     l3913:
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2932  0003E6  0E01               	movlw	1
  2933  0003E8  6FB6               	movwf	printf@c& (0+255),b
  2934  0003EA                     l3919:
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;doprnt.c: 1163: if(val < dpowers[c])
  2938  0003EA  51B6               	movf	printf@c& (0+255),w,b
  2939  0003EC  0D04               	mullw	4
  2940  0003EE  0EA5               	movlw	low _dpowers
  2941  0003F0  24F3               	addwf	243,w,c
  2942  0003F2  6EF6               	movwf	tblptrl,c
  2943  0003F4  0EFE               	movlw	high _dpowers
  2944  0003F6  20F4               	addwfc	244,w,c
  2945  0003F8  6EF7               	movwf	tblptrh,c
  2946  0003FA                     	if	0	;There are less than 3 active tblptr bytes
  2947  0003FA                     	endif
  2948  0003FA  0009               	tblrd		*+
  2949  0003FC  50F5               	movf	tablat,w,c
  2950  0003FE  5DAE               	subwf	printf@val& (0+255),w,b
  2951  000400  0009               	tblrd		*+
  2952  000402  50F5               	movf	tablat,w,c
  2953  000404  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  2954  000406  0009               	tblrd		*+
  2955  000408  50F5               	movf	tablat,w,c
  2956  00040A  59B0               	subwfb	(printf@val+2)& (0+255),w,b
  2957  00040C  0009               	tblrd		*+
  2958  00040E  50F5               	movf	tablat,w,c
  2959  000410  59B1               	subwfb	(printf@val+3)& (0+255),w,b
  2960  000412  A0D8               	btfss	status,0,c
  2961  000414  D005               	goto	u3500
  2962                           
  2963                           ; BSR set to: 0
  2964  000416  2BB6               	incf	printf@c& (0+255),f,b
  2965                           
  2966                           ; BSR set to: 0
  2967  000418  0E0A               	movlw	10
  2968  00041A  19B6               	xorwf	printf@c& (0+255),w,b
  2969  00041C  A4D8               	btfss	status,2,c
  2970  00041E  D7E5               	goto	l3919
  2971  000420                     u3500:
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  2975  000420  C0A6  F055         	movff	printf@flag,??_printf
  2976  000424  0E03               	movlw	3
  2977  000426  1655               	andwf	??_printf^0,f,c
  2978  000428  B4D8               	btfsc	status,2,c
  2979  00042A  D049               	goto	l3937
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;doprnt.c: 1216: (putch('-') );
  2983  00042C  0E2D               	movlw	45
  2984  00042E  EC47  F014         	call	_putch
  2985  000432  D045               	goto	l3937
  2986  000434                     l3931:
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  2990  000434  C0AE  F001         	movff	printf@val,___lldiv@dividend
  2991  000438  C0AF  F002         	movff	printf@val+1,___lldiv@dividend+1
  2992  00043C  C0B0  F003         	movff	printf@val+2,___lldiv@dividend+2
  2993  000440  C0B1  F004         	movff	printf@val+3,___lldiv@dividend+3
  2994  000444  51B6               	movf	printf@c& (0+255),w,b
  2995  000446  0D04               	mullw	4
  2996  000448  0EA5               	movlw	low _dpowers
  2997  00044A  24F3               	addwf	243,w,c
  2998  00044C  6EF6               	movwf	tblptrl,c
  2999  00044E  0EFE               	movlw	high _dpowers
  3000  000450  20F4               	addwfc	244,w,c
  3001  000452  6EF7               	movwf	tblptrh,c
  3002  000454                     	if	0	;There are less than 3 active tblptr bytes
  3003  000454                     	endif
  3004  000454  0009               	tblrd		*+
  3005  000456  CFF5 F005          	movff	tablat,___lldiv@divisor
  3006  00045A  0009               	tblrd		*+
  3007  00045C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3008  000460  0009               	tblrd		*+
  3009  000462  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3010  000466  000A               	tblrd		*-
  3011  000468  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3012  00046C  EC57  F011         	call	___lldiv	;wreg free
  3013  000470  C001  F0AA         	movff	?___lldiv,printf@tmpval
  3014  000474  C002  F0AB         	movff	?___lldiv+1,printf@tmpval+1
  3015  000478  C003  F0AC         	movff	?___lldiv+2,printf@tmpval+2
  3016  00047C  C004  F0AD         	movff	?___lldiv+3,printf@tmpval+3
  3017                           
  3018                           ;doprnt.c: 1228: tmpval.vd %= 10;
  3019  000480  C0AA  F00E         	movff	printf@tmpval,___llmod@dividend
  3020  000484  C0AB  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  3021  000488  C0AC  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  3022  00048C  C0AD  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  3023  000490  0E0A               	movlw	10
  3024  000492  6E12               	movwf	___llmod@divisor^0,c
  3025  000494  0E00               	movlw	0
  3026  000496  6E13               	movwf	(___llmod@divisor+1)^0,c
  3027  000498  0E00               	movlw	0
  3028  00049A  6E14               	movwf	(___llmod@divisor+2)^0,c
  3029  00049C  0E00               	movlw	0
  3030  00049E  6E15               	movwf	(___llmod@divisor+3)^0,c
  3031  0004A0  EC0A  F012         	call	___llmod	;wreg free
  3032  0004A4  C00E  F0AA         	movff	?___llmod,printf@tmpval
  3033  0004A8  C00F  F0AB         	movff	?___llmod+1,printf@tmpval+1
  3034  0004AC  C010  F0AC         	movff	?___llmod+2,printf@tmpval+2
  3035  0004B0  C011  F0AD         	movff	?___llmod+3,printf@tmpval+3
  3036                           
  3037                           ;doprnt.c: 1229: (putch('0' + tmpval.vd) );
  3038  0004B4  0100               	movlb	0	; () banked
  3039  0004B6  51AA               	movf	printf@tmpval& (0+255),w,b
  3040  0004B8  0F30               	addlw	48
  3041  0004BA  EC47  F014         	call	_putch
  3042  0004BE                     l3937:
  3043  0004BE  0100               	movlb	0	; () banked
  3044  0004C0  07B6               	decf	printf@c& (0+255),f,b
  3045  0004C2  29B6               	incf	printf@c& (0+255),w,b
  3046  0004C4  B4D8               	btfsc	status,2,c
  3047  0004C6  D008               	goto	l3943
  3048  0004C8  D7B5               	goto	l3931
  3049  0004CA                     l3939:
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;doprnt.c: 1234: (putch('0') );
  3053  0004CA  0E30               	movlw	48
  3054  0004CC  EC47  F014         	call	_putch
  3055                           
  3056                           ;doprnt.c: 1235: eexp--;
  3057  0004D0  0100               	movlb	0	; () banked
  3058  0004D2  07A8               	decf	printf@eexp& (0+255),f,b
  3059  0004D4  A0D8               	btfss	status,0,c
  3060  0004D6  07A9               	decf	(printf@eexp+1)& (0+255),f,b
  3061  0004D8                     l3943:
  3062                           
  3063                           ; BSR set to: 0
  3064  0004D8  BFA9               	btfsc	(printf@eexp+1)& (0+255),7,b
  3065  0004DA  D005               	goto	u3530
  3066  0004DC  51A9               	movf	(printf@eexp+1)& (0+255),w,b
  3067  0004DE  E1F5               	bnz	l3939
  3068  0004E0  05A8               	decf	printf@eexp& (0+255),w,b
  3069  0004E2  B0D8               	btfsc	status,0,c
  3070  0004E4  D7F2               	goto	l3939
  3071  0004E6                     u3530:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  3075  0004E6  BFA5               	btfsc	(printf@prec+1)& (0+255),7,b
  3076  0004E8  D009               	goto	l434
  3077  0004EA  51A5               	movf	(printf@prec+1)& (0+255),w,b
  3078  0004EC  E104               	bnz	u3540
  3079  0004EE  0E09               	movlw	9
  3080  0004F0  5DA4               	subwf	printf@prec& (0+255),w,b
  3081  0004F2  A0D8               	btfss	status,0,c
  3082  0004F4  D003               	goto	l434
  3083  0004F6                     u3540:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3087  0004F6  0E08               	movlw	8
  3088  0004F8  6FB6               	movwf	printf@c& (0+255),b
  3089  0004FA  D002               	goto	l3949
  3090  0004FC                     l434:
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  3094  0004FC  C0A4  F0B6         	movff	printf@prec,printf@c
  3095  000500                     l3949:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;doprnt.c: 1241: prec -= (int)c;
  3099  000500  51B6               	movf	printf@c& (0+255),w,b
  3100  000502  5FA4               	subwf	printf@prec& (0+255),f,b
  3101  000504  0E00               	movlw	0
  3102  000506  5BA5               	subwfb	(printf@prec+1)& (0+255),f,b
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;doprnt.c: 1245: if(c)
  3106  000508  51B6               	movf	printf@c& (0+255),w,b
  3107  00050A  B4D8               	btfsc	status,2,c
  3108  00050C  D003               	goto	l3955
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;doprnt.c: 1247: (putch('.') );
  3112  00050E  0E2E               	movlw	46
  3113  000510  EC47  F014         	call	_putch
  3114  000514                     l3955:
  3115                           
  3116                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  3117  000514  0100               	movlb	0	; () banked
  3118  000516  51B6               	movf	printf@c& (0+255),w,b
  3119  000518  EC74  F004         	call	_scale
  3120  00051C  C028  F09E         	movff	?_scale,_printf$2401
  3121  000520  C029  F09F         	movff	?_scale+1,_printf$2401+1
  3122  000524  C02A  F0A0         	movff	?_scale+2,_printf$2401+2
  3123  000528  C02B  F0A1         	movff	?_scale+3,_printf$2401+3
  3124                           
  3125                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  3126  00052C  C0B2  F013         	movff	printf@fval,___flmul@a
  3127  000530  C0B3  F014         	movff	printf@fval+1,___flmul@a+1
  3128  000534  C0B4  F015         	movff	printf@fval+2,___flmul@a+2
  3129  000538  C0B5  F016         	movff	printf@fval+3,___flmul@a+3
  3130  00053C  C09E  F00F         	movff	_printf$2401,___flmul@b
  3131  000540  C09F  F010         	movff	_printf$2401+1,___flmul@b+1
  3132  000544  C0A0  F011         	movff	_printf$2401+2,___flmul@b+2
  3133  000548  C0A1  F012         	movff	_printf$2401+3,___flmul@b+3
  3134  00054C  EC5C  F006         	call	___flmul	;wreg free
  3135  000550  C00F  F031         	movff	?___flmul,___fltol@f1
  3136  000554  C010  F032         	movff	?___flmul+1,___fltol@f1+1
  3137  000558  C011  F033         	movff	?___flmul+2,___fltol@f1+2
  3138  00055C  C012  F034         	movff	?___flmul+3,___fltol@f1+3
  3139  000560  EC28  F010         	call	___fltol	;wreg free
  3140  000564  C031  F0AE         	movff	?___fltol,printf@val
  3141  000568  C032  F0AF         	movff	?___fltol+1,printf@val+1
  3142  00056C  C033  F0B0         	movff	?___fltol+2,printf@val+2
  3143  000570  C034  F0B1         	movff	?___fltol+3,printf@val+3
  3144                           
  3145                           ;doprnt.c: 1254: while(c--) {
  3146  000574  D06C               	goto	l3965
  3147  000576                     l3959:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  3151  000576  C0AE  F001         	movff	printf@val,___lldiv@dividend
  3152  00057A  C0AF  F002         	movff	printf@val+1,___lldiv@dividend+1
  3153  00057E  C0B0  F003         	movff	printf@val+2,___lldiv@dividend+2
  3154  000582  C0B1  F004         	movff	printf@val+3,___lldiv@dividend+3
  3155  000586  51B6               	movf	printf@c& (0+255),w,b
  3156  000588  0D04               	mullw	4
  3157  00058A  0EA5               	movlw	low _dpowers
  3158  00058C  24F3               	addwf	243,w,c
  3159  00058E  6EF6               	movwf	tblptrl,c
  3160  000590  0EFE               	movlw	high _dpowers
  3161  000592  20F4               	addwfc	244,w,c
  3162  000594  6EF7               	movwf	tblptrh,c
  3163  000596                     	if	0	;There are less than 3 active tblptr bytes
  3164  000596                     	endif
  3165  000596  0009               	tblrd		*+
  3166  000598  CFF5 F005          	movff	tablat,___lldiv@divisor
  3167  00059C  0009               	tblrd		*+
  3168  00059E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3169  0005A2  0009               	tblrd		*+
  3170  0005A4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3171  0005A8  000A               	tblrd		*-
  3172  0005AA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3173  0005AE  EC57  F011         	call	___lldiv	;wreg free
  3174  0005B2  C001  F0AA         	movff	?___lldiv,printf@tmpval
  3175  0005B6  C002  F0AB         	movff	?___lldiv+1,printf@tmpval+1
  3176  0005BA  C003  F0AC         	movff	?___lldiv+2,printf@tmpval+2
  3177  0005BE  C004  F0AD         	movff	?___lldiv+3,printf@tmpval+3
  3178                           
  3179                           ;doprnt.c: 1256: tmpval.vd %= 10;
  3180  0005C2  C0AA  F00E         	movff	printf@tmpval,___llmod@dividend
  3181  0005C6  C0AB  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  3182  0005CA  C0AC  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  3183  0005CE  C0AD  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  3184  0005D2  0E0A               	movlw	10
  3185  0005D4  6E12               	movwf	___llmod@divisor^0,c
  3186  0005D6  0E00               	movlw	0
  3187  0005D8  6E13               	movwf	(___llmod@divisor+1)^0,c
  3188  0005DA  0E00               	movlw	0
  3189  0005DC  6E14               	movwf	(___llmod@divisor+2)^0,c
  3190  0005DE  0E00               	movlw	0
  3191  0005E0  6E15               	movwf	(___llmod@divisor+3)^0,c
  3192  0005E2  EC0A  F012         	call	___llmod	;wreg free
  3193  0005E6  C00E  F0AA         	movff	?___llmod,printf@tmpval
  3194  0005EA  C00F  F0AB         	movff	?___llmod+1,printf@tmpval+1
  3195  0005EE  C010  F0AC         	movff	?___llmod+2,printf@tmpval+2
  3196  0005F2  C011  F0AD         	movff	?___llmod+3,printf@tmpval+3
  3197                           
  3198                           ;doprnt.c: 1257: (putch('0' + tmpval.vd) );
  3199  0005F6  0100               	movlb	0	; () banked
  3200  0005F8  51AA               	movf	printf@tmpval& (0+255),w,b
  3201  0005FA  0F30               	addlw	48
  3202  0005FC  EC47  F014         	call	_putch
  3203                           
  3204                           ;doprnt.c: 1258: val %= dpowers[c];
  3205  000600  C0AE  F00E         	movff	printf@val,___llmod@dividend
  3206  000604  C0AF  F00F         	movff	printf@val+1,___llmod@dividend+1
  3207  000608  C0B0  F010         	movff	printf@val+2,___llmod@dividend+2
  3208  00060C  C0B1  F011         	movff	printf@val+3,___llmod@dividend+3
  3209  000610  0100               	movlb	0	; () banked
  3210  000612  51B6               	movf	printf@c& (0+255),w,b
  3211  000614  0D04               	mullw	4
  3212  000616  0EA5               	movlw	low _dpowers
  3213  000618  24F3               	addwf	243,w,c
  3214  00061A  6EF6               	movwf	tblptrl,c
  3215  00061C  0EFE               	movlw	high _dpowers
  3216  00061E  20F4               	addwfc	244,w,c
  3217  000620  6EF7               	movwf	tblptrh,c
  3218  000622                     	if	0	;There are less than 3 active tblptr bytes
  3219  000622                     	endif
  3220  000622  0009               	tblrd		*+
  3221  000624  CFF5 F012          	movff	tablat,___llmod@divisor
  3222  000628  0009               	tblrd		*+
  3223  00062A  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3224  00062E  0009               	tblrd		*+
  3225  000630  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3226  000634  000A               	tblrd		*-
  3227  000636  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3228  00063A  EC0A  F012         	call	___llmod	;wreg free
  3229  00063E  C00E  F0AE         	movff	?___llmod,printf@val
  3230  000642  C00F  F0AF         	movff	?___llmod+1,printf@val+1
  3231  000646  C010  F0B0         	movff	?___llmod+2,printf@val+2
  3232  00064A  C011  F0B1         	movff	?___llmod+3,printf@val+3
  3233  00064E                     l3965:
  3234  00064E  0100               	movlb	0	; () banked
  3235  000650  07B6               	decf	printf@c& (0+255),f,b
  3236  000652  29B6               	incf	printf@c& (0+255),w,b
  3237  000654  B4D8               	btfsc	status,2,c
  3238  000656  D008               	goto	l3971
  3239  000658  D78E               	goto	l3959
  3240  00065A                     l3967:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;doprnt.c: 1262: (putch('0') );
  3244  00065A  0E30               	movlw	48
  3245  00065C  EC47  F014         	call	_putch
  3246                           
  3247                           ;doprnt.c: 1263: prec--;
  3248  000660  0100               	movlb	0	; () banked
  3249  000662  07A4               	decf	printf@prec& (0+255),f,b
  3250  000664  A0D8               	btfss	status,0,c
  3251  000666  07A5               	decf	(printf@prec+1)& (0+255),f,b
  3252  000668                     l3971:
  3253                           
  3254                           ; BSR set to: 0
  3255  000668  51A4               	movf	printf@prec& (0+255),w,b
  3256  00066A  11A5               	iorwf	(printf@prec+1)& (0+255),w,b
  3257  00066C  B4D8               	btfsc	status,2,c
  3258  00066E  D12D               	goto	u3670
  3259  000670  D7F4               	goto	l3967
  3260  000672                     l3973:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;doprnt.c: 1272: };doprnt.c: 1277: if((flag & (0xC0)) == 0x00)
  3264  000672  C0A6  F055         	movff	printf@flag,??_printf
  3265  000676  0EC0               	movlw	192
  3266  000678  1655               	andwf	??_printf^0,f,c
  3267  00067A  A4D8               	btfss	status,2,c
  3268  00067C  D02A               	goto	l443
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;doprnt.c: 1279: {;doprnt.c: 1281: if(flag & 0x10)
  3272  00067E  A9A6               	btfss	printf@flag& (0+255),4,b
  3273  000680  D00D               	goto	l3981
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;doprnt.c: 1282: val = (unsigned long)(*(long *)__va_arg((*(long **)ap), (long)0));
  3277  000682  51A3               	movf	printf@ap& (0+255),w,b
  3278  000684  6ED9               	movwf	fsr2l,c
  3279  000686  6ADA               	clrf	fsr2h,c
  3280  000688  CFDE F0AE          	movff	postinc2,printf@val
  3281  00068C  CFDE F0AF          	movff	postinc2,printf@val+1
  3282  000690  CFDE F0B0          	movff	postinc2,printf@val+2
  3283  000694  CFDE F0B1          	movff	postinc2,printf@val+3
  3284                           
  3285                           ; BSR set to: 0
  3286  000698  0E04               	movlw	4
  3287  00069A  D00D               	goto	L2
  3288  00069C                     l3981:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;doprnt.c: 1283: else;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_arg((*(int **)a
      +                          p), (int)0));
  3292  00069C  51A3               	movf	printf@ap& (0+255),w,b
  3293  00069E  6ED9               	movwf	fsr2l,c
  3294  0006A0  6ADA               	clrf	fsr2h,c
  3295  0006A2  CFDE F0AE          	movff	postinc2,printf@val
  3296  0006A6  CFDD F0AF          	movff	postdec2,printf@val+1
  3297  0006AA  0E00               	movlw	0
  3298  0006AC  BFAF               	btfsc	(printf@val+1)& (0+255),7,b
  3299  0006AE  0EFF               	movlw	-1
  3300  0006B0  6FB0               	movwf	(printf@val+2)& (0+255),b
  3301  0006B2  6FB1               	movwf	(printf@val+3)& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304  0006B4  0E02               	movlw	2
  3305  0006B6                     L2:
  3306  0006B6  27A3               	addwf	printf@ap& (0+255),f,b
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;doprnt.c: 1287: if((long)val < 0) {
  3310  0006B8  AFB1               	btfss	(printf@val+3)& (0+255),7,b
  3311  0006BA  D066               	goto	l4029
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;doprnt.c: 1288: flag |= 0x03;
  3315  0006BC  0E03               	movlw	3
  3316  0006BE  13A6               	iorwf	printf@flag& (0+255),f,b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;doprnt.c: 1289: val = -val;
  3320  0006C0  1FB1               	comf	(printf@val+3)& (0+255),f,b
  3321  0006C2  1FB0               	comf	(printf@val+2)& (0+255),f,b
  3322  0006C4  1FAF               	comf	(printf@val+1)& (0+255),f,b
  3323  0006C6  6DAE               	negf	printf@val& (0+255),b
  3324  0006C8  0E00               	movlw	0
  3325  0006CA  23AF               	addwfc	(printf@val+1)& (0+255),f,b
  3326  0006CC  23B0               	addwfc	(printf@val+2)& (0+255),f,b
  3327  0006CE  23B1               	addwfc	(printf@val+3)& (0+255),f,b
  3328  0006D0  D05B               	goto	l4029
  3329  0006D2                     l443:
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1307: if(flag & 0x10)
  3333  0006D2  A9A6               	btfss	printf@flag& (0+255),4,b
  3334  0006D4  D00D               	goto	l3995
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 1308: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3338  0006D6  51A3               	movf	printf@ap& (0+255),w,b
  3339  0006D8  6ED9               	movwf	fsr2l,c
  3340  0006DA  6ADA               	clrf	fsr2h,c
  3341  0006DC  CFDE F0AE          	movff	postinc2,printf@val
  3342  0006E0  CFDE F0AF          	movff	postinc2,printf@val+1
  3343  0006E4  CFDE F0B0          	movff	postinc2,printf@val+2
  3344  0006E8  CFDE F0B1          	movff	postinc2,printf@val+3
  3345                           
  3346                           ; BSR set to: 0
  3347  0006EC  0E04               	movlw	4
  3348  0006EE  D00E               	goto	L3
  3349  0006F0                     l3995:
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;doprnt.c: 1309: else;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (
      +                          unsigned)0));
  3353  0006F0  51A3               	movf	printf@ap& (0+255),w,b
  3354  0006F2  6ED9               	movwf	fsr2l,c
  3355  0006F4  6ADA               	clrf	fsr2h,c
  3356  0006F6  CFDE F055          	movff	postinc2,??_printf
  3357  0006FA  CFDD F056          	movff	postdec2,??_printf+1
  3358  0006FE  C055  F0AE         	movff	??_printf,printf@val
  3359  000702  C056  F0AF         	movff	??_printf+1,printf@val+1
  3360  000706  6BB0               	clrf	(printf@val+2)& (0+255),b
  3361  000708  6BB1               	clrf	(printf@val+3)& (0+255),b
  3362                           
  3363                           ; BSR set to: 0
  3364  00070A  0E02               	movlw	2
  3365  00070C                     L3:
  3366  00070C  27A3               	addwf	printf@ap& (0+255),f,b
  3367  00070E  D03C               	goto	l4029
  3368  000710                     l3999:
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;doprnt.c: 1328: case 0xC0:;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowe
      +                          rs[0] ; c++)
  3372  000710  0E01               	movlw	1
  3373  000712  6FB6               	movwf	printf@c& (0+255),b
  3374  000714                     l4005:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;doprnt.c: 1332: if(val < dpowers[c])
  3378  000714  51B6               	movf	printf@c& (0+255),w,b
  3379  000716  0D04               	mullw	4
  3380  000718  0EA5               	movlw	low _dpowers
  3381  00071A  24F3               	addwf	243,w,c
  3382  00071C  6EF6               	movwf	tblptrl,c
  3383  00071E  0EFE               	movlw	high _dpowers
  3384  000720  20F4               	addwfc	244,w,c
  3385  000722  6EF7               	movwf	tblptrh,c
  3386  000724                     	if	0	;There are less than 3 active tblptr bytes
  3387  000724                     	endif
  3388  000724  0009               	tblrd		*+
  3389  000726  50F5               	movf	tablat,w,c
  3390  000728  5DAE               	subwf	printf@val& (0+255),w,b
  3391  00072A  0009               	tblrd		*+
  3392  00072C  50F5               	movf	tablat,w,c
  3393  00072E  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  3394  000730  0009               	tblrd		*+
  3395  000732  50F5               	movf	tablat,w,c
  3396  000734  59B0               	subwfb	(printf@val+2)& (0+255),w,b
  3397  000736  0009               	tblrd		*+
  3398  000738  50F5               	movf	tablat,w,c
  3399  00073A  59B1               	subwfb	(printf@val+3)& (0+255),w,b
  3400  00073C  A0D8               	btfss	status,0,c
  3401  00073E  D02F               	goto	l4031
  3402                           
  3403                           ; BSR set to: 0
  3404  000740  2BB6               	incf	printf@c& (0+255),f,b
  3405                           
  3406                           ; BSR set to: 0
  3407  000742  0E0A               	movlw	10
  3408  000744  19B6               	xorwf	printf@c& (0+255),w,b
  3409  000746  B4D8               	btfsc	status,2,c
  3410  000748  D02A               	goto	l4031
  3411  00074A  D7E4               	goto	l4005
  3412  00074C                     l4013:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;doprnt.c: 1342: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3416  00074C  0E01               	movlw	1
  3417  00074E  6FB6               	movwf	printf@c& (0+255),b
  3418  000750                     l4019:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;doprnt.c: 1343: if(val < hexpowers[c])
  3422  000750  51B6               	movf	printf@c& (0+255),w,b
  3423  000752  0D04               	mullw	4
  3424  000754  0E85               	movlw	low _hexpowers
  3425  000756  24F3               	addwf	243,w,c
  3426  000758  6EF6               	movwf	tblptrl,c
  3427  00075A  0EFE               	movlw	high _hexpowers
  3428  00075C  20F4               	addwfc	244,w,c
  3429  00075E  6EF7               	movwf	tblptrh,c
  3430  000760                     	if	0	;There are less than 3 active tblptr bytes
  3431  000760                     	endif
  3432  000760  0009               	tblrd		*+
  3433  000762  50F5               	movf	tablat,w,c
  3434  000764  5DAE               	subwf	printf@val& (0+255),w,b
  3435  000766  0009               	tblrd		*+
  3436  000768  50F5               	movf	tablat,w,c
  3437  00076A  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  3438  00076C  0009               	tblrd		*+
  3439  00076E  50F5               	movf	tablat,w,c
  3440  000770  59B0               	subwfb	(printf@val+2)& (0+255),w,b
  3441  000772  0009               	tblrd		*+
  3442  000774  50F5               	movf	tablat,w,c
  3443  000776  59B1               	subwfb	(printf@val+3)& (0+255),w,b
  3444  000778  A0D8               	btfss	status,0,c
  3445  00077A  D011               	goto	l4031
  3446                           
  3447                           ; BSR set to: 0
  3448  00077C  2BB6               	incf	printf@c& (0+255),f,b
  3449                           
  3450                           ; BSR set to: 0
  3451  00077E  0E08               	movlw	8
  3452  000780  19B6               	xorwf	printf@c& (0+255),w,b
  3453  000782  B4D8               	btfsc	status,2,c
  3454  000784  D00C               	goto	l4031
  3455  000786  D7E4               	goto	l4019
  3456  000788                     l4029:
  3457                           
  3458                           ; BSR set to: 0
  3459  000788  51A6               	movf	printf@flag& (0+255),w,b
  3460  00078A  0BC0               	andlw	192
  3461                           
  3462                           ; Switch size 1, requested type "simple"
  3463                           ; Number of cases is 3, Range of values is 0 to 192
  3464                           ; switch strategies available:
  3465                           ; Name         Instructions Cycles
  3466                           ; simple_byte           10     6 (average)
  3467                           ;	Chosen strategy is simple_byte
  3468  00078C  0A00               	xorlw	0	; case 0
  3469  00078E  B4D8               	btfsc	status,2,c
  3470  000790  D7BF               	goto	l3999
  3471  000792  0A80               	xorlw	128	; case 128
  3472  000794  B4D8               	btfsc	status,2,c
  3473  000796  D7DA               	goto	l4013
  3474  000798  0A40               	xorlw	64	; case 192
  3475  00079A  B4D8               	btfsc	status,2,c
  3476  00079C  D7B9               	goto	l3999
  3477  00079E                     l4031:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  3481  00079E  C0A6  F055         	movff	printf@flag,??_printf
  3482  0007A2  0E03               	movlw	3
  3483  0007A4  1655               	andwf	??_printf^0,f,c
  3484  0007A6  B4D8               	btfsc	status,2,c
  3485  0007A8  D003               	goto	l4035
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;doprnt.c: 1465: (putch('-') );
  3489  0007AA  0E2D               	movlw	45
  3490  0007AC  EC47  F014         	call	_putch
  3491  0007B0                     l4035:
  3492                           
  3493                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  3494  0007B0  C0B6  F0A4         	movff	printf@c,printf@prec
  3495  0007B4  0100               	movlb	0	; () banked
  3496  0007B6  6BA5               	clrf	(printf@prec+1)& (0+255),b
  3497                           
  3498                           ;doprnt.c: 1500: while(prec--) {
  3499  0007B8  D07F               	goto	l4049
  3500  0007BA                     l4037:
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;doprnt.c: 1512: case 0xC0:;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10
      +                           + '0';
  3504  0007BA  C0A4  F055         	movff	printf@prec,??_printf
  3505  0007BE  C0A5  F056         	movff	printf@prec+1,??_printf+1
  3506  0007C2  90D8               	bcf	status,0,c
  3507  0007C4  3655               	rlcf	??_printf^0,f,c
  3508  0007C6  3656               	rlcf	(??_printf+1)^0,f,c
  3509  0007C8  90D8               	bcf	status,0,c
  3510  0007CA  3655               	rlcf	??_printf^0,f,c
  3511  0007CC  3656               	rlcf	(??_printf+1)^0,f,c
  3512  0007CE  0EA5               	movlw	low _dpowers
  3513  0007D0  2455               	addwf	??_printf^0,w,c
  3514  0007D2  6EF6               	movwf	tblptrl,c
  3515  0007D4  0EFE               	movlw	high _dpowers
  3516  0007D6  2056               	addwfc	(??_printf+1)^0,w,c
  3517  0007D8  6EF7               	movwf	tblptrh,c
  3518  0007DA                     	if	0	;There are less than 3 active tblptr bytes
  3519  0007DA                     	endif
  3520  0007DA  0009               	tblrd		*+
  3521  0007DC  CFF5 F005          	movff	tablat,___lldiv@divisor
  3522  0007E0  0009               	tblrd		*+
  3523  0007E2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3524  0007E6  0009               	tblrd		*+
  3525  0007E8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3526  0007EC  000A               	tblrd		*-
  3527  0007EE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3528  0007F2  C0AE  F001         	movff	printf@val,___lldiv@dividend
  3529  0007F6  C0AF  F002         	movff	printf@val+1,___lldiv@dividend+1
  3530  0007FA  C0B0  F003         	movff	printf@val+2,___lldiv@dividend+2
  3531  0007FE  C0B1  F004         	movff	printf@val+3,___lldiv@dividend+3
  3532  000802  EC57  F011         	call	___lldiv	;wreg free
  3533  000806  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3534  00080A  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3535  00080E  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3536  000812  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3537  000816  0E0A               	movlw	10
  3538  000818  6E12               	movwf	___llmod@divisor^0,c
  3539  00081A  0E00               	movlw	0
  3540  00081C  6E13               	movwf	(___llmod@divisor+1)^0,c
  3541  00081E  0E00               	movlw	0
  3542  000820  6E14               	movwf	(___llmod@divisor+2)^0,c
  3543  000822  0E00               	movlw	0
  3544  000824  6E15               	movwf	(___llmod@divisor+3)^0,c
  3545  000826  EC0A  F012         	call	___llmod	;wreg free
  3546  00082A  500E               	movf	?___llmod^0,w,c
  3547  00082C  0F30               	addlw	48
  3548  00082E  0100               	movlb	0	; () banked
  3549  000830  6FB6               	movwf	printf@c& (0+255),b
  3550                           
  3551                           ;doprnt.c: 1517: break;
  3552  000832  D03F               	goto	l4047
  3553  000834                     l4039:
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;doprnt.c: 1525: {;doprnt.c: 1526: unsigned char idx = (val / hexpowers[(unsigned int)pr
      +                          ec]) & 0xF;
  3557  000834  C0AE  F001         	movff	printf@val,___lldiv@dividend
  3558  000838  C0AF  F002         	movff	printf@val+1,___lldiv@dividend+1
  3559  00083C  C0B0  F003         	movff	printf@val+2,___lldiv@dividend+2
  3560  000840  C0B1  F004         	movff	printf@val+3,___lldiv@dividend+3
  3561  000844  C0A4  F055         	movff	printf@prec,??_printf
  3562  000848  C0A5  F056         	movff	printf@prec+1,??_printf+1
  3563  00084C  90D8               	bcf	status,0,c
  3564  00084E  3655               	rlcf	??_printf^0,f,c
  3565  000850  3656               	rlcf	(??_printf+1)^0,f,c
  3566  000852  90D8               	bcf	status,0,c
  3567  000854  3655               	rlcf	??_printf^0,f,c
  3568  000856  3656               	rlcf	(??_printf+1)^0,f,c
  3569  000858  0E85               	movlw	low _hexpowers
  3570  00085A  2455               	addwf	??_printf^0,w,c
  3571  00085C  6EF6               	movwf	tblptrl,c
  3572  00085E  0EFE               	movlw	high _hexpowers
  3573  000860  2056               	addwfc	(??_printf+1)^0,w,c
  3574  000862  6EF7               	movwf	tblptrh,c
  3575  000864                     	if	0	;There are less than 3 active tblptr bytes
  3576  000864                     	endif
  3577  000864  0009               	tblrd		*+
  3578  000866  CFF5 F005          	movff	tablat,___lldiv@divisor
  3579  00086A  0009               	tblrd		*+
  3580  00086C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3581  000870  0009               	tblrd		*+
  3582  000872  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3583  000876  000A               	tblrd		*-
  3584  000878  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3585  00087C  EC57  F011         	call	___lldiv	;wreg free
  3586  000880  5001               	movf	?___lldiv^0,w,c
  3587  000882  0B0F               	andlw	15
  3588  000884  0100               	movlb	0	; () banked
  3589  000886  6FA2               	movwf	printf@idx& (0+255),b
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;doprnt.c: 1530: c = "0123456789ABCDEF"[idx];
  3593  000888  0E60               	movlw	low STR_19
  3594  00088A  25A2               	addwf	printf@idx& (0+255),w,b
  3595  00088C  6EF6               	movwf	tblptrl,c
  3596  00088E  6AF7               	clrf	tblptrh,c
  3597  000890  0EFF               	movlw	high STR_19
  3598  000892  22F7               	addwfc	tblptrh,f,c
  3599  000894                     	if	0	;There are less than 3 active tblptr bytes
  3600  000894                     	endif
  3601  000894  0008               	tblrd		*
  3602  000896  CFF5 F0B6          	movff	tablat,printf@c
  3603                           
  3604                           ;doprnt.c: 1534: };doprnt.c: 1536: break;
  3605  00089A  D00B               	goto	l4047
  3606  00089C                     l4045:
  3607                           
  3608                           ; BSR set to: 0
  3609  00089C  51A6               	movf	printf@flag& (0+255),w,b
  3610  00089E  0BC0               	andlw	192
  3611                           
  3612                           ; Switch size 1, requested type "simple"
  3613                           ; Number of cases is 3, Range of values is 0 to 192
  3614                           ; switch strategies available:
  3615                           ; Name         Instructions Cycles
  3616                           ; simple_byte           10     6 (average)
  3617                           ;	Chosen strategy is simple_byte
  3618  0008A0  0A00               	xorlw	0	; case 0
  3619  0008A2  B4D8               	btfsc	status,2,c
  3620  0008A4  D78A               	goto	l4037
  3621  0008A6  0A80               	xorlw	128	; case 128
  3622  0008A8  B4D8               	btfsc	status,2,c
  3623  0008AA  D7C4               	goto	l4039
  3624  0008AC  0A40               	xorlw	64	; case 192
  3625  0008AE  B4D8               	btfsc	status,2,c
  3626  0008B0  D784               	goto	l4037
  3627  0008B2                     l4047:
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;doprnt.c: 1550: (putch(c) );
  3631  0008B2  51B6               	movf	printf@c& (0+255),w,b
  3632  0008B4  EC47  F014         	call	_putch
  3633  0008B8                     l4049:
  3634  0008B8  0100               	movlb	0	; () banked
  3635  0008BA  07A4               	decf	printf@prec& (0+255),f,b
  3636  0008BC  A0D8               	btfss	status,0,c
  3637  0008BE  07A5               	decf	(printf@prec+1)& (0+255),f,b
  3638  0008C0  29A4               	incf	printf@prec& (0+255),w,b
  3639  0008C2  E1EC               	bnz	l4045
  3640  0008C4  29A5               	incf	(printf@prec+1)& (0+255),w,b
  3641  0008C6  A4D8               	btfss	status,2,c
  3642  0008C8  D7E9               	goto	l4045
  3643  0008CA                     u3670:
  3644  0008CA  C04F  FFF6         	movff	printf@f,tblptrl
  3645  0008CE  C050  FFF7         	movff	printf@f+1,tblptrh
  3646  0008D2  4A4F               	infsnz	printf@f^0,f,c
  3647  0008D4  2A50               	incf	(printf@f+1)^0,f,c
  3648  0008D6                     	if	0	;tblptru may be non-zero
  3649  0008D6                     	endif
  3650  0008D6                     	if	0	;tblptru may be non-zero
  3651  0008D6                     	endif
  3652  0008D6  0008               	tblrd		*
  3653  0008D8  CFF5 F0B6          	movff	tablat,printf@c
  3654  0008DC  0100               	movlb	0	; () banked
  3655  0008DE  51B6               	movf	printf@c& (0+255),w,b
  3656  0008E0  B4D8               	btfsc	status,2,c
  3657  0008E2  0012               	return	
  3658  0008E4  EF19  F000         	goto	l3823
  3659  0008E8                     __end_of_printf:
  3660                           	callstack 0
  3661                           
  3662 ;; *************** function _scale *****************
  3663 ;; Defined at:
  3664 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  scl             1    wreg     char 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  scl             1   47[COMRAM] char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  4   39[COMRAM] char 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 3F/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3678 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;Total ram usage:        9 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    2
  3685 ;; This function calls:
  3686 ;;		___awdiv
  3687 ;;		___awmod
  3688 ;;		___flmul
  3689 ;; This function is called by:
  3690 ;;		_printf
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text6
  3695  0008E8                     __ptext6:
  3696                           	callstack 0
  3697  0008E8                     _scale:
  3698                           	callstack 26
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;incstack = 0
  3702                           ;scale@scl stored from wreg
  3703  0008E8  6E30               	movwf	scale@scl^0,c
  3704                           
  3705                           ;doprnt.c: 436: if(scl < 0) {
  3706  0008EA  AE30               	btfss	scale@scl^0,7,c
  3707  0008EC  D0F3               	goto	l3501
  3708                           
  3709                           ;doprnt.c: 437: scl = -scl;
  3710  0008EE  6C30               	negf	scale@scl^0,c
  3711                           
  3712                           ;doprnt.c: 438: if(scl>=110)
  3713  0008F0  5030               	movf	scale@scl^0,w,c
  3714  0008F2  0A80               	xorlw	128
  3715  0008F4  0F12               	addlw	-238
  3716  0008F6  A0D8               	btfss	status,0,c
  3717  0008F8  D088               	goto	l3491
  3718                           
  3719                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3720  0008FA  0E00               	movlw	0
  3721  0008FC  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  3722  0008FE  0E0A               	movlw	10
  3723  000900  6E09               	movwf	___awdiv@divisor^0,c
  3724  000902  0E00               	movlw	0
  3725  000904  6E04               	movwf	(___awmod@divisor+1)^0,c
  3726  000906  0E64               	movlw	100
  3727  000908  6E03               	movwf	___awmod@divisor^0,c
  3728  00090A  5030               	movf	scale@scl^0,w,c
  3729  00090C  6E01               	movwf	___awmod@dividend^0,c
  3730  00090E  6A02               	clrf	(___awmod@dividend+1)^0,c
  3731  000910  BE01               	btfsc	___awmod@dividend^0,7,c
  3732  000912  0602               	decf	(___awmod@dividend+1)^0,f,c
  3733  000914  ECD2  F011         	call	___awmod	;wreg free
  3734  000918  C001  F007         	movff	?___awmod,___awdiv@dividend
  3735  00091C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3736  000920  EC15  F011         	call	___awdiv	;wreg free
  3737  000924  0E09               	movlw	9
  3738  000926  2607               	addwf	?___awdiv^0,f,c
  3739  000928  5007               	movf	?___awdiv^0,w,c
  3740  00092A  0D04               	mullw	4
  3741  00092C  0E51               	movlw	low __npowers_
  3742  00092E  24F3               	addwf	243,w,c
  3743  000930  6EF6               	movwf	tblptrl,c
  3744  000932  0EFE               	movlw	high __npowers_
  3745  000934  20F4               	addwfc	244,w,c
  3746  000936  6EF7               	movwf	tblptrh,c
  3747  000938                     	if	0	;There are less than 3 active tblptr bytes
  3748  000938                     	endif
  3749  000938  0009               	tblrd		*+
  3750  00093A  CFF5 F013          	movff	tablat,___flmul@a
  3751  00093E  0009               	tblrd		*+
  3752  000940  CFF5 F014          	movff	tablat,___flmul@a+1
  3753  000944  0009               	tblrd		*+
  3754  000946  CFF5 F015          	movff	tablat,___flmul@a+2
  3755  00094A  000A               	tblrd		*-
  3756  00094C  CFF5 F016          	movff	tablat,___flmul@a+3
  3757  000950  0E00               	movlw	0
  3758  000952  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  3759  000954  0E64               	movlw	100
  3760  000956  6E09               	movwf	___awdiv@divisor^0,c
  3761  000958  5030               	movf	scale@scl^0,w,c
  3762  00095A  6E07               	movwf	___awdiv@dividend^0,c
  3763  00095C  6A08               	clrf	(___awdiv@dividend+1)^0,c
  3764  00095E  BE07               	btfsc	___awdiv@dividend^0,7,c
  3765  000960  0608               	decf	(___awdiv@dividend+1)^0,f,c
  3766  000962  EC15  F011         	call	___awdiv	;wreg free
  3767  000966  0E12               	movlw	18
  3768  000968  2607               	addwf	?___awdiv^0,f,c
  3769  00096A  5007               	movf	?___awdiv^0,w,c
  3770  00096C  0D04               	mullw	4
  3771  00096E  0E51               	movlw	low __npowers_
  3772  000970  24F3               	addwf	243,w,c
  3773  000972  6EF6               	movwf	tblptrl,c
  3774  000974  0EFE               	movlw	high __npowers_
  3775  000976  20F4               	addwfc	244,w,c
  3776  000978  6EF7               	movwf	tblptrh,c
  3777  00097A                     	if	0	;There are less than 3 active tblptr bytes
  3778  00097A                     	endif
  3779  00097A  0009               	tblrd		*+
  3780  00097C  CFF5 F00F          	movff	tablat,___flmul@b
  3781  000980  0009               	tblrd		*+
  3782  000982  CFF5 F010          	movff	tablat,___flmul@b+1
  3783  000986  0009               	tblrd		*+
  3784  000988  CFF5 F011          	movff	tablat,___flmul@b+2
  3785  00098C  000A               	tblrd		*-
  3786  00098E  CFF5 F012          	movff	tablat,___flmul@b+3
  3787  000992  EC5C  F006         	call	___flmul	;wreg free
  3788  000996  C00F  F02C         	movff	?___flmul,_scale$2400
  3789  00099A  C010  F02D         	movff	?___flmul+1,_scale$2400+1
  3790  00099E  C011  F02E         	movff	?___flmul+2,_scale$2400+2
  3791  0009A2  C012  F02F         	movff	?___flmul+3,_scale$2400+3
  3792                           
  3793                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3794  0009A6  C02C  F00F         	movff	_scale$2400,___flmul@b
  3795  0009AA  C02D  F010         	movff	_scale$2400+1,___flmul@b+1
  3796  0009AE  C02E  F011         	movff	_scale$2400+2,___flmul@b+2
  3797  0009B2  C02F  F012         	movff	_scale$2400+3,___flmul@b+3
  3798  0009B6  0E00               	movlw	0
  3799  0009B8  6E04               	movwf	(___awmod@divisor+1)^0,c
  3800  0009BA  0E0A               	movlw	10
  3801  0009BC  6E03               	movwf	___awmod@divisor^0,c
  3802  0009BE  5030               	movf	scale@scl^0,w,c
  3803  0009C0  6E01               	movwf	___awmod@dividend^0,c
  3804  0009C2  6A02               	clrf	(___awmod@dividend+1)^0,c
  3805  0009C4  BE01               	btfsc	___awmod@dividend^0,7,c
  3806  0009C6  0602               	decf	(___awmod@dividend+1)^0,f,c
  3807  0009C8  ECD2  F011         	call	___awmod	;wreg free
  3808  0009CC  5001               	movf	?___awmod^0,w,c
  3809  0009CE  0D04               	mullw	4
  3810  0009D0  0E51               	movlw	low __npowers_
  3811  0009D2  24F3               	addwf	243,w,c
  3812  0009D4  6EF6               	movwf	tblptrl,c
  3813  0009D6  0EFE               	movlw	high __npowers_
  3814  0009D8  20F4               	addwfc	244,w,c
  3815  0009DA  6EF7               	movwf	tblptrh,c
  3816  0009DC                     	if	0	;There are less than 3 active tblptr bytes
  3817  0009DC                     	endif
  3818  0009DC  0009               	tblrd		*+
  3819  0009DE  CFF5 F013          	movff	tablat,___flmul@a
  3820  0009E2  0009               	tblrd		*+
  3821  0009E4  CFF5 F014          	movff	tablat,___flmul@a+1
  3822  0009E8  0009               	tblrd		*+
  3823  0009EA  CFF5 F015          	movff	tablat,___flmul@a+2
  3824  0009EE  000A               	tblrd		*-
  3825  0009F0  CFF5 F016          	movff	tablat,___flmul@a+3
  3826  0009F4  EC5C  F006         	call	___flmul	;wreg free
  3827  0009F8  C00F  F028         	movff	?___flmul,?_scale
  3828  0009FC  C010  F029         	movff	?___flmul+1,?_scale+1
  3829  000A00  C011  F02A         	movff	?___flmul+2,?_scale+2
  3830  000A04  C012  F02B         	movff	?___flmul+3,?_scale+3
  3831  000A08  0012               	return	
  3832  000A0A                     l3491:
  3833                           
  3834                           ;doprnt.c: 440: else if(scl > 10)
  3835  000A0A  5030               	movf	scale@scl^0,w,c
  3836  000A0C  0A80               	xorlw	128
  3837  000A0E  0F75               	addlw	-139
  3838  000A10  A0D8               	btfss	status,0,c
  3839  000A12  D04B               	goto	l3497
  3840                           
  3841                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  3842  000A14  0E00               	movlw	0
  3843  000A16  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  3844  000A18  0E0A               	movlw	10
  3845  000A1A  6E09               	movwf	___awdiv@divisor^0,c
  3846  000A1C  5030               	movf	scale@scl^0,w,c
  3847  000A1E  6E07               	movwf	___awdiv@dividend^0,c
  3848  000A20  6A08               	clrf	(___awdiv@dividend+1)^0,c
  3849  000A22  BE07               	btfsc	___awdiv@dividend^0,7,c
  3850  000A24  0608               	decf	(___awdiv@dividend+1)^0,f,c
  3851  000A26  EC15  F011         	call	___awdiv	;wreg free
  3852  000A2A  0E09               	movlw	9
  3853  000A2C  2607               	addwf	?___awdiv^0,f,c
  3854  000A2E  5007               	movf	?___awdiv^0,w,c
  3855  000A30  0D04               	mullw	4
  3856  000A32  0E51               	movlw	low __npowers_
  3857  000A34  24F3               	addwf	243,w,c
  3858  000A36  6EF6               	movwf	tblptrl,c
  3859  000A38  0EFE               	movlw	high __npowers_
  3860  000A3A  20F4               	addwfc	244,w,c
  3861  000A3C  6EF7               	movwf	tblptrh,c
  3862  000A3E                     	if	0	;There are less than 3 active tblptr bytes
  3863  000A3E                     	endif
  3864  000A3E  0009               	tblrd		*+
  3865  000A40  CFF5 F00F          	movff	tablat,___flmul@b
  3866  000A44  0009               	tblrd		*+
  3867  000A46  CFF5 F010          	movff	tablat,___flmul@b+1
  3868  000A4A  0009               	tblrd		*+
  3869  000A4C  CFF5 F011          	movff	tablat,___flmul@b+2
  3870  000A50  000A               	tblrd		*-
  3871  000A52  CFF5 F012          	movff	tablat,___flmul@b+3
  3872  000A56  0E00               	movlw	0
  3873  000A58  6E04               	movwf	(___awmod@divisor+1)^0,c
  3874  000A5A  0E0A               	movlw	10
  3875  000A5C  6E03               	movwf	___awmod@divisor^0,c
  3876  000A5E  5030               	movf	scale@scl^0,w,c
  3877  000A60  6E01               	movwf	___awmod@dividend^0,c
  3878  000A62  6A02               	clrf	(___awmod@dividend+1)^0,c
  3879  000A64  BE01               	btfsc	___awmod@dividend^0,7,c
  3880  000A66  0602               	decf	(___awmod@dividend+1)^0,f,c
  3881  000A68  ECD2  F011         	call	___awmod	;wreg free
  3882  000A6C  5001               	movf	?___awmod^0,w,c
  3883  000A6E  0D04               	mullw	4
  3884  000A70  0E51               	movlw	low __npowers_
  3885  000A72  24F3               	addwf	243,w,c
  3886  000A74  6EF6               	movwf	tblptrl,c
  3887  000A76  0EFE               	movlw	high __npowers_
  3888  000A78  20F4               	addwfc	244,w,c
  3889  000A7A  6EF7               	movwf	tblptrh,c
  3890  000A7C                     	if	0	;There are less than 3 active tblptr bytes
  3891  000A7C                     	endif
  3892  000A7C  0009               	tblrd		*+
  3893  000A7E  CFF5 F013          	movff	tablat,___flmul@a
  3894  000A82  0009               	tblrd		*+
  3895  000A84  CFF5 F014          	movff	tablat,___flmul@a+1
  3896  000A88  0009               	tblrd		*+
  3897  000A8A  CFF5 F015          	movff	tablat,___flmul@a+2
  3898  000A8E  000A               	tblrd		*-
  3899  000A90  CFF5 F016          	movff	tablat,___flmul@a+3
  3900  000A94  EC5C  F006         	call	___flmul	;wreg free
  3901  000A98  C00F  F028         	movff	?___flmul,?_scale
  3902  000A9C  C010  F029         	movff	?___flmul+1,?_scale+1
  3903  000AA0  C011  F02A         	movff	?___flmul+2,?_scale+2
  3904  000AA4  C012  F02B         	movff	?___flmul+3,?_scale+3
  3905  000AA8  0012               	return	
  3906  000AAA                     l3497:
  3907                           
  3908                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  3909  000AAA  5030               	movf	scale@scl^0,w,c
  3910  000AAC  0D04               	mullw	4
  3911  000AAE  0E51               	movlw	low __npowers_
  3912  000AB0  24F3               	addwf	243,w,c
  3913  000AB2  6EF6               	movwf	tblptrl,c
  3914  000AB4  0EFE               	movlw	high __npowers_
  3915  000AB6  20F4               	addwfc	244,w,c
  3916  000AB8  6EF7               	movwf	tblptrh,c
  3917  000ABA                     	if	0	;There are less than 3 active tblptr bytes
  3918  000ABA                     	endif
  3919  000ABA  0009               	tblrd		*+
  3920  000ABC  CFF5 F028          	movff	tablat,?_scale
  3921  000AC0  0009               	tblrd		*+
  3922  000AC2  CFF5 F029          	movff	tablat,?_scale+1
  3923  000AC6  0009               	tblrd		*+
  3924  000AC8  CFF5 F02A          	movff	tablat,?_scale+2
  3925  000ACC  000A               	tblrd		*-
  3926  000ACE  CFF5 F02B          	movff	tablat,?_scale+3
  3927  000AD2  0012               	return	
  3928  000AD4                     l3501:
  3929                           
  3930                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  3931  000AD4  5030               	movf	scale@scl^0,w,c
  3932  000AD6  0A80               	xorlw	128
  3933  000AD8  0F12               	addlw	-238
  3934  000ADA  A0D8               	btfss	status,0,c
  3935  000ADC  D088               	goto	l3509
  3936                           
  3937                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3938  000ADE  0E00               	movlw	0
  3939  000AE0  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  3940  000AE2  0E0A               	movlw	10
  3941  000AE4  6E09               	movwf	___awdiv@divisor^0,c
  3942  000AE6  0E00               	movlw	0
  3943  000AE8  6E04               	movwf	(___awmod@divisor+1)^0,c
  3944  000AEA  0E64               	movlw	100
  3945  000AEC  6E03               	movwf	___awmod@divisor^0,c
  3946  000AEE  5030               	movf	scale@scl^0,w,c
  3947  000AF0  6E01               	movwf	___awmod@dividend^0,c
  3948  000AF2  6A02               	clrf	(___awmod@dividend+1)^0,c
  3949  000AF4  BE01               	btfsc	___awmod@dividend^0,7,c
  3950  000AF6  0602               	decf	(___awmod@dividend+1)^0,f,c
  3951  000AF8  ECD2  F011         	call	___awmod	;wreg free
  3952  000AFC  C001  F007         	movff	?___awmod,___awdiv@dividend
  3953  000B00  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3954  000B04  EC15  F011         	call	___awdiv	;wreg free
  3955  000B08  0E09               	movlw	9
  3956  000B0A  2607               	addwf	?___awdiv^0,f,c
  3957  000B0C  5007               	movf	?___awdiv^0,w,c
  3958  000B0E  0D04               	mullw	4
  3959  000B10  0E1D               	movlw	low __powers_
  3960  000B12  24F3               	addwf	243,w,c
  3961  000B14  6EF6               	movwf	tblptrl,c
  3962  000B16  0EFE               	movlw	high __powers_
  3963  000B18  20F4               	addwfc	244,w,c
  3964  000B1A  6EF7               	movwf	tblptrh,c
  3965  000B1C                     	if	0	;There are less than 3 active tblptr bytes
  3966  000B1C                     	endif
  3967  000B1C  0009               	tblrd		*+
  3968  000B1E  CFF5 F013          	movff	tablat,___flmul@a
  3969  000B22  0009               	tblrd		*+
  3970  000B24  CFF5 F014          	movff	tablat,___flmul@a+1
  3971  000B28  0009               	tblrd		*+
  3972  000B2A  CFF5 F015          	movff	tablat,___flmul@a+2
  3973  000B2E  000A               	tblrd		*-
  3974  000B30  CFF5 F016          	movff	tablat,___flmul@a+3
  3975  000B34  0E00               	movlw	0
  3976  000B36  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  3977  000B38  0E64               	movlw	100
  3978  000B3A  6E09               	movwf	___awdiv@divisor^0,c
  3979  000B3C  5030               	movf	scale@scl^0,w,c
  3980  000B3E  6E07               	movwf	___awdiv@dividend^0,c
  3981  000B40  6A08               	clrf	(___awdiv@dividend+1)^0,c
  3982  000B42  BE07               	btfsc	___awdiv@dividend^0,7,c
  3983  000B44  0608               	decf	(___awdiv@dividend+1)^0,f,c
  3984  000B46  EC15  F011         	call	___awdiv	;wreg free
  3985  000B4A  0E12               	movlw	18
  3986  000B4C  2607               	addwf	?___awdiv^0,f,c
  3987  000B4E  5007               	movf	?___awdiv^0,w,c
  3988  000B50  0D04               	mullw	4
  3989  000B52  0E1D               	movlw	low __powers_
  3990  000B54  24F3               	addwf	243,w,c
  3991  000B56  6EF6               	movwf	tblptrl,c
  3992  000B58  0EFE               	movlw	high __powers_
  3993  000B5A  20F4               	addwfc	244,w,c
  3994  000B5C  6EF7               	movwf	tblptrh,c
  3995  000B5E                     	if	0	;There are less than 3 active tblptr bytes
  3996  000B5E                     	endif
  3997  000B5E  0009               	tblrd		*+
  3998  000B60  CFF5 F00F          	movff	tablat,___flmul@b
  3999  000B64  0009               	tblrd		*+
  4000  000B66  CFF5 F010          	movff	tablat,___flmul@b+1
  4001  000B6A  0009               	tblrd		*+
  4002  000B6C  CFF5 F011          	movff	tablat,___flmul@b+2
  4003  000B70  000A               	tblrd		*-
  4004  000B72  CFF5 F012          	movff	tablat,___flmul@b+3
  4005  000B76  EC5C  F006         	call	___flmul	;wreg free
  4006  000B7A  C00F  F02C         	movff	?___flmul,_scale$2400
  4007  000B7E  C010  F02D         	movff	?___flmul+1,_scale$2400+1
  4008  000B82  C011  F02E         	movff	?___flmul+2,_scale$2400+2
  4009  000B86  C012  F02F         	movff	?___flmul+3,_scale$2400+3
  4010                           
  4011                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  4012  000B8A  C02C  F00F         	movff	_scale$2400,___flmul@b
  4013  000B8E  C02D  F010         	movff	_scale$2400+1,___flmul@b+1
  4014  000B92  C02E  F011         	movff	_scale$2400+2,___flmul@b+2
  4015  000B96  C02F  F012         	movff	_scale$2400+3,___flmul@b+3
  4016  000B9A  0E00               	movlw	0
  4017  000B9C  6E04               	movwf	(___awmod@divisor+1)^0,c
  4018  000B9E  0E0A               	movlw	10
  4019  000BA0  6E03               	movwf	___awmod@divisor^0,c
  4020  000BA2  5030               	movf	scale@scl^0,w,c
  4021  000BA4  6E01               	movwf	___awmod@dividend^0,c
  4022  000BA6  6A02               	clrf	(___awmod@dividend+1)^0,c
  4023  000BA8  BE01               	btfsc	___awmod@dividend^0,7,c
  4024  000BAA  0602               	decf	(___awmod@dividend+1)^0,f,c
  4025  000BAC  ECD2  F011         	call	___awmod	;wreg free
  4026  000BB0  5001               	movf	?___awmod^0,w,c
  4027  000BB2  0D04               	mullw	4
  4028  000BB4  0E1D               	movlw	low __powers_
  4029  000BB6  24F3               	addwf	243,w,c
  4030  000BB8  6EF6               	movwf	tblptrl,c
  4031  000BBA  0EFE               	movlw	high __powers_
  4032  000BBC  20F4               	addwfc	244,w,c
  4033  000BBE  6EF7               	movwf	tblptrh,c
  4034  000BC0                     	if	0	;There are less than 3 active tblptr bytes
  4035  000BC0                     	endif
  4036  000BC0  0009               	tblrd		*+
  4037  000BC2  CFF5 F013          	movff	tablat,___flmul@a
  4038  000BC6  0009               	tblrd		*+
  4039  000BC8  CFF5 F014          	movff	tablat,___flmul@a+1
  4040  000BCC  0009               	tblrd		*+
  4041  000BCE  CFF5 F015          	movff	tablat,___flmul@a+2
  4042  000BD2  000A               	tblrd		*-
  4043  000BD4  CFF5 F016          	movff	tablat,___flmul@a+3
  4044  000BD8  EC5C  F006         	call	___flmul	;wreg free
  4045  000BDC  C00F  F028         	movff	?___flmul,?_scale
  4046  000BE0  C010  F029         	movff	?___flmul+1,?_scale+1
  4047  000BE4  C011  F02A         	movff	?___flmul+2,?_scale+2
  4048  000BE8  C012  F02B         	movff	?___flmul+3,?_scale+3
  4049  000BEC  0012               	return	
  4050  000BEE                     l3509:
  4051                           
  4052                           ;doprnt.c: 446: else if(scl > 10)
  4053  000BEE  5030               	movf	scale@scl^0,w,c
  4054  000BF0  0A80               	xorlw	128
  4055  000BF2  0F75               	addlw	-139
  4056  000BF4  A0D8               	btfss	status,0,c
  4057  000BF6  D04B               	goto	l3515
  4058                           
  4059                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  4060  000BF8  0E00               	movlw	0
  4061  000BFA  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  4062  000BFC  0E0A               	movlw	10
  4063  000BFE  6E09               	movwf	___awdiv@divisor^0,c
  4064  000C00  5030               	movf	scale@scl^0,w,c
  4065  000C02  6E07               	movwf	___awdiv@dividend^0,c
  4066  000C04  6A08               	clrf	(___awdiv@dividend+1)^0,c
  4067  000C06  BE07               	btfsc	___awdiv@dividend^0,7,c
  4068  000C08  0608               	decf	(___awdiv@dividend+1)^0,f,c
  4069  000C0A  EC15  F011         	call	___awdiv	;wreg free
  4070  000C0E  0E09               	movlw	9
  4071  000C10  2607               	addwf	?___awdiv^0,f,c
  4072  000C12  5007               	movf	?___awdiv^0,w,c
  4073  000C14  0D04               	mullw	4
  4074  000C16  0E1D               	movlw	low __powers_
  4075  000C18  24F3               	addwf	243,w,c
  4076  000C1A  6EF6               	movwf	tblptrl,c
  4077  000C1C  0EFE               	movlw	high __powers_
  4078  000C1E  20F4               	addwfc	244,w,c
  4079  000C20  6EF7               	movwf	tblptrh,c
  4080  000C22                     	if	0	;There are less than 3 active tblptr bytes
  4081  000C22                     	endif
  4082  000C22  0009               	tblrd		*+
  4083  000C24  CFF5 F00F          	movff	tablat,___flmul@b
  4084  000C28  0009               	tblrd		*+
  4085  000C2A  CFF5 F010          	movff	tablat,___flmul@b+1
  4086  000C2E  0009               	tblrd		*+
  4087  000C30  CFF5 F011          	movff	tablat,___flmul@b+2
  4088  000C34  000A               	tblrd		*-
  4089  000C36  CFF5 F012          	movff	tablat,___flmul@b+3
  4090  000C3A  0E00               	movlw	0
  4091  000C3C  6E04               	movwf	(___awmod@divisor+1)^0,c
  4092  000C3E  0E0A               	movlw	10
  4093  000C40  6E03               	movwf	___awmod@divisor^0,c
  4094  000C42  5030               	movf	scale@scl^0,w,c
  4095  000C44  6E01               	movwf	___awmod@dividend^0,c
  4096  000C46  6A02               	clrf	(___awmod@dividend+1)^0,c
  4097  000C48  BE01               	btfsc	___awmod@dividend^0,7,c
  4098  000C4A  0602               	decf	(___awmod@dividend+1)^0,f,c
  4099  000C4C  ECD2  F011         	call	___awmod	;wreg free
  4100  000C50  5001               	movf	?___awmod^0,w,c
  4101  000C52  0D04               	mullw	4
  4102  000C54  0E1D               	movlw	low __powers_
  4103  000C56  24F3               	addwf	243,w,c
  4104  000C58  6EF6               	movwf	tblptrl,c
  4105  000C5A  0EFE               	movlw	high __powers_
  4106  000C5C  20F4               	addwfc	244,w,c
  4107  000C5E  6EF7               	movwf	tblptrh,c
  4108  000C60                     	if	0	;There are less than 3 active tblptr bytes
  4109  000C60                     	endif
  4110  000C60  0009               	tblrd		*+
  4111  000C62  CFF5 F013          	movff	tablat,___flmul@a
  4112  000C66  0009               	tblrd		*+
  4113  000C68  CFF5 F014          	movff	tablat,___flmul@a+1
  4114  000C6C  0009               	tblrd		*+
  4115  000C6E  CFF5 F015          	movff	tablat,___flmul@a+2
  4116  000C72  000A               	tblrd		*-
  4117  000C74  CFF5 F016          	movff	tablat,___flmul@a+3
  4118  000C78  EC5C  F006         	call	___flmul	;wreg free
  4119  000C7C  C00F  F028         	movff	?___flmul,?_scale
  4120  000C80  C010  F029         	movff	?___flmul+1,?_scale+1
  4121  000C84  C011  F02A         	movff	?___flmul+2,?_scale+2
  4122  000C88  C012  F02B         	movff	?___flmul+3,?_scale+3
  4123  000C8C  0012               	return	
  4124  000C8E                     l3515:
  4125                           
  4126                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  4127  000C8E  5030               	movf	scale@scl^0,w,c
  4128  000C90  0D04               	mullw	4
  4129  000C92  0E1D               	movlw	low __powers_
  4130  000C94  24F3               	addwf	243,w,c
  4131  000C96  6EF6               	movwf	tblptrl,c
  4132  000C98  0EFE               	movlw	high __powers_
  4133  000C9A  20F4               	addwfc	244,w,c
  4134  000C9C  6EF7               	movwf	tblptrh,c
  4135  000C9E                     	if	0	;There are less than 3 active tblptr bytes
  4136  000C9E                     	endif
  4137  000C9E  0009               	tblrd		*+
  4138  000CA0  CFF5 F028          	movff	tablat,?_scale
  4139  000CA4  0009               	tblrd		*+
  4140  000CA6  CFF5 F029          	movff	tablat,?_scale+1
  4141  000CAA  0009               	tblrd		*+
  4142  000CAC  CFF5 F02A          	movff	tablat,?_scale+2
  4143  000CB0  000A               	tblrd		*-
  4144  000CB2  CFF5 F02B          	movff	tablat,?_scale+3
  4145  000CB6  0012               	return		;funcret
  4146  000CB8                     __end_of_scale:
  4147                           	callstack 0
  4148                           
  4149 ;; *************** function ___awmod *****************
  4150 ;; Defined at:
  4151 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  dividend        2    0[COMRAM] int 
  4154 ;;  divisor         2    2[COMRAM] int 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;  sign            1    5[COMRAM] unsigned char 
  4157 ;;  counter         1    4[COMRAM] unsigned char 
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  2    0[COMRAM] int 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4167 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;Total ram usage:        6 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    1
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_scale
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text7
  4182  0023A4                     __ptext7:
  4183                           	callstack 0
  4184  0023A4                     ___awmod:
  4185                           	callstack 26
  4186                           
  4187                           ;incstack = 0
  4188  0023A4  0E00               	movlw	0
  4189  0023A6  6E06               	movwf	___awmod@sign^0,c
  4190  0023A8  AE02               	btfss	(___awmod@dividend+1)^0,7,c
  4191  0023AA  D006               	goto	l3383
  4192  0023AC  6C01               	negf	___awmod@dividend^0,c
  4193  0023AE  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4194  0023B0  B0D8               	btfsc	status,0,c
  4195  0023B2  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4196  0023B4  0E01               	movlw	1
  4197  0023B6  6E06               	movwf	___awmod@sign^0,c
  4198  0023B8                     l3383:
  4199  0023B8  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  4200  0023BA  D004               	goto	l3387
  4201  0023BC  6C03               	negf	___awmod@divisor^0,c
  4202  0023BE  1E04               	comf	(___awmod@divisor+1)^0,f,c
  4203  0023C0  B0D8               	btfsc	status,0,c
  4204  0023C2  2A04               	incf	(___awmod@divisor+1)^0,f,c
  4205  0023C4                     l3387:
  4206  0023C4  5003               	movf	___awmod@divisor^0,w,c
  4207  0023C6  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  4208  0023C8  B4D8               	btfsc	status,2,c
  4209  0023CA  D018               	goto	l3403
  4210  0023CC  0E01               	movlw	1
  4211  0023CE  6E05               	movwf	___awmod@counter^0,c
  4212  0023D0  D004               	goto	l3393
  4213  0023D2                     l3391:
  4214  0023D2  90D8               	bcf	status,0,c
  4215  0023D4  3603               	rlcf	___awmod@divisor^0,f,c
  4216  0023D6  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  4217  0023D8  2A05               	incf	___awmod@counter^0,f,c
  4218  0023DA                     l3393:
  4219  0023DA  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  4220  0023DC  D7FA               	goto	l3391
  4221  0023DE                     u2730:
  4222  0023DE  5003               	movf	___awmod@divisor^0,w,c
  4223  0023E0  5C01               	subwf	___awmod@dividend^0,w,c
  4224  0023E2  5004               	movf	(___awmod@divisor+1)^0,w,c
  4225  0023E4  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  4226  0023E6  A0D8               	btfss	status,0,c
  4227  0023E8  D004               	goto	l3399
  4228  0023EA  5003               	movf	___awmod@divisor^0,w,c
  4229  0023EC  5E01               	subwf	___awmod@dividend^0,f,c
  4230  0023EE  5004               	movf	(___awmod@divisor+1)^0,w,c
  4231  0023F0  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  4232  0023F2                     l3399:
  4233  0023F2  90D8               	bcf	status,0,c
  4234  0023F4  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  4235  0023F6  3203               	rrcf	___awmod@divisor^0,f,c
  4236  0023F8  2E05               	decfsz	___awmod@counter^0,f,c
  4237  0023FA  D7F1               	goto	u2730
  4238  0023FC                     l3403:
  4239  0023FC  5006               	movf	___awmod@sign^0,w,c
  4240  0023FE  B4D8               	btfsc	status,2,c
  4241  002400  D004               	goto	l3407
  4242  002402  6C01               	negf	___awmod@dividend^0,c
  4243  002404  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4244  002406  B0D8               	btfsc	status,0,c
  4245  002408  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4246  00240A                     l3407:
  4247  00240A  C001  F001         	movff	___awmod@dividend,?___awmod
  4248  00240E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4249  002412  0012               	return		;funcret
  4250  002414                     __end_of___awmod:
  4251                           	callstack 0
  4252                           
  4253 ;; *************** function ___awdiv *****************
  4254 ;; Defined at:
  4255 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  dividend        2    6[COMRAM] int 
  4258 ;;  divisor         2    8[COMRAM] int 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  quotient        2   12[COMRAM] int 
  4261 ;;  sign            1   11[COMRAM] unsigned char 
  4262 ;;  counter         1   10[COMRAM] unsigned char 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  2    6[COMRAM] int 
  4265 ;; Registers used:
  4266 ;;		wreg, status,2, status,0
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;Total ram usage:        8 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    1
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_scale
  4283 ;;		_printf
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text8
  4288  00222A                     __ptext8:
  4289                           	callstack 0
  4290  00222A                     ___awdiv:
  4291                           	callstack 26
  4292                           
  4293                           ;incstack = 0
  4294  00222A  0E00               	movlw	0
  4295  00222C  6E0C               	movwf	___awdiv@sign^0,c
  4296  00222E  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  4297  002230  D006               	goto	l3339
  4298  002232  6C09               	negf	___awdiv@divisor^0,c
  4299  002234  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  4300  002236  B0D8               	btfsc	status,0,c
  4301  002238  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  4302  00223A  0E01               	movlw	1
  4303  00223C  6E0C               	movwf	___awdiv@sign^0,c
  4304  00223E                     l3339:
  4305  00223E  AE08               	btfss	(___awdiv@dividend+1)^0,7,c
  4306  002240  D006               	goto	l3345
  4307  002242  6C07               	negf	___awdiv@dividend^0,c
  4308  002244  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  4309  002246  B0D8               	btfsc	status,0,c
  4310  002248  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  4311  00224A  0E01               	movlw	1
  4312  00224C  1A0C               	xorwf	___awdiv@sign^0,f,c
  4313  00224E                     l3345:
  4314  00224E  0E00               	movlw	0
  4315  002250  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  4316  002252  0E00               	movlw	0
  4317  002254  6E0D               	movwf	___awdiv@quotient^0,c
  4318  002256  5009               	movf	___awdiv@divisor^0,w,c
  4319  002258  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  4320  00225A  B4D8               	btfsc	status,2,c
  4321  00225C  D01C               	goto	l3367
  4322  00225E  0E01               	movlw	1
  4323  002260  6E0B               	movwf	___awdiv@counter^0,c
  4324  002262  D004               	goto	l3353
  4325  002264                     l3351:
  4326  002264  90D8               	bcf	status,0,c
  4327  002266  3609               	rlcf	___awdiv@divisor^0,f,c
  4328  002268  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  4329  00226A  2A0B               	incf	___awdiv@counter^0,f,c
  4330  00226C                     l3353:
  4331  00226C  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  4332  00226E  D7FA               	goto	l3351
  4333  002270                     u2670:
  4334  002270  90D8               	bcf	status,0,c
  4335  002272  360D               	rlcf	___awdiv@quotient^0,f,c
  4336  002274  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  4337  002276  5009               	movf	___awdiv@divisor^0,w,c
  4338  002278  5C07               	subwf	___awdiv@dividend^0,w,c
  4339  00227A  500A               	movf	(___awdiv@divisor+1)^0,w,c
  4340  00227C  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  4341  00227E  A0D8               	btfss	status,0,c
  4342  002280  D005               	goto	l3363
  4343  002282  5009               	movf	___awdiv@divisor^0,w,c
  4344  002284  5E07               	subwf	___awdiv@dividend^0,f,c
  4345  002286  500A               	movf	(___awdiv@divisor+1)^0,w,c
  4346  002288  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  4347  00228A  800D               	bsf	___awdiv@quotient^0,0,c
  4348  00228C                     l3363:
  4349  00228C  90D8               	bcf	status,0,c
  4350  00228E  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  4351  002290  3209               	rrcf	___awdiv@divisor^0,f,c
  4352  002292  2E0B               	decfsz	___awdiv@counter^0,f,c
  4353  002294  D7ED               	goto	u2670
  4354  002296                     l3367:
  4355  002296  500C               	movf	___awdiv@sign^0,w,c
  4356  002298  B4D8               	btfsc	status,2,c
  4357  00229A  D004               	goto	l3371
  4358  00229C  6C0D               	negf	___awdiv@quotient^0,c
  4359  00229E  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  4360  0022A0  B0D8               	btfsc	status,0,c
  4361  0022A2  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  4362  0022A4                     l3371:
  4363  0022A4  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4364  0022A8  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4365  0022AC  0012               	return		;funcret
  4366  0022AE                     __end_of___awdiv:
  4367                           	callstack 0
  4368                           
  4369 ;; *************** function _putch *****************
  4370 ;; Defined at:
  4371 ;;		line 81 in file "usart2.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;  data            1    wreg     unsigned char 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  data            1    0[COMRAM] unsigned char 
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;Total ram usage:        1 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    1
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_printf
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text9
  4400  00288E                     __ptext9:
  4401                           	callstack 0
  4402  00288E                     _putch:
  4403                           	callstack 27
  4404                           
  4405                           ;incstack = 0
  4406                           ;putch@data stored from wreg
  4407  00288E  6E01               	movwf	putch@data^0,c
  4408  002890                     
  4409                           ;usart2.c: 82: while(!TRMT2){
  4410  002890  A272               	btfss	3954,1,c	;volatile
  4411  002892  D7FE               	goto	l3459
  4412                           
  4413                           ;usart2.c: 83: };usart2.c: 84: TXREG2 = data;
  4414  002894  C001  FF73         	movff	putch@data,3955	;volatile
  4415  002898                     l339:
  4416  002898  B272               	btfsc	3954,1,c	;volatile
  4417  00289A  0012               	return	
  4418  00289C  D7FD               	goto	l339
  4419  00289E                     __end_of_putch:
  4420                           	callstack 0
  4421                           
  4422 ;; *************** function _fround *****************
  4423 ;; Defined at:
  4424 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  prec            1    wreg     unsigned char 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  prec            1   53[COMRAM] unsigned char 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  4   39[COMRAM] unsigned char 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;Total ram usage:       15 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    2
  4445 ;; This function calls:
  4446 ;;		___flmul
  4447 ;;		___lbdiv
  4448 ;;		___lbmod
  4449 ;; This function is called by:
  4450 ;;		_printf
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text10
  4455  001578                     __ptext10:
  4456                           	callstack 0
  4457  001578                     _fround:
  4458                           	callstack 26
  4459                           
  4460                           ;incstack = 0
  4461                           ;fround@prec stored from wreg
  4462  001578  6E36               	movwf	fround@prec^0,c
  4463                           
  4464                           ;doprnt.c: 421: if(prec>=110)
  4465  00157A  0E6D               	movlw	109
  4466  00157C  6436               	cpfsgt	fround@prec^0,c
  4467  00157E  D0A0               	goto	l3471
  4468                           
  4469                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4470  001580  0E00               	movlw	0
  4471  001582  6E13               	movwf	___flmul@a^0,c
  4472  001584  0E00               	movlw	0
  4473  001586  6E14               	movwf	(___flmul@a+1)^0,c
  4474  001588  0E00               	movlw	0
  4475  00158A  6E15               	movwf	(___flmul@a+2)^0,c
  4476  00158C  0E3F               	movlw	63
  4477  00158E  6E16               	movwf	(___flmul@a+3)^0,c
  4478  001590  0E64               	movlw	100
  4479  001592  6E05               	movwf	___lbdiv@divisor^0,c
  4480  001594  5036               	movf	fround@prec^0,w,c
  4481  001596  EC49  F013         	call	___lbdiv
  4482  00159A  6E2C               	movwf	??_fround^0,c
  4483  00159C  6A2D               	clrf	(??_fround+1)^0,c
  4484  00159E  90D8               	bcf	status,0,c
  4485  0015A0  362C               	rlcf	??_fround^0,f,c
  4486  0015A2  362D               	rlcf	(??_fround+1)^0,f,c
  4487  0015A4  90D8               	bcf	status,0,c
  4488  0015A6  362C               	rlcf	??_fround^0,f,c
  4489  0015A8  362D               	rlcf	(??_fround+1)^0,f,c
  4490  0015AA  0E48               	movlw	72
  4491  0015AC  262C               	addwf	??_fround^0,f,c
  4492  0015AE  0E00               	movlw	0
  4493  0015B0  222D               	addwfc	(??_fround+1)^0,f,c
  4494  0015B2  0E51               	movlw	low __npowers_
  4495  0015B4  242C               	addwf	??_fround^0,w,c
  4496  0015B6  6EF6               	movwf	tblptrl,c
  4497  0015B8  0EFE               	movlw	high __npowers_
  4498  0015BA  202D               	addwfc	(??_fround+1)^0,w,c
  4499  0015BC  6EF7               	movwf	tblptrh,c
  4500  0015BE                     	if	0	;There are less than 3 active tblptr bytes
  4501  0015BE                     	endif
  4502  0015BE  0009               	tblrd		*+
  4503  0015C0  CFF5 F00F          	movff	tablat,___flmul@b
  4504  0015C4  0009               	tblrd		*+
  4505  0015C6  CFF5 F010          	movff	tablat,___flmul@b+1
  4506  0015CA  0009               	tblrd		*+
  4507  0015CC  CFF5 F011          	movff	tablat,___flmul@b+2
  4508  0015D0  000A               	tblrd		*-
  4509  0015D2  CFF5 F012          	movff	tablat,___flmul@b+3
  4510  0015D6  EC5C  F006         	call	___flmul	;wreg free
  4511  0015DA  C00F  F032         	movff	?___flmul,_fround$2398
  4512  0015DE  C010  F033         	movff	?___flmul+1,_fround$2398+1
  4513  0015E2  C011  F034         	movff	?___flmul+2,_fround$2398+2
  4514  0015E6  C012  F035         	movff	?___flmul+3,_fround$2398+3
  4515                           
  4516                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4517  0015EA  0E0A               	movlw	10
  4518  0015EC  6E05               	movwf	___lbdiv@divisor^0,c
  4519  0015EE  0E64               	movlw	100
  4520  0015F0  6E01               	movwf	___lbmod@divisor^0,c
  4521  0015F2  5036               	movf	fround@prec^0,w,c
  4522  0015F4  ECAF  F013         	call	___lbmod
  4523  0015F8  EC49  F013         	call	___lbdiv
  4524  0015FC  6E2C               	movwf	??_fround^0,c
  4525  0015FE  6A2D               	clrf	(??_fround+1)^0,c
  4526  001600  90D8               	bcf	status,0,c
  4527  001602  362C               	rlcf	??_fround^0,f,c
  4528  001604  362D               	rlcf	(??_fround+1)^0,f,c
  4529  001606  90D8               	bcf	status,0,c
  4530  001608  362C               	rlcf	??_fround^0,f,c
  4531  00160A  362D               	rlcf	(??_fround+1)^0,f,c
  4532  00160C  0E24               	movlw	36
  4533  00160E  262C               	addwf	??_fround^0,f,c
  4534  001610  0E00               	movlw	0
  4535  001612  222D               	addwfc	(??_fround+1)^0,f,c
  4536  001614  0E51               	movlw	low __npowers_
  4537  001616  242C               	addwf	??_fround^0,w,c
  4538  001618  6EF6               	movwf	tblptrl,c
  4539  00161A  0EFE               	movlw	high __npowers_
  4540  00161C  202D               	addwfc	(??_fround+1)^0,w,c
  4541  00161E  6EF7               	movwf	tblptrh,c
  4542  001620                     	if	0	;There are less than 3 active tblptr bytes
  4543  001620                     	endif
  4544  001620  0009               	tblrd		*+
  4545  001622  CFF5 F013          	movff	tablat,___flmul@a
  4546  001626  0009               	tblrd		*+
  4547  001628  CFF5 F014          	movff	tablat,___flmul@a+1
  4548  00162C  0009               	tblrd		*+
  4549  00162E  CFF5 F015          	movff	tablat,___flmul@a+2
  4550  001632  000A               	tblrd		*-
  4551  001634  CFF5 F016          	movff	tablat,___flmul@a+3
  4552  001638  C032  F00F         	movff	_fround$2398,___flmul@b
  4553  00163C  C033  F010         	movff	_fround$2398+1,___flmul@b+1
  4554  001640  C034  F011         	movff	_fround$2398+2,___flmul@b+2
  4555  001644  C035  F012         	movff	_fround$2398+3,___flmul@b+3
  4556  001648  EC5C  F006         	call	___flmul	;wreg free
  4557  00164C  C00F  F02E         	movff	?___flmul,_fround$2399
  4558  001650  C010  F02F         	movff	?___flmul+1,_fround$2399+1
  4559  001654  C011  F030         	movff	?___flmul+2,_fround$2399+2
  4560  001658  C012  F031         	movff	?___flmul+3,_fround$2399+3
  4561                           
  4562                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4563  00165C  C02E  F00F         	movff	_fround$2399,___flmul@b
  4564  001660  C02F  F010         	movff	_fround$2399+1,___flmul@b+1
  4565  001664  C030  F011         	movff	_fround$2399+2,___flmul@b+2
  4566  001668  C031  F012         	movff	_fround$2399+3,___flmul@b+3
  4567  00166C  0E0A               	movlw	10
  4568  00166E  6E01               	movwf	___lbmod@divisor^0,c
  4569  001670  5036               	movf	fround@prec^0,w,c
  4570  001672  ECAF  F013         	call	___lbmod
  4571  001676  6E2C               	movwf	??_fround^0,c
  4572  001678  6A2D               	clrf	(??_fround+1)^0,c
  4573  00167A  90D8               	bcf	status,0,c
  4574  00167C  362C               	rlcf	??_fround^0,f,c
  4575  00167E  362D               	rlcf	(??_fround+1)^0,f,c
  4576  001680  90D8               	bcf	status,0,c
  4577  001682  362C               	rlcf	??_fround^0,f,c
  4578  001684  362D               	rlcf	(??_fround+1)^0,f,c
  4579  001686  0E51               	movlw	low __npowers_
  4580  001688  242C               	addwf	??_fround^0,w,c
  4581  00168A  6EF6               	movwf	tblptrl,c
  4582  00168C  0EFE               	movlw	high __npowers_
  4583  00168E  202D               	addwfc	(??_fround+1)^0,w,c
  4584  001690  6EF7               	movwf	tblptrh,c
  4585  001692                     	if	0	;There are less than 3 active tblptr bytes
  4586  001692                     	endif
  4587  001692  0009               	tblrd		*+
  4588  001694  CFF5 F013          	movff	tablat,___flmul@a
  4589  001698  0009               	tblrd		*+
  4590  00169A  CFF5 F014          	movff	tablat,___flmul@a+1
  4591  00169E  0009               	tblrd		*+
  4592  0016A0  CFF5 F015          	movff	tablat,___flmul@a+2
  4593  0016A4  000A               	tblrd		*-
  4594  0016A6  CFF5 F016          	movff	tablat,___flmul@a+3
  4595  0016AA  EC5C  F006         	call	___flmul	;wreg free
  4596  0016AE  C00F  F028         	movff	?___flmul,?_fround
  4597  0016B2  C010  F029         	movff	?___flmul+1,?_fround+1
  4598  0016B6  C011  F02A         	movff	?___flmul+2,?_fround+2
  4599  0016BA  C012  F02B         	movff	?___flmul+3,?_fround+3
  4600  0016BE  0012               	return	
  4601  0016C0                     l3471:
  4602                           
  4603                           ;doprnt.c: 423: else if(prec > 10)
  4604  0016C0  0E0A               	movlw	10
  4605  0016C2  6436               	cpfsgt	fround@prec^0,c
  4606  0016C4  D067               	goto	l3477
  4607                           
  4608                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4609  0016C6  0E00               	movlw	0
  4610  0016C8  6E13               	movwf	___flmul@a^0,c
  4611  0016CA  0E00               	movlw	0
  4612  0016CC  6E14               	movwf	(___flmul@a+1)^0,c
  4613  0016CE  0E00               	movlw	0
  4614  0016D0  6E15               	movwf	(___flmul@a+2)^0,c
  4615  0016D2  0E3F               	movlw	63
  4616  0016D4  6E16               	movwf	(___flmul@a+3)^0,c
  4617  0016D6  0E0A               	movlw	10
  4618  0016D8  6E05               	movwf	___lbdiv@divisor^0,c
  4619  0016DA  5036               	movf	fround@prec^0,w,c
  4620  0016DC  EC49  F013         	call	___lbdiv
  4621  0016E0  6E2C               	movwf	??_fround^0,c
  4622  0016E2  6A2D               	clrf	(??_fround+1)^0,c
  4623  0016E4  90D8               	bcf	status,0,c
  4624  0016E6  362C               	rlcf	??_fround^0,f,c
  4625  0016E8  362D               	rlcf	(??_fround+1)^0,f,c
  4626  0016EA  90D8               	bcf	status,0,c
  4627  0016EC  362C               	rlcf	??_fround^0,f,c
  4628  0016EE  362D               	rlcf	(??_fround+1)^0,f,c
  4629  0016F0  0E24               	movlw	36
  4630  0016F2  262C               	addwf	??_fround^0,f,c
  4631  0016F4  0E00               	movlw	0
  4632  0016F6  222D               	addwfc	(??_fround+1)^0,f,c
  4633  0016F8  0E51               	movlw	low __npowers_
  4634  0016FA  242C               	addwf	??_fround^0,w,c
  4635  0016FC  6EF6               	movwf	tblptrl,c
  4636  0016FE  0EFE               	movlw	high __npowers_
  4637  001700  202D               	addwfc	(??_fround+1)^0,w,c
  4638  001702  6EF7               	movwf	tblptrh,c
  4639  001704                     	if	0	;There are less than 3 active tblptr bytes
  4640  001704                     	endif
  4641  001704  0009               	tblrd		*+
  4642  001706  CFF5 F00F          	movff	tablat,___flmul@b
  4643  00170A  0009               	tblrd		*+
  4644  00170C  CFF5 F010          	movff	tablat,___flmul@b+1
  4645  001710  0009               	tblrd		*+
  4646  001712  CFF5 F011          	movff	tablat,___flmul@b+2
  4647  001716  000A               	tblrd		*-
  4648  001718  CFF5 F012          	movff	tablat,___flmul@b+3
  4649  00171C  EC5C  F006         	call	___flmul	;wreg free
  4650  001720  C00F  F032         	movff	?___flmul,_fround$2398
  4651  001724  C010  F033         	movff	?___flmul+1,_fround$2398+1
  4652  001728  C011  F034         	movff	?___flmul+2,_fround$2398+2
  4653  00172C  C012  F035         	movff	?___flmul+3,_fround$2398+3
  4654                           
  4655                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4656  001730  C032  F00F         	movff	_fround$2398,___flmul@b
  4657  001734  C033  F010         	movff	_fround$2398+1,___flmul@b+1
  4658  001738  C034  F011         	movff	_fround$2398+2,___flmul@b+2
  4659  00173C  C035  F012         	movff	_fround$2398+3,___flmul@b+3
  4660  001740  0E0A               	movlw	10
  4661  001742  6E01               	movwf	___lbmod@divisor^0,c
  4662  001744  5036               	movf	fround@prec^0,w,c
  4663  001746  ECAF  F013         	call	___lbmod
  4664  00174A  6E2C               	movwf	??_fround^0,c
  4665  00174C  6A2D               	clrf	(??_fround+1)^0,c
  4666  00174E  90D8               	bcf	status,0,c
  4667  001750  362C               	rlcf	??_fround^0,f,c
  4668  001752  362D               	rlcf	(??_fround+1)^0,f,c
  4669  001754  90D8               	bcf	status,0,c
  4670  001756  362C               	rlcf	??_fround^0,f,c
  4671  001758  362D               	rlcf	(??_fround+1)^0,f,c
  4672  00175A  0E51               	movlw	low __npowers_
  4673  00175C  242C               	addwf	??_fround^0,w,c
  4674  00175E  6EF6               	movwf	tblptrl,c
  4675  001760  0EFE               	movlw	high __npowers_
  4676  001762  202D               	addwfc	(??_fround+1)^0,w,c
  4677  001764  6EF7               	movwf	tblptrh,c
  4678  001766                     	if	0	;There are less than 3 active tblptr bytes
  4679  001766                     	endif
  4680  001766  0009               	tblrd		*+
  4681  001768  CFF5 F013          	movff	tablat,___flmul@a
  4682  00176C  0009               	tblrd		*+
  4683  00176E  CFF5 F014          	movff	tablat,___flmul@a+1
  4684  001772  0009               	tblrd		*+
  4685  001774  CFF5 F015          	movff	tablat,___flmul@a+2
  4686  001778  000A               	tblrd		*-
  4687  00177A  CFF5 F016          	movff	tablat,___flmul@a+3
  4688  00177E  EC5C  F006         	call	___flmul	;wreg free
  4689  001782  C00F  F028         	movff	?___flmul,?_fround
  4690  001786  C010  F029         	movff	?___flmul+1,?_fround+1
  4691  00178A  C011  F02A         	movff	?___flmul+2,?_fround+2
  4692  00178E  C012  F02B         	movff	?___flmul+3,?_fround+3
  4693  001792  0012               	return	
  4694  001794                     l3477:
  4695                           
  4696                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  4697  001794  5036               	movf	fround@prec^0,w,c
  4698  001796  0D04               	mullw	4
  4699  001798  0E51               	movlw	low __npowers_
  4700  00179A  24F3               	addwf	243,w,c
  4701  00179C  6EF6               	movwf	tblptrl,c
  4702  00179E  0EFE               	movlw	high __npowers_
  4703  0017A0  20F4               	addwfc	244,w,c
  4704  0017A2  6EF7               	movwf	tblptrh,c
  4705  0017A4                     	if	0	;There are less than 3 active tblptr bytes
  4706  0017A4                     	endif
  4707  0017A4  0009               	tblrd		*+
  4708  0017A6  CFF5 F00F          	movff	tablat,___flmul@b
  4709  0017AA  0009               	tblrd		*+
  4710  0017AC  CFF5 F010          	movff	tablat,___flmul@b+1
  4711  0017B0  0009               	tblrd		*+
  4712  0017B2  CFF5 F011          	movff	tablat,___flmul@b+2
  4713  0017B6  000A               	tblrd		*-
  4714  0017B8  CFF5 F012          	movff	tablat,___flmul@b+3
  4715  0017BC  0E00               	movlw	0
  4716  0017BE  6E13               	movwf	___flmul@a^0,c
  4717  0017C0  0E00               	movlw	0
  4718  0017C2  6E14               	movwf	(___flmul@a+1)^0,c
  4719  0017C4  0E00               	movlw	0
  4720  0017C6  6E15               	movwf	(___flmul@a+2)^0,c
  4721  0017C8  0E3F               	movlw	63
  4722  0017CA  6E16               	movwf	(___flmul@a+3)^0,c
  4723  0017CC  EC5C  F006         	call	___flmul	;wreg free
  4724  0017D0  C00F  F028         	movff	?___flmul,?_fround
  4725  0017D4  C010  F029         	movff	?___flmul+1,?_fround+1
  4726  0017D8  C011  F02A         	movff	?___flmul+2,?_fround+2
  4727  0017DC  C012  F02B         	movff	?___flmul+3,?_fround+3
  4728  0017E0  0012               	return		;funcret
  4729  0017E2                     __end_of_fround:
  4730                           	callstack 0
  4731                           
  4732 ;; *************** function ___lbmod *****************
  4733 ;; Defined at:
  4734 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lbmod.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  dividend        1    wreg     unsigned char 
  4737 ;;  divisor         1    0[COMRAM] unsigned char 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  dividend        1    1[COMRAM] unsigned char 
  4740 ;;  rem             1    3[COMRAM] unsigned char 
  4741 ;;  counter         1    2[COMRAM] unsigned char 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      unsigned char 
  4744 ;; Registers used:
  4745 ;;		wreg, status,2, status,0
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4751 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;Total ram usage:        4 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    1
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_fround
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text11
  4766  00275E                     __ptext11:
  4767                           	callstack 0
  4768  00275E                     ___lbmod:
  4769                           	callstack 26
  4770                           
  4771                           ;incstack = 0
  4772                           ;___lbmod@dividend stored from wreg
  4773  00275E  6E02               	movwf	___lbmod@dividend^0,c
  4774  002760  0E08               	movlw	8
  4775  002762  6E03               	movwf	___lbmod@counter^0,c
  4776  002764  0E00               	movlw	0
  4777  002766  6E04               	movwf	___lbmod@rem^0,c
  4778  002768                     l3439:
  4779  002768  90D8               	bcf	status,0,c
  4780  00276A  3402               	rlcf	___lbmod@dividend^0,w,c
  4781  00276C  3404               	rlcf	___lbmod@rem^0,w,c
  4782  00276E  6E04               	movwf	___lbmod@rem^0,c
  4783  002770  90D8               	bcf	status,0,c
  4784  002772  3602               	rlcf	___lbmod@dividend^0,f,c
  4785  002774  5001               	movf	___lbmod@divisor^0,w,c
  4786  002776  5C04               	subwf	___lbmod@rem^0,w,c
  4787  002778  A0D8               	btfss	status,0,c
  4788  00277A  D002               	goto	l3447
  4789  00277C  5001               	movf	___lbmod@divisor^0,w,c
  4790  00277E  5E04               	subwf	___lbmod@rem^0,f,c
  4791  002780                     l3447:
  4792  002780  2E03               	decfsz	___lbmod@counter^0,f,c
  4793  002782  D7F2               	goto	l3439
  4794  002784  5004               	movf	___lbmod@rem^0,w,c
  4795  002786  0012               	return		;funcret
  4796  002788                     __end_of___lbmod:
  4797                           	callstack 0
  4798                           
  4799 ;; *************** function ___lbdiv *****************
  4800 ;; Defined at:
  4801 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lbdiv.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  dividend        1    wreg     unsigned char 
  4804 ;;  divisor         1    4[COMRAM] unsigned char 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  dividend        1    5[COMRAM] unsigned char 
  4807 ;;  quotient        1    7[COMRAM] unsigned char 
  4808 ;;  counter         1    6[COMRAM] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      unsigned char 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4818 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;Total ram usage:        4 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    1
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_fround
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text12
  4833  002692                     __ptext12:
  4834                           	callstack 0
  4835  002692                     ___lbdiv:
  4836                           	callstack 26
  4837                           
  4838                           ;incstack = 0
  4839                           ;___lbdiv@dividend stored from wreg
  4840  002692  6E06               	movwf	___lbdiv@dividend^0,c
  4841  002694  0E00               	movlw	0
  4842  002696  6E08               	movwf	___lbdiv@quotient^0,c
  4843  002698  5005               	movf	___lbdiv@divisor^0,w,c
  4844  00269A  B4D8               	btfsc	status,2,c
  4845  00269C  D015               	goto	l3433
  4846  00269E  0E01               	movlw	1
  4847  0026A0  6E07               	movwf	___lbdiv@counter^0,c
  4848  0026A2  D003               	goto	l3421
  4849  0026A4                     l3417:
  4850  0026A4  90D8               	bcf	status,0,c
  4851  0026A6  3605               	rlcf	___lbdiv@divisor^0,f,c
  4852  0026A8  2A07               	incf	___lbdiv@counter^0,f,c
  4853  0026AA                     l3421:
  4854  0026AA  AE05               	btfss	___lbdiv@divisor^0,7,c
  4855  0026AC  D7FB               	goto	l3417
  4856  0026AE                     u2770:
  4857  0026AE  90D8               	bcf	status,0,c
  4858  0026B0  3608               	rlcf	___lbdiv@quotient^0,f,c
  4859  0026B2  5005               	movf	___lbdiv@divisor^0,w,c
  4860  0026B4  5C06               	subwf	___lbdiv@dividend^0,w,c
  4861  0026B6  A0D8               	btfss	status,0,c
  4862  0026B8  D003               	goto	l3429
  4863  0026BA  5005               	movf	___lbdiv@divisor^0,w,c
  4864  0026BC  5E06               	subwf	___lbdiv@dividend^0,f,c
  4865  0026BE  8008               	bsf	___lbdiv@quotient^0,0,c
  4866  0026C0                     l3429:
  4867  0026C0  90D8               	bcf	status,0,c
  4868  0026C2  3205               	rrcf	___lbdiv@divisor^0,f,c
  4869  0026C4  2E07               	decfsz	___lbdiv@counter^0,f,c
  4870  0026C6  D7F3               	goto	u2770
  4871  0026C8                     l3433:
  4872  0026C8  5008               	movf	___lbdiv@quotient^0,w,c
  4873  0026CA  0012               	return		;funcret
  4874  0026CC                     __end_of___lbdiv:
  4875                           	callstack 0
  4876                           
  4877 ;; *************** function __tdiv_to_l_ *****************
  4878 ;; Defined at:
  4879 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftdivl.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  f1              4    0[COMRAM] float 
  4882 ;;  f2              4    4[COMRAM] float 
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;  quot            4   11[COMRAM] unsigned long 
  4885 ;;  exp1            1   16[COMRAM] unsigned char 
  4886 ;;  cntr            1   15[COMRAM] unsigned char 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  4    0[COMRAM] unsigned long 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2, status,0
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4896 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;Total ram usage:       17 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    1
  4903 ;; This function calls:
  4904 ;;		Nothing
  4905 ;; This function is called by:
  4906 ;;		_printf
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           	psect	text13
  4911  001BCA                     __ptext13:
  4912                           	callstack 0
  4913  001BCA                     __tdiv_to_l_:
  4914                           	callstack 27
  4915                           
  4916                           ;incstack = 0
  4917  001BCA  C003  F009         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4918  001BCE  6A0A               	clrf	(??__tdiv_to_l_+1)^0,c
  4919  001BD0  6A0B               	clrf	(??__tdiv_to_l_+2)^0,c
  4920  001BD2  3402               	rlcf	(__tdiv_to_l_@f1+1)^0,w,c
  4921  001BD4  3609               	rlcf	??__tdiv_to_l_^0,f,c
  4922  001BD6  E301               	bnc	u2891
  4923  001BD8  800A               	bsf	(??__tdiv_to_l_+1)^0,0,c
  4924  001BDA                     u2891:
  4925  001BDA  5009               	movf	??__tdiv_to_l_^0,w,c
  4926  001BDC  6E11               	movwf	__tdiv_to_l_@exp1^0,c
  4927  001BDE  5011               	movf	__tdiv_to_l_@exp1^0,w,c
  4928  001BE0  A4D8               	btfss	status,2,c
  4929  001BE2  D009               	goto	l3525
  4930  001BE4                     u2900:
  4931  001BE4  0E00               	movlw	0
  4932  001BE6  6E01               	movwf	?__tdiv_to_l_^0,c
  4933  001BE8  0E00               	movlw	0
  4934  001BEA  6E02               	movwf	(?__tdiv_to_l_+1)^0,c
  4935  001BEC  0E00               	movlw	0
  4936  001BEE  6E03               	movwf	(?__tdiv_to_l_+2)^0,c
  4937  001BF0  0E00               	movlw	0
  4938  001BF2  6E04               	movwf	(?__tdiv_to_l_+3)^0,c
  4939  001BF4  0012               	return	
  4940  001BF6                     l3525:
  4941  001BF6  C007  F009         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4942  001BFA  6A0A               	clrf	(??__tdiv_to_l_+1)^0,c
  4943  001BFC  6A0B               	clrf	(??__tdiv_to_l_+2)^0,c
  4944  001BFE  3406               	rlcf	(__tdiv_to_l_@f2+1)^0,w,c
  4945  001C00  3609               	rlcf	??__tdiv_to_l_^0,f,c
  4946  001C02  E301               	bnc	u2911
  4947  001C04  800A               	bsf	(??__tdiv_to_l_+1)^0,0,c
  4948  001C06                     u2911:
  4949  001C06  5009               	movf	??__tdiv_to_l_^0,w,c
  4950  001C08  6E10               	movwf	__tdiv_to_l_@cntr^0,c
  4951  001C0A  5010               	movf	__tdiv_to_l_@cntr^0,w,c
  4952  001C0C  B4D8               	btfsc	status,2,c
  4953  001C0E  D7EA               	goto	u2900
  4954  001C10  8E02               	bsf	(__tdiv_to_l_@f1+1)^0,7,c
  4955  001C12  0EFF               	movlw	255
  4956  001C14  1601               	andwf	__tdiv_to_l_@f1^0,f,c
  4957  001C16  0EFF               	movlw	255
  4958  001C18  1602               	andwf	(__tdiv_to_l_@f1+1)^0,f,c
  4959  001C1A  0E00               	movlw	0
  4960  001C1C  1603               	andwf	(__tdiv_to_l_@f1+2)^0,f,c
  4961  001C1E  8E06               	bsf	(__tdiv_to_l_@f2+1)^0,7,c
  4962  001C20  0EFF               	movlw	255
  4963  001C22  1605               	andwf	__tdiv_to_l_@f2^0,f,c
  4964  001C24  0EFF               	movlw	255
  4965  001C26  1606               	andwf	(__tdiv_to_l_@f2+1)^0,f,c
  4966  001C28  0E00               	movlw	0
  4967  001C2A  1607               	andwf	(__tdiv_to_l_@f2+2)^0,f,c
  4968  001C2C  0E00               	movlw	0
  4969  001C2E  6E0C               	movwf	__tdiv_to_l_@quot^0,c
  4970  001C30  0E00               	movlw	0
  4971  001C32  6E0D               	movwf	(__tdiv_to_l_@quot+1)^0,c
  4972  001C34  0E00               	movlw	0
  4973  001C36  6E0E               	movwf	(__tdiv_to_l_@quot+2)^0,c
  4974  001C38  0E00               	movlw	0
  4975  001C3A  6E0F               	movwf	(__tdiv_to_l_@quot+3)^0,c
  4976  001C3C  0E7F               	movlw	127
  4977  001C3E  5E11               	subwf	__tdiv_to_l_@exp1^0,f,c
  4978  001C40  5010               	movf	__tdiv_to_l_@cntr^0,w,c
  4979  001C42  0F98               	addlw	152
  4980  001C44  5E11               	subwf	__tdiv_to_l_@exp1^0,f,c
  4981  001C46  0E18               	movlw	24
  4982  001C48  6E10               	movwf	__tdiv_to_l_@cntr^0,c
  4983  001C4A                     l839:
  4984  001C4A  90D8               	bcf	status,0,c
  4985  001C4C  360C               	rlcf	__tdiv_to_l_@quot^0,f,c
  4986  001C4E  360D               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  4987  001C50  360E               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  4988  001C52  360F               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  4989  001C54  5005               	movf	__tdiv_to_l_@f2^0,w,c
  4990  001C56  5C01               	subwf	__tdiv_to_l_@f1^0,w,c
  4991  001C58  5006               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  4992  001C5A  5802               	subwfb	(__tdiv_to_l_@f1+1)^0,w,c
  4993  001C5C  5007               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  4994  001C5E  5803               	subwfb	(__tdiv_to_l_@f1+2)^0,w,c
  4995  001C60  A0D8               	btfss	status,0,c
  4996  001C62  D007               	goto	l840
  4997  001C64  5005               	movf	__tdiv_to_l_@f2^0,w,c
  4998  001C66  5E01               	subwf	__tdiv_to_l_@f1^0,f,c
  4999  001C68  5006               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  5000  001C6A  5A02               	subwfb	(__tdiv_to_l_@f1+1)^0,f,c
  5001  001C6C  5007               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  5002  001C6E  5A03               	subwfb	(__tdiv_to_l_@f1+2)^0,f,c
  5003  001C70  800C               	bsf	__tdiv_to_l_@quot^0,0,c
  5004  001C72                     l840:
  5005  001C72  90D8               	bcf	status,0,c
  5006  001C74  3601               	rlcf	__tdiv_to_l_@f1^0,f,c
  5007  001C76  3602               	rlcf	(__tdiv_to_l_@f1+1)^0,f,c
  5008  001C78  3603               	rlcf	(__tdiv_to_l_@f1+2)^0,f,c
  5009  001C7A  2E10               	decfsz	__tdiv_to_l_@cntr^0,f,c
  5010  001C7C  D7E6               	goto	l839
  5011  001C7E  AE11               	btfss	__tdiv_to_l_@exp1^0,7,c
  5012  001C80  D00D               	goto	l3565
  5013  001C82  5011               	movf	__tdiv_to_l_@exp1^0,w,c
  5014  001C84  0A80               	xorlw	128
  5015  001C86  0F97               	addlw	151
  5016  001C88  A0D8               	btfss	status,0,c
  5017  001C8A  D7AC               	goto	u2900
  5018  001C8C                     l3561:
  5019  001C8C  90D8               	bcf	status,0,c
  5020  001C8E  320F               	rrcf	(__tdiv_to_l_@quot+3)^0,f,c
  5021  001C90  320E               	rrcf	(__tdiv_to_l_@quot+2)^0,f,c
  5022  001C92  320D               	rrcf	(__tdiv_to_l_@quot+1)^0,f,c
  5023  001C94  320C               	rrcf	__tdiv_to_l_@quot^0,f,c
  5024  001C96  3E11               	incfsz	__tdiv_to_l_@exp1^0,f,c
  5025  001C98  D7F9               	goto	l3561
  5026  001C9A  D00D               	goto	u2970
  5027  001C9C                     l3565:
  5028  001C9C  0E17               	movlw	23
  5029  001C9E  6411               	cpfsgt	__tdiv_to_l_@exp1^0,c
  5030  001CA0  D007               	goto	l3573
  5031  001CA2  D7A0               	goto	u2900
  5032  001CA4                     l3571:
  5033  001CA4  90D8               	bcf	status,0,c
  5034  001CA6  360C               	rlcf	__tdiv_to_l_@quot^0,f,c
  5035  001CA8  360D               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  5036  001CAA  360E               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  5037  001CAC  360F               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  5038  001CAE  0611               	decf	__tdiv_to_l_@exp1^0,f,c
  5039  001CB0                     l3573:
  5040  001CB0  5011               	movf	__tdiv_to_l_@exp1^0,w,c
  5041  001CB2  A4D8               	btfss	status,2,c
  5042  001CB4  D7F7               	goto	l3571
  5043  001CB6                     u2970:
  5044  001CB6  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5045  001CBA  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5046  001CBE  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5047  001CC2  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5048  001CC6  0012               	return		;funcret
  5049  001CC8                     __end_of__tdiv_to_l_:
  5050                           	callstack 0
  5051                           
  5052 ;; *************** function __div_to_l_ *****************
  5053 ;; Defined at:
  5054 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fldivl.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  f1              4    0[COMRAM] unsigned long 
  5057 ;;  f2              4    4[COMRAM] unsigned long 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  quot            4    8[COMRAM] unsigned long 
  5060 ;;  exp1            1   13[COMRAM] unsigned char 
  5061 ;;  cntr            1   12[COMRAM] unsigned char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  4    0[COMRAM] unsigned long 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2, status,0
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5071 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;Total ram usage:       14 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    1
  5078 ;; This function calls:
  5079 ;;		Nothing
  5080 ;; This function is called by:
  5081 ;;		_printf
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text14
  5086  001DC0                     __ptext14:
  5087                           	callstack 0
  5088  001DC0                     __div_to_l_:
  5089                           	callstack 27
  5090                           
  5091                           ;incstack = 0
  5092  001DC0  3403               	rlcf	(__div_to_l_@f1+2)^0,w,c
  5093  001DC2  3404               	rlcf	(__div_to_l_@f1+3)^0,w,c
  5094  001DC4  6E0E               	movwf	__div_to_l_@exp1^0,c
  5095  001DC6  500E               	movf	__div_to_l_@exp1^0,w,c
  5096  001DC8  A4D8               	btfss	status,2,c
  5097  001DCA  D009               	goto	l3581
  5098  001DCC                     u2980:
  5099  001DCC  0E00               	movlw	0
  5100  001DCE  6E01               	movwf	?__div_to_l_^0,c
  5101  001DD0  0E00               	movlw	0
  5102  001DD2  6E02               	movwf	(?__div_to_l_+1)^0,c
  5103  001DD4  0E00               	movlw	0
  5104  001DD6  6E03               	movwf	(?__div_to_l_+2)^0,c
  5105  001DD8  0E00               	movlw	0
  5106  001DDA  6E04               	movwf	(?__div_to_l_+3)^0,c
  5107  001DDC  0012               	return	
  5108  001DDE                     l3581:
  5109  001DDE  3407               	rlcf	(__div_to_l_@f2+2)^0,w,c
  5110  001DE0  3408               	rlcf	(__div_to_l_@f2+3)^0,w,c
  5111  001DE2  6E0D               	movwf	__div_to_l_@cntr^0,c
  5112  001DE4  500D               	movf	__div_to_l_@cntr^0,w,c
  5113  001DE6  B4D8               	btfsc	status,2,c
  5114  001DE8  D7F1               	goto	u2980
  5115  001DEA  8E03               	bsf	(__div_to_l_@f1+2)^0,7,c
  5116  001DEC  0EFF               	movlw	255
  5117  001DEE  1601               	andwf	__div_to_l_@f1^0,f,c
  5118  001DF0  0EFF               	movlw	255
  5119  001DF2  1602               	andwf	(__div_to_l_@f1+1)^0,f,c
  5120  001DF4  0EFF               	movlw	255
  5121  001DF6  1603               	andwf	(__div_to_l_@f1+2)^0,f,c
  5122  001DF8  0E00               	movlw	0
  5123  001DFA  1604               	andwf	(__div_to_l_@f1+3)^0,f,c
  5124  001DFC  8E07               	bsf	(__div_to_l_@f2+2)^0,7,c
  5125  001DFE  0EFF               	movlw	255
  5126  001E00  1605               	andwf	__div_to_l_@f2^0,f,c
  5127  001E02  0EFF               	movlw	255
  5128  001E04  1606               	andwf	(__div_to_l_@f2+1)^0,f,c
  5129  001E06  0EFF               	movlw	255
  5130  001E08  1607               	andwf	(__div_to_l_@f2+2)^0,f,c
  5131  001E0A  0E00               	movlw	0
  5132  001E0C  1608               	andwf	(__div_to_l_@f2+3)^0,f,c
  5133  001E0E  0E00               	movlw	0
  5134  001E10  6E09               	movwf	__div_to_l_@quot^0,c
  5135  001E12  0E00               	movlw	0
  5136  001E14  6E0A               	movwf	(__div_to_l_@quot+1)^0,c
  5137  001E16  0E00               	movlw	0
  5138  001E18  6E0B               	movwf	(__div_to_l_@quot+2)^0,c
  5139  001E1A  0E00               	movlw	0
  5140  001E1C  6E0C               	movwf	(__div_to_l_@quot+3)^0,c
  5141  001E1E  0E7F               	movlw	127
  5142  001E20  5E0E               	subwf	__div_to_l_@exp1^0,f,c
  5143  001E22  500D               	movf	__div_to_l_@cntr^0,w,c
  5144  001E24  0FA0               	addlw	160
  5145  001E26  5E0E               	subwf	__div_to_l_@exp1^0,f,c
  5146  001E28  0E20               	movlw	32
  5147  001E2A  6E0D               	movwf	__div_to_l_@cntr^0,c
  5148  001E2C                     l3601:
  5149  001E2C  90D8               	bcf	status,0,c
  5150  001E2E  3609               	rlcf	__div_to_l_@quot^0,f,c
  5151  001E30  360A               	rlcf	(__div_to_l_@quot+1)^0,f,c
  5152  001E32  360B               	rlcf	(__div_to_l_@quot+2)^0,f,c
  5153  001E34  360C               	rlcf	(__div_to_l_@quot+3)^0,f,c
  5154  001E36  5005               	movf	__div_to_l_@f2^0,w,c
  5155  001E38  5C01               	subwf	__div_to_l_@f1^0,w,c
  5156  001E3A  5006               	movf	(__div_to_l_@f2+1)^0,w,c
  5157  001E3C  5802               	subwfb	(__div_to_l_@f1+1)^0,w,c
  5158  001E3E  5007               	movf	(__div_to_l_@f2+2)^0,w,c
  5159  001E40  5803               	subwfb	(__div_to_l_@f1+2)^0,w,c
  5160  001E42  5008               	movf	(__div_to_l_@f2+3)^0,w,c
  5161  001E44  5804               	subwfb	(__div_to_l_@f1+3)^0,w,c
  5162  001E46  A0D8               	btfss	status,0,c
  5163  001E48  D009               	goto	l3609
  5164  001E4A  5005               	movf	__div_to_l_@f2^0,w,c
  5165  001E4C  5E01               	subwf	__div_to_l_@f1^0,f,c
  5166  001E4E  5006               	movf	(__div_to_l_@f2+1)^0,w,c
  5167  001E50  5A02               	subwfb	(__div_to_l_@f1+1)^0,f,c
  5168  001E52  5007               	movf	(__div_to_l_@f2+2)^0,w,c
  5169  001E54  5A03               	subwfb	(__div_to_l_@f1+2)^0,f,c
  5170  001E56  5008               	movf	(__div_to_l_@f2+3)^0,w,c
  5171  001E58  5A04               	subwfb	(__div_to_l_@f1+3)^0,f,c
  5172  001E5A  8009               	bsf	__div_to_l_@quot^0,0,c
  5173  001E5C                     l3609:
  5174  001E5C  90D8               	bcf	status,0,c
  5175  001E5E  3601               	rlcf	__div_to_l_@f1^0,f,c
  5176  001E60  3602               	rlcf	(__div_to_l_@f1+1)^0,f,c
  5177  001E62  3603               	rlcf	(__div_to_l_@f1+2)^0,f,c
  5178  001E64  3604               	rlcf	(__div_to_l_@f1+3)^0,f,c
  5179  001E66  2E0D               	decfsz	__div_to_l_@cntr^0,f,c
  5180  001E68  D7E1               	goto	l3601
  5181  001E6A  AE0E               	btfss	__div_to_l_@exp1^0,7,c
  5182  001E6C  D00D               	goto	l3625
  5183  001E6E  500E               	movf	__div_to_l_@exp1^0,w,c
  5184  001E70  0A80               	xorlw	128
  5185  001E72  0F9F               	addlw	159
  5186  001E74  A0D8               	btfss	status,0,c
  5187  001E76  D7AA               	goto	u2980
  5188  001E78                     l3621:
  5189  001E78  90D8               	bcf	status,0,c
  5190  001E7A  320C               	rrcf	(__div_to_l_@quot+3)^0,f,c
  5191  001E7C  320B               	rrcf	(__div_to_l_@quot+2)^0,f,c
  5192  001E7E  320A               	rrcf	(__div_to_l_@quot+1)^0,f,c
  5193  001E80  3209               	rrcf	__div_to_l_@quot^0,f,c
  5194  001E82  3E0E               	incfsz	__div_to_l_@exp1^0,f,c
  5195  001E84  D7F9               	goto	l3621
  5196  001E86  D00D               	goto	u3040
  5197  001E88                     l3625:
  5198  001E88  0E1F               	movlw	31
  5199  001E8A  640E               	cpfsgt	__div_to_l_@exp1^0,c
  5200  001E8C  D007               	goto	l3633
  5201  001E8E  D79E               	goto	u2980
  5202  001E90                     l3631:
  5203  001E90  90D8               	bcf	status,0,c
  5204  001E92  3609               	rlcf	__div_to_l_@quot^0,f,c
  5205  001E94  360A               	rlcf	(__div_to_l_@quot+1)^0,f,c
  5206  001E96  360B               	rlcf	(__div_to_l_@quot+2)^0,f,c
  5207  001E98  360C               	rlcf	(__div_to_l_@quot+3)^0,f,c
  5208  001E9A  060E               	decf	__div_to_l_@exp1^0,f,c
  5209  001E9C                     l3633:
  5210  001E9C  500E               	movf	__div_to_l_@exp1^0,w,c
  5211  001E9E  A4D8               	btfss	status,2,c
  5212  001EA0  D7F7               	goto	l3631
  5213  001EA2                     u3040:
  5214  001EA2  C009  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5215  001EA6  C00A  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5216  001EAA  C00B  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5217  001EAE  C00C  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5218  001EB2  0012               	return		;funcret
  5219  001EB4                     __end_of__div_to_l_:
  5220                           	callstack 0
  5221                           
  5222 ;; *************** function ___wmul *****************
  5223 ;; Defined at:
  5224 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  multiplier      2    0[COMRAM] unsigned int 
  5227 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  product         2    4[COMRAM] unsigned int 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  2    0[COMRAM] unsigned int 
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0, prodl, prodh
  5234 ;; Tracked objects:
  5235 ;;		On entry : 3F/0
  5236 ;;		On exit  : 3F/0
  5237 ;;		Unchanged: 3F/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5239 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;Total ram usage:        6 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    1
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_printf
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text15
  5254  002802                     __ptext15:
  5255                           	callstack 0
  5256  002802                     ___wmul:
  5257                           	callstack 27
  5258                           
  5259                           ; BSR set to: 0
  5260                           
  5261                           ;incstack = 0
  5262  002802  5001               	movf	___wmul@multiplier^0,w,c
  5263  002804  0203               	mulwf	___wmul@multiplicand^0,c
  5264  002806  CFF3 F005          	movff	prodl,___wmul@product
  5265  00280A  CFF4 F006          	movff	prodh,___wmul@product+1
  5266  00280E  5001               	movf	___wmul@multiplier^0,w,c
  5267  002810  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5268  002812  50F3               	movf	243,w,c
  5269  002814  2606               	addwf	(___wmul@product+1)^0,f,c
  5270  002816  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5271  002818  0203               	mulwf	___wmul@multiplicand^0,c
  5272  00281A  50F3               	movf	243,w,c
  5273  00281C  2606               	addwf	(___wmul@product+1)^0,f,c
  5274                           
  5275                           ; BSR set to: 0
  5276  00281E  C005  F001         	movff	___wmul@product,?___wmul
  5277  002822  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5278                           
  5279                           ; BSR set to: 0
  5280  002826  0012               	return		;funcret
  5281  002828                     __end_of___wmul:
  5282                           	callstack 0
  5283                           
  5284 ;; *************** function ___llmod *****************
  5285 ;; Defined at:
  5286 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\llmod.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  dividend        4   13[COMRAM] unsigned long 
  5289 ;;  divisor         4   17[COMRAM] unsigned long 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  counter         1   21[COMRAM] unsigned char 
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  4   13[COMRAM] unsigned long 
  5294 ;; Registers used:
  5295 ;;		wreg, status,2, status,0
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5301 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;Total ram usage:        9 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    1
  5308 ;; This function calls:
  5309 ;;		Nothing
  5310 ;; This function is called by:
  5311 ;;		_printf
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text16
  5316  002414                     __ptext16:
  5317                           	callstack 0
  5318  002414                     ___llmod:
  5319                           	callstack 27
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;incstack = 0
  5323  002414  5012               	movf	___llmod@divisor^0,w,c
  5324  002416  1013               	iorwf	(___llmod@divisor+1)^0,w,c
  5325  002418  1014               	iorwf	(___llmod@divisor+2)^0,w,c
  5326  00241A  1015               	iorwf	(___llmod@divisor+3)^0,w,c
  5327  00241C  B4D8               	btfsc	status,2,c
  5328  00241E  D024               	goto	l916
  5329  002420  0E01               	movlw	1
  5330  002422  6E16               	movwf	___llmod@counter^0,c
  5331  002424  D006               	goto	l3765
  5332  002426                     l3763:
  5333  002426  90D8               	bcf	status,0,c
  5334  002428  3612               	rlcf	___llmod@divisor^0,f,c
  5335  00242A  3613               	rlcf	(___llmod@divisor+1)^0,f,c
  5336  00242C  3614               	rlcf	(___llmod@divisor+2)^0,f,c
  5337  00242E  3615               	rlcf	(___llmod@divisor+3)^0,f,c
  5338  002430  2A16               	incf	___llmod@counter^0,f,c
  5339  002432                     l3765:
  5340  002432  AE15               	btfss	(___llmod@divisor+3)^0,7,c
  5341  002434  D7F8               	goto	l3763
  5342  002436                     u3250:
  5343  002436  5012               	movf	___llmod@divisor^0,w,c
  5344  002438  5C0E               	subwf	___llmod@dividend^0,w,c
  5345  00243A  5013               	movf	(___llmod@divisor+1)^0,w,c
  5346  00243C  580F               	subwfb	(___llmod@dividend+1)^0,w,c
  5347  00243E  5014               	movf	(___llmod@divisor+2)^0,w,c
  5348  002440  5810               	subwfb	(___llmod@dividend+2)^0,w,c
  5349  002442  5015               	movf	(___llmod@divisor+3)^0,w,c
  5350  002444  5811               	subwfb	(___llmod@dividend+3)^0,w,c
  5351  002446  A0D8               	btfss	status,0,c
  5352  002448  D008               	goto	l3771
  5353  00244A  5012               	movf	___llmod@divisor^0,w,c
  5354  00244C  5E0E               	subwf	___llmod@dividend^0,f,c
  5355  00244E  5013               	movf	(___llmod@divisor+1)^0,w,c
  5356  002450  5A0F               	subwfb	(___llmod@dividend+1)^0,f,c
  5357  002452  5014               	movf	(___llmod@divisor+2)^0,w,c
  5358  002454  5A10               	subwfb	(___llmod@dividend+2)^0,f,c
  5359  002456  5015               	movf	(___llmod@divisor+3)^0,w,c
  5360  002458  5A11               	subwfb	(___llmod@dividend+3)^0,f,c
  5361  00245A                     l3771:
  5362  00245A  90D8               	bcf	status,0,c
  5363  00245C  3215               	rrcf	(___llmod@divisor+3)^0,f,c
  5364  00245E  3214               	rrcf	(___llmod@divisor+2)^0,f,c
  5365  002460  3213               	rrcf	(___llmod@divisor+1)^0,f,c
  5366  002462  3212               	rrcf	___llmod@divisor^0,f,c
  5367  002464  2E16               	decfsz	___llmod@counter^0,f,c
  5368  002466  D7E7               	goto	u3250
  5369  002468                     l916:
  5370  002468  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5371  00246C  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5372  002470  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5373  002474  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5374  002478  0012               	return		;funcret
  5375  00247A                     __end_of___llmod:
  5376                           	callstack 0
  5377                           
  5378 ;; *************** function ___lldiv *****************
  5379 ;; Defined at:
  5380 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\__lldiv.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  dividend        4    0[COMRAM] unsigned long 
  5383 ;;  divisor         4    4[COMRAM] unsigned long 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  quotient        4    8[COMRAM] unsigned long 
  5386 ;;  counter         1   12[COMRAM] unsigned char 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  4    0[COMRAM] unsigned long 
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5396 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5400 ;;Total ram usage:       13 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    1
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		_printf
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text17
  5411  0022AE                     __ptext17:
  5412                           	callstack 0
  5413  0022AE                     ___lldiv:
  5414                           	callstack 27
  5415                           
  5416                           ;incstack = 0
  5417  0022AE  0E00               	movlw	0
  5418  0022B0  6E09               	movwf	___lldiv@quotient^0,c
  5419  0022B2  0E00               	movlw	0
  5420  0022B4  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  5421  0022B6  0E00               	movlw	0
  5422  0022B8  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  5423  0022BA  0E00               	movlw	0
  5424  0022BC  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  5425  0022BE  5005               	movf	___lldiv@divisor^0,w,c
  5426  0022C0  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  5427  0022C2  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  5428  0022C4  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  5429  0022C6  B4D8               	btfsc	status,2,c
  5430  0022C8  D02A               	goto	l501
  5431  0022CA  0E01               	movlw	1
  5432  0022CC  6E0D               	movwf	___lldiv@counter^0,c
  5433  0022CE  D006               	goto	l3649
  5434  0022D0                     l3647:
  5435  0022D0  90D8               	bcf	status,0,c
  5436  0022D2  3605               	rlcf	___lldiv@divisor^0,f,c
  5437  0022D4  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  5438  0022D6  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  5439  0022D8  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  5440  0022DA  2A0D               	incf	___lldiv@counter^0,f,c
  5441  0022DC                     l3649:
  5442  0022DC  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  5443  0022DE  D7F8               	goto	l3647
  5444  0022E0                     u3060:
  5445  0022E0  90D8               	bcf	status,0,c
  5446  0022E2  3609               	rlcf	___lldiv@quotient^0,f,c
  5447  0022E4  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  5448  0022E6  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  5449  0022E8  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  5450  0022EA  5005               	movf	___lldiv@divisor^0,w,c
  5451  0022EC  5C01               	subwf	___lldiv@dividend^0,w,c
  5452  0022EE  5006               	movf	(___lldiv@divisor+1)^0,w,c
  5453  0022F0  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  5454  0022F2  5007               	movf	(___lldiv@divisor+2)^0,w,c
  5455  0022F4  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  5456  0022F6  5008               	movf	(___lldiv@divisor+3)^0,w,c
  5457  0022F8  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  5458  0022FA  A0D8               	btfss	status,0,c
  5459  0022FC  D009               	goto	l3659
  5460  0022FE  5005               	movf	___lldiv@divisor^0,w,c
  5461  002300  5E01               	subwf	___lldiv@dividend^0,f,c
  5462  002302  5006               	movf	(___lldiv@divisor+1)^0,w,c
  5463  002304  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  5464  002306  5007               	movf	(___lldiv@divisor+2)^0,w,c
  5465  002308  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  5466  00230A  5008               	movf	(___lldiv@divisor+3)^0,w,c
  5467  00230C  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  5468  00230E  8009               	bsf	___lldiv@quotient^0,0,c
  5469  002310                     l3659:
  5470  002310  90D8               	bcf	status,0,c
  5471  002312  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  5472  002314  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  5473  002316  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  5474  002318  3205               	rrcf	___lldiv@divisor^0,f,c
  5475  00231A  2E0D               	decfsz	___lldiv@counter^0,f,c
  5476  00231C  D7E1               	goto	u3060
  5477  00231E                     l501:
  5478  00231E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5479  002322  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5480  002326  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5481  00232A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5482  00232E  0012               	return		;funcret
  5483  002330                     __end_of___lldiv:
  5484                           	callstack 0
  5485                           
  5486 ;; *************** function ___flsub *****************
  5487 ;; Defined at:
  5488 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\sprcadd.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  b               4   70[COMRAM] unsigned long 
  5491 ;;  a               4   74[COMRAM] unsigned long 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;		None
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  4   70[COMRAM] unsigned long 
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0, cstack
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5503 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;Total ram usage:        8 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    2
  5510 ;; This function calls:
  5511 ;;		___fladd
  5512 ;; This function is called by:
  5513 ;;		_printf
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text18
  5518  0025D4                     __ptext18:
  5519                           	callstack 0
  5520  0025D4                     ___flsub:
  5521                           	callstack 26
  5522                           
  5523                           ;incstack = 0
  5524  0025D4  0E00               	movlw	0
  5525  0025D6  1A4B               	xorwf	___flsub@a^0,f,c
  5526  0025D8  0E00               	movlw	0
  5527  0025DA  1A4C               	xorwf	(___flsub@a+1)^0,f,c
  5528  0025DC  0E00               	movlw	0
  5529  0025DE  1A4D               	xorwf	(___flsub@a+2)^0,f,c
  5530  0025E0  0E80               	movlw	128
  5531  0025E2  1A4E               	xorwf	(___flsub@a+3)^0,f,c
  5532  0025E4  C047  F037         	movff	___flsub@b,___fladd@b
  5533  0025E8  C048  F038         	movff	___flsub@b+1,___fladd@b+1
  5534  0025EC  C049  F039         	movff	___flsub@b+2,___fladd@b+2
  5535  0025F0  C04A  F03A         	movff	___flsub@b+3,___fladd@b+3
  5536  0025F4  C04B  F03B         	movff	___flsub@a,___fladd@a
  5537  0025F8  C04C  F03C         	movff	___flsub@a+1,___fladd@a+1
  5538  0025FC  C04D  F03D         	movff	___flsub@a+2,___fladd@a+2
  5539  002600  C04E  F03E         	movff	___flsub@a+3,___fladd@a+3
  5540  002604  ECF2  F007         	call	___fladd	;wreg free
  5541  002608  C037  F047         	movff	?___fladd,?___flsub
  5542  00260C  C038  F048         	movff	?___fladd+1,?___flsub+1
  5543  002610  C039  F049         	movff	?___fladd+2,?___flsub+2
  5544  002614  C03A  F04A         	movff	?___fladd+3,?___flsub+3
  5545  002618  0012               	return		;funcret
  5546  00261A                     __end_of___flsub:
  5547                           	callstack 0
  5548                           
  5549 ;; *************** function ___fladd *****************
  5550 ;; Defined at:
  5551 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\sprcadd.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;  b               4   54[COMRAM] unsigned long 
  5554 ;;  a               4   58[COMRAM] unsigned long 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;  grs             1   69[COMRAM] unsigned char 
  5557 ;;  bexp            1   68[COMRAM] unsigned char 
  5558 ;;  aexp            1   67[COMRAM] unsigned char 
  5559 ;;  signs           1   66[COMRAM] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  4   54[COMRAM] unsigned char 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5569 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;Total ram usage:       16 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    1
  5576 ;; This function calls:
  5577 ;;		Nothing
  5578 ;; This function is called by:
  5579 ;;		_printf
  5580 ;;		___flsub
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           	psect	text19
  5585  000FE4                     __ptext19:
  5586                           	callstack 0
  5587  000FE4                     ___fladd:
  5588                           	callstack 26
  5589                           
  5590                           ;incstack = 0
  5591  000FE4  503A               	movf	(___fladd@b+3)^0,w,c
  5592  000FE6  0B80               	andlw	128
  5593  000FE8  6E43               	movwf	___fladd@signs^0,c
  5594  000FEA  503A               	movf	(___fladd@b+3)^0,w,c
  5595  000FEC  243A               	addwf	(___fladd@b+3)^0,w,c
  5596  000FEE  6E45               	movwf	___fladd@bexp^0,c
  5597  000FF0  BE39               	btfsc	(___fladd@b+2)^0,7,c
  5598  000FF2  8045               	bsf	___fladd@bexp^0,0,c
  5599  000FF4  5045               	movf	___fladd@bexp^0,w,c
  5600  000FF6  B4D8               	btfsc	status,2,c
  5601  000FF8  D00D               	goto	l3015
  5602  000FFA  2845               	incf	___fladd@bexp^0,w,c
  5603  000FFC  A4D8               	btfss	status,2,c
  5604  000FFE  D008               	goto	l3011
  5605  001000  0E00               	movlw	0
  5606  001002  6E37               	movwf	___fladd@b^0,c
  5607  001004  0E00               	movlw	0
  5608  001006  6E38               	movwf	(___fladd@b+1)^0,c
  5609  001008  0E00               	movlw	0
  5610  00100A  6E39               	movwf	(___fladd@b+2)^0,c
  5611  00100C  0E00               	movlw	0
  5612  00100E  6E3A               	movwf	(___fladd@b+3)^0,c
  5613  001010                     l3011:
  5614  001010  8E39               	bsf	(___fladd@b+2)^0,7,c
  5615  001012  D006               	goto	L4
  5616  001014                     l3015:
  5617  001014  0E00               	movlw	0
  5618  001016  6E37               	movwf	___fladd@b^0,c
  5619  001018  0E00               	movlw	0
  5620  00101A  6E38               	movwf	(___fladd@b+1)^0,c
  5621  00101C  0E00               	movlw	0
  5622  00101E  6E39               	movwf	(___fladd@b+2)^0,c
  5623  001020                     L4:
  5624  001020  0E00               	movlw	0
  5625  001022  6E3A               	movwf	(___fladd@b+3)^0,c
  5626  001024  503E               	movf	(___fladd@a+3)^0,w,c
  5627  001026  0B80               	andlw	128
  5628  001028  6E44               	movwf	___fladd@aexp^0,c
  5629  00102A  5043               	movf	___fladd@signs^0,w,c
  5630  00102C  1844               	xorwf	___fladd@aexp^0,w,c
  5631  00102E  A4D8               	btfss	status,2,c
  5632  001030  8C43               	bsf	___fladd@signs^0,6,c
  5633  001032  503E               	movf	(___fladd@a+3)^0,w,c
  5634  001034  243E               	addwf	(___fladd@a+3)^0,w,c
  5635  001036  6E44               	movwf	___fladd@aexp^0,c
  5636  001038  BE3D               	btfsc	(___fladd@a+2)^0,7,c
  5637  00103A  8044               	bsf	___fladd@aexp^0,0,c
  5638  00103C  5044               	movf	___fladd@aexp^0,w,c
  5639  00103E  B4D8               	btfsc	status,2,c
  5640  001040  D00D               	goto	l3039
  5641  001042  2844               	incf	___fladd@aexp^0,w,c
  5642  001044  A4D8               	btfss	status,2,c
  5643  001046  D008               	goto	l3035
  5644  001048  0E00               	movlw	0
  5645  00104A  6E3B               	movwf	___fladd@a^0,c
  5646  00104C  0E00               	movlw	0
  5647  00104E  6E3C               	movwf	(___fladd@a+1)^0,c
  5648  001050  0E00               	movlw	0
  5649  001052  6E3D               	movwf	(___fladd@a+2)^0,c
  5650  001054  0E00               	movlw	0
  5651  001056  6E3E               	movwf	(___fladd@a+3)^0,c
  5652  001058                     l3035:
  5653  001058  8E3D               	bsf	(___fladd@a+2)^0,7,c
  5654  00105A  D006               	goto	L5
  5655  00105C                     l3039:
  5656  00105C  0E00               	movlw	0
  5657  00105E  6E3B               	movwf	___fladd@a^0,c
  5658  001060  0E00               	movlw	0
  5659  001062  6E3C               	movwf	(___fladd@a+1)^0,c
  5660  001064  0E00               	movlw	0
  5661  001066  6E3D               	movwf	(___fladd@a+2)^0,c
  5662  001068                     L5:
  5663  001068  0E00               	movlw	0
  5664  00106A  6E3E               	movwf	(___fladd@a+3)^0,c
  5665  00106C  5045               	movf	___fladd@bexp^0,w,c
  5666  00106E  5C44               	subwf	___fladd@aexp^0,w,c
  5667  001070  B0D8               	btfsc	status,0,c
  5668  001072  D022               	goto	l3077
  5669  001074  AC43               	btfss	___fladd@signs^0,6,c
  5670  001076  D002               	goto	l3047
  5671  001078  0E80               	movlw	128
  5672  00107A  1A43               	xorwf	___fladd@signs^0,f,c
  5673  00107C                     l3047:
  5674  00107C  C045  F046         	movff	___fladd@bexp,___fladd@grs
  5675  001080  C044  F045         	movff	___fladd@aexp,___fladd@bexp
  5676  001084  C046  F044         	movff	___fladd@grs,___fladd@aexp
  5677  001088  C037  F046         	movff	___fladd@b,___fladd@grs
  5678  00108C  C03B  F037         	movff	___fladd@a,___fladd@b
  5679  001090  C046  F03B         	movff	___fladd@grs,___fladd@a
  5680  001094  C038  F046         	movff	___fladd@b+1,___fladd@grs
  5681  001098  C03C  F038         	movff	___fladd@a+1,___fladd@b+1
  5682  00109C  C046  F03C         	movff	___fladd@grs,___fladd@a+1
  5683  0010A0  C039  F046         	movff	___fladd@b+2,___fladd@grs
  5684  0010A4  C03D  F039         	movff	___fladd@a+2,___fladd@b+2
  5685  0010A8  C046  F03D         	movff	___fladd@grs,___fladd@a+2
  5686  0010AC  C03A  F046         	movff	___fladd@b+3,___fladd@grs
  5687  0010B0  C03E  F03A         	movff	___fladd@a+3,___fladd@b+3
  5688  0010B4  C046  F03E         	movff	___fladd@grs,___fladd@a+3
  5689  0010B8                     l3077:
  5690  0010B8  0E00               	movlw	0
  5691  0010BA  6E46               	movwf	___fladd@grs^0,c
  5692  0010BC  5045               	movf	___fladd@bexp^0,w,c
  5693  0010BE  C044  F03F         	movff	___fladd@aexp,??___fladd
  5694  0010C2  6A40               	clrf	(??___fladd+1)^0,c
  5695  0010C4  5E3F               	subwf	??___fladd^0,f,c
  5696  0010C6  0E00               	movlw	0
  5697  0010C8  5A40               	subwfb	(??___fladd+1)^0,f,c
  5698  0010CA  BE40               	btfsc	(??___fladd+1)^0,7,c
  5699  0010CC  D02C               	goto	l1025
  5700  0010CE  5040               	movf	(??___fladd+1)^0,w,c
  5701  0010D0  E104               	bnz	u2160
  5702  0010D2  0E1A               	movlw	26
  5703  0010D4  5C3F               	subwf	??___fladd^0,w,c
  5704  0010D6  A0D8               	btfss	status,0,c
  5705  0010D8  D026               	goto	l1025
  5706  0010DA                     u2160:
  5707  0010DA  5037               	movf	___fladd@b^0,w,c
  5708  0010DC  1038               	iorwf	(___fladd@b+1)^0,w,c
  5709  0010DE  1039               	iorwf	(___fladd@b+2)^0,w,c
  5710  0010E0  103A               	iorwf	(___fladd@b+3)^0,w,c
  5711  0010E2  B4D8               	btfsc	status,2,c
  5712  0010E4  D002               	goto	u2170
  5713  0010E6  0E01               	movlw	1
  5714  0010E8  D001               	goto	u2180
  5715  0010EA                     u2170:
  5716  0010EA  0E00               	movlw	0
  5717  0010EC                     u2180:
  5718  0010EC  6E46               	movwf	___fladd@grs^0,c
  5719  0010EE  0E00               	movlw	0
  5720  0010F0  6E37               	movwf	___fladd@b^0,c
  5721  0010F2  0E00               	movlw	0
  5722  0010F4  6E38               	movwf	(___fladd@b+1)^0,c
  5723  0010F6  0E00               	movlw	0
  5724  0010F8  6E39               	movwf	(___fladd@b+2)^0,c
  5725  0010FA  0E00               	movlw	0
  5726  0010FC  6E3A               	movwf	(___fladd@b+3)^0,c
  5727  0010FE  C044  F045         	movff	___fladd@aexp,___fladd@bexp
  5728  001102  D015               	goto	u2210
  5729  001104                     l1026:
  5730  001104  A046               	btfss	___fladd@grs^0,0,c
  5731  001106  D005               	goto	l3089
  5732  001108  90D8               	bcf	status,0,c
  5733  00110A  3046               	rrcf	___fladd@grs^0,w,c
  5734  00110C  0901               	iorlw	1
  5735  00110E  6E46               	movwf	___fladd@grs^0,c
  5736  001110  D002               	goto	l3091
  5737  001112                     l3089:
  5738  001112  90D8               	bcf	status,0,c
  5739  001114  3246               	rrcf	___fladd@grs^0,f,c
  5740  001116                     l3091:
  5741  001116  B037               	btfsc	___fladd@b^0,0,c
  5742  001118  8E46               	bsf	___fladd@grs^0,7,c
  5743  00111A  343A               	rlcf	(___fladd@b+3)^0,w,c
  5744  00111C  323A               	rrcf	(___fladd@b+3)^0,f,c
  5745  00111E  3239               	rrcf	(___fladd@b+2)^0,f,c
  5746  001120  3238               	rrcf	(___fladd@b+1)^0,f,c
  5747  001122  3237               	rrcf	___fladd@b^0,f,c
  5748  001124  2A45               	incf	___fladd@bexp^0,f,c
  5749  001126                     l1025:
  5750  001126  5044               	movf	___fladd@aexp^0,w,c
  5751  001128  5C45               	subwf	___fladd@bexp^0,w,c
  5752  00112A  A0D8               	btfss	status,0,c
  5753  00112C  D7EB               	goto	l1026
  5754  00112E                     u2210:
  5755  00112E  BC43               	btfsc	___fladd@signs^0,6,c
  5756  001130  D028               	goto	l3123
  5757  001132  5045               	movf	___fladd@bexp^0,w,c
  5758  001134  A4D8               	btfss	status,2,c
  5759  001136  D009               	goto	l3105
  5760  001138  0E00               	movlw	0
  5761  00113A  6E37               	movwf	?___fladd^0,c
  5762  00113C  0E00               	movlw	0
  5763  00113E  6E38               	movwf	(?___fladd+1)^0,c
  5764  001140  0E00               	movlw	0
  5765  001142  6E39               	movwf	(?___fladd+2)^0,c
  5766  001144  0E00               	movlw	0
  5767  001146  6E3A               	movwf	(?___fladd+3)^0,c
  5768  001148  0012               	return	
  5769  00114A                     l3105:
  5770  00114A  503B               	movf	___fladd@a^0,w,c
  5771  00114C  2637               	addwf	___fladd@b^0,f,c
  5772  00114E  503C               	movf	(___fladd@a+1)^0,w,c
  5773  001150  2238               	addwfc	(___fladd@b+1)^0,f,c
  5774  001152  503D               	movf	(___fladd@a+2)^0,w,c
  5775  001154  2239               	addwfc	(___fladd@b+2)^0,f,c
  5776  001156  503E               	movf	(___fladd@a+3)^0,w,c
  5777  001158  223A               	addwfc	(___fladd@b+3)^0,f,c
  5778  00115A  A03A               	btfss	(___fladd@b+3)^0,0,c
  5779  00115C  D071               	goto	u2340
  5780  00115E  A046               	btfss	___fladd@grs^0,0,c
  5781  001160  D005               	goto	l3113
  5782  001162  90D8               	bcf	status,0,c
  5783  001164  3046               	rrcf	___fladd@grs^0,w,c
  5784  001166  0901               	iorlw	1
  5785  001168  6E46               	movwf	___fladd@grs^0,c
  5786  00116A  D002               	goto	l3115
  5787  00116C                     l3113:
  5788  00116C  90D8               	bcf	status,0,c
  5789  00116E  3246               	rrcf	___fladd@grs^0,f,c
  5790  001170                     l3115:
  5791  001170  B037               	btfsc	___fladd@b^0,0,c
  5792  001172  8E46               	bsf	___fladd@grs^0,7,c
  5793  001174  343A               	rlcf	(___fladd@b+3)^0,w,c
  5794  001176  323A               	rrcf	(___fladd@b+3)^0,f,c
  5795  001178  3239               	rrcf	(___fladd@b+2)^0,f,c
  5796  00117A  3238               	rrcf	(___fladd@b+1)^0,f,c
  5797  00117C  3237               	rrcf	___fladd@b^0,f,c
  5798  00117E  2A45               	incf	___fladd@bexp^0,f,c
  5799  001180  D05F               	goto	u2340
  5800  001182                     l3123:
  5801  001182  503B               	movf	___fladd@a^0,w,c
  5802  001184  5C37               	subwf	___fladd@b^0,w,c
  5803  001186  503C               	movf	(___fladd@a+1)^0,w,c
  5804  001188  5838               	subwfb	(___fladd@b+1)^0,w,c
  5805  00118A  503D               	movf	(___fladd@a+2)^0,w,c
  5806  00118C  5839               	subwfb	(___fladd@b+2)^0,w,c
  5807  00118E  503A               	movf	(___fladd@b+3)^0,w,c
  5808  001190  0A80               	xorlw	128
  5809  001192  6E3F               	movwf	??___fladd^0,c
  5810  001194  503E               	movf	(___fladd@a+3)^0,w,c
  5811  001196  0A80               	xorlw	128
  5812  001198  583F               	subwfb	??___fladd^0,w,c
  5813  00119A  B0D8               	btfsc	status,0,c
  5814  00119C  D025               	goto	l3133
  5815  00119E  5037               	movf	___fladd@b^0,w,c
  5816  0011A0  5C3B               	subwf	___fladd@a^0,w,c
  5817  0011A2  6E3F               	movwf	??___fladd^0,c
  5818  0011A4  5038               	movf	(___fladd@b+1)^0,w,c
  5819  0011A6  583C               	subwfb	(___fladd@a+1)^0,w,c
  5820  0011A8  6E40               	movwf	(??___fladd+1)^0,c
  5821  0011AA  5039               	movf	(___fladd@b+2)^0,w,c
  5822  0011AC  583D               	subwfb	(___fladd@a+2)^0,w,c
  5823  0011AE  6E41               	movwf	(??___fladd+2)^0,c
  5824  0011B0  503A               	movf	(___fladd@b+3)^0,w,c
  5825  0011B2  583E               	subwfb	(___fladd@a+3)^0,w,c
  5826  0011B4  6E42               	movwf	(??___fladd+3)^0,c
  5827  0011B6  0EFF               	movlw	255
  5828  0011B8  243F               	addwf	??___fladd^0,w,c
  5829  0011BA  6E37               	movwf	___fladd@b^0,c
  5830  0011BC  0EFF               	movlw	255
  5831  0011BE  2040               	addwfc	(??___fladd+1)^0,w,c
  5832  0011C0  6E38               	movwf	(___fladd@b+1)^0,c
  5833  0011C2  0EFF               	movlw	255
  5834  0011C4  2041               	addwfc	(??___fladd+2)^0,w,c
  5835  0011C6  6E39               	movwf	(___fladd@b+2)^0,c
  5836  0011C8  0EFF               	movlw	255
  5837  0011CA  2042               	addwfc	(??___fladd+3)^0,w,c
  5838  0011CC  6E3A               	movwf	(___fladd@b+3)^0,c
  5839  0011CE  0E80               	movlw	128
  5840  0011D0  1A43               	xorwf	___fladd@signs^0,f,c
  5841  0011D2  6C46               	negf	___fladd@grs^0,c
  5842  0011D4  5046               	movf	___fladd@grs^0,w,c
  5843  0011D6  A4D8               	btfss	status,2,c
  5844  0011D8  D00F               	goto	l1041
  5845  0011DA  0E01               	movlw	1
  5846  0011DC  2637               	addwf	___fladd@b^0,f,c
  5847  0011DE  0E00               	movlw	0
  5848  0011E0  2238               	addwfc	(___fladd@b+1)^0,f,c
  5849  0011E2  2239               	addwfc	(___fladd@b+2)^0,f,c
  5850  0011E4  223A               	addwfc	(___fladd@b+3)^0,f,c
  5851  0011E6  D008               	goto	l1041
  5852  0011E8                     l3133:
  5853  0011E8  503B               	movf	___fladd@a^0,w,c
  5854  0011EA  5E37               	subwf	___fladd@b^0,f,c
  5855  0011EC  503C               	movf	(___fladd@a+1)^0,w,c
  5856  0011EE  5A38               	subwfb	(___fladd@b+1)^0,f,c
  5857  0011F0  503D               	movf	(___fladd@a+2)^0,w,c
  5858  0011F2  5A39               	subwfb	(___fladd@b+2)^0,f,c
  5859  0011F4  503E               	movf	(___fladd@a+3)^0,w,c
  5860  0011F6  5A3A               	subwfb	(___fladd@b+3)^0,f,c
  5861  0011F8                     l1041:
  5862  0011F8  5037               	movf	___fladd@b^0,w,c
  5863  0011FA  1038               	iorwf	(___fladd@b+1)^0,w,c
  5864  0011FC  1039               	iorwf	(___fladd@b+2)^0,w,c
  5865  0011FE  103A               	iorwf	(___fladd@b+3)^0,w,c
  5866  001200  A4D8               	btfss	status,2,c
  5867  001202  D01C               	goto	l3157
  5868  001204  5046               	movf	___fladd@grs^0,w,c
  5869  001206  A4D8               	btfss	status,2,c
  5870  001208  D019               	goto	l3157
  5871  00120A  0E00               	movlw	0
  5872  00120C  6E37               	movwf	?___fladd^0,c
  5873  00120E  0E00               	movlw	0
  5874  001210  6E38               	movwf	(?___fladd+1)^0,c
  5875  001212  0E00               	movlw	0
  5876  001214  6E39               	movwf	(?___fladd+2)^0,c
  5877  001216  0E00               	movlw	0
  5878  001218  6E3A               	movwf	(?___fladd+3)^0,c
  5879  00121A  0012               	return	
  5880  00121C                     l3141:
  5881  00121C  90D8               	bcf	status,0,c
  5882  00121E  3637               	rlcf	___fladd@b^0,f,c
  5883  001220  3638               	rlcf	(___fladd@b+1)^0,f,c
  5884  001222  3639               	rlcf	(___fladd@b+2)^0,f,c
  5885  001224  363A               	rlcf	(___fladd@b+3)^0,f,c
  5886  001226  BE46               	btfsc	___fladd@grs^0,7,c
  5887  001228  8037               	bsf	___fladd@b^0,0,c
  5888  00122A  A046               	btfss	___fladd@grs^0,0,c
  5889  00122C  D002               	goto	l3151
  5890  00122E  80D8               	bsf	status,0,c
  5891  001230  D001               	goto	L6
  5892  001232                     l3151:
  5893  001232  90D8               	bcf	status,0,c
  5894  001234                     L6:
  5895  001234  3646               	rlcf	___fladd@grs^0,f,c
  5896  001236  5045               	movf	___fladd@bexp^0,w,c
  5897  001238  A4D8               	btfss	status,2,c
  5898  00123A  0645               	decf	___fladd@bexp^0,f,c
  5899  00123C                     l3157:
  5900  00123C  AE39               	btfss	(___fladd@b+2)^0,7,c
  5901  00123E  D7EE               	goto	l3141
  5902  001240                     u2340:
  5903  001240  0E00               	movlw	0
  5904  001242  6E44               	movwf	___fladd@aexp^0,c
  5905  001244  AE46               	btfss	___fladd@grs^0,7,c
  5906  001246  D00B               	goto	l1050
  5907  001248  C046  F03F         	movff	___fladd@grs,??___fladd
  5908  00124C  0E7F               	movlw	127
  5909  00124E  163F               	andwf	??___fladd^0,f,c
  5910  001250  B4D8               	btfsc	status,2,c
  5911  001252  D003               	goto	l1051
  5912  001254                     u2360:
  5913  001254  0E01               	movlw	1
  5914  001256  6E44               	movwf	___fladd@aexp^0,c
  5915  001258  D002               	goto	l1050
  5916  00125A                     l1051:
  5917  00125A  B037               	btfsc	___fladd@b^0,0,c
  5918  00125C  D7FB               	goto	u2360
  5919  00125E                     l1050:
  5920  00125E  5044               	movf	___fladd@aexp^0,w,c
  5921  001260  B4D8               	btfsc	status,2,c
  5922  001262  D020               	goto	l3177
  5923  001264  0E01               	movlw	1
  5924  001266  2637               	addwf	___fladd@b^0,f,c
  5925  001268  0E00               	movlw	0
  5926  00126A  2238               	addwfc	(___fladd@b+1)^0,f,c
  5927  00126C  2239               	addwfc	(___fladd@b+2)^0,f,c
  5928  00126E  223A               	addwfc	(___fladd@b+3)^0,f,c
  5929  001270  A03A               	btfss	(___fladd@b+3)^0,0,c
  5930  001272  D018               	goto	l3177
  5931  001274  C037  F03F         	movff	___fladd@b,??___fladd
  5932  001278  C038  F040         	movff	___fladd@b+1,??___fladd+1
  5933  00127C  C039  F041         	movff	___fladd@b+2,??___fladd+2
  5934  001280  C03A  F042         	movff	___fladd@b+3,??___fladd+3
  5935  001284  3442               	rlcf	(??___fladd+3)^0,w,c
  5936  001286  3242               	rrcf	(??___fladd+3)^0,f,c
  5937  001288  3241               	rrcf	(??___fladd+2)^0,f,c
  5938  00128A  3240               	rrcf	(??___fladd+1)^0,f,c
  5939  00128C  323F               	rrcf	??___fladd^0,f,c
  5940  00128E  C03F  F037         	movff	??___fladd,___fladd@b
  5941  001292  C040  F038         	movff	??___fladd+1,___fladd@b+1
  5942  001296  C041  F039         	movff	??___fladd+2,___fladd@b+2
  5943  00129A  C042  F03A         	movff	??___fladd+3,___fladd@b+3
  5944  00129E  2845               	incf	___fladd@bexp^0,w,c
  5945  0012A0  A4D8               	btfss	status,2,c
  5946  0012A2  2A45               	incf	___fladd@bexp^0,f,c
  5947  0012A4                     l3177:
  5948  0012A4  2845               	incf	___fladd@bexp^0,w,c
  5949  0012A6  B4D8               	btfsc	status,2,c
  5950  0012A8  D003               	goto	u2420
  5951  0012AA  5045               	movf	___fladd@bexp^0,w,c
  5952  0012AC  A4D8               	btfss	status,2,c
  5953  0012AE  D00D               	goto	l3185
  5954  0012B0                     u2420:
  5955  0012B0  0E00               	movlw	0
  5956  0012B2  6E37               	movwf	___fladd@b^0,c
  5957  0012B4  0E00               	movlw	0
  5958  0012B6  6E38               	movwf	(___fladd@b+1)^0,c
  5959  0012B8  0E00               	movlw	0
  5960  0012BA  6E39               	movwf	(___fladd@b+2)^0,c
  5961  0012BC  0E00               	movlw	0
  5962  0012BE  6E3A               	movwf	(___fladd@b+3)^0,c
  5963  0012C0  5045               	movf	___fladd@bexp^0,w,c
  5964  0012C2  A4D8               	btfss	status,2,c
  5965  0012C4  D002               	goto	l3185
  5966  0012C6  0E00               	movlw	0
  5967  0012C8  6E43               	movwf	___fladd@signs^0,c
  5968  0012CA                     l3185:
  5969  0012CA  A045               	btfss	___fladd@bexp^0,0,c
  5970  0012CC  D002               	goto	l3189
  5971  0012CE  8E39               	bsf	(___fladd@b+2)^0,7,c
  5972  0012D0  D001               	goto	l3191
  5973  0012D2                     l3189:
  5974  0012D2  9E39               	bcf	(___fladd@b+2)^0,7,c
  5975  0012D4                     l3191:
  5976  0012D4  90D8               	bcf	status,0,c
  5977  0012D6  3045               	rrcf	___fladd@bexp^0,w,c
  5978  0012D8  6E3A               	movwf	(___fladd@b+3)^0,c
  5979  0012DA  BE43               	btfsc	___fladd@signs^0,7,c
  5980  0012DC  8E3A               	bsf	(___fladd@b+3)^0,7,c
  5981  0012DE  C037  F037         	movff	___fladd@b,?___fladd
  5982  0012E2  C038  F038         	movff	___fladd@b+1,?___fladd+1
  5983  0012E6  C039  F039         	movff	___fladd@b+2,?___fladd+2
  5984  0012EA  C03A  F03A         	movff	___fladd@b+3,?___fladd+3
  5985  0012EE  0012               	return		;funcret
  5986  0012F0                     __end_of___fladd:
  5987                           	callstack 0
  5988                           
  5989 ;; *************** function ___flneg *****************
  5990 ;; Defined at:
  5991 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\flneg.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  f1              4    0[COMRAM] unsigned char 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;		None
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  4    0[COMRAM] unsigned char 
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0
  6000 ;; Tracked objects:
  6001 ;;		On entry : 3F/0
  6002 ;;		On exit  : 3F/0
  6003 ;;		Unchanged: 3F/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6005 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;Total ram usage:        4 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:    1
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_printf
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text20
  6020  002702                     __ptext20:
  6021                           	callstack 0
  6022  002702                     ___flneg:
  6023                           	callstack 27
  6024                           
  6025                           ; BSR set to: 0
  6026                           
  6027                           ;incstack = 0
  6028  002702  5001               	movf	___flneg@f1^0,w,c
  6029  002704  1002               	iorwf	(___flneg@f1+1)^0,w,c
  6030  002706  1003               	iorwf	(___flneg@f1+2)^0,w,c
  6031  002708  1004               	iorwf	(___flneg@f1+3)^0,w,c
  6032  00270A  B4D8               	btfsc	status,2,c
  6033  00270C  D008               	goto	l3711
  6034                           
  6035                           ; BSR set to: 0
  6036  00270E  0E00               	movlw	0
  6037  002710  1A01               	xorwf	___flneg@f1^0,f,c
  6038  002712  0E00               	movlw	0
  6039  002714  1A02               	xorwf	(___flneg@f1+1)^0,f,c
  6040  002716  0E00               	movlw	0
  6041  002718  1A03               	xorwf	(___flneg@f1+2)^0,f,c
  6042  00271A  0E80               	movlw	128
  6043  00271C  1A04               	xorwf	(___flneg@f1+3)^0,f,c
  6044  00271E                     l3711:
  6045                           
  6046                           ; BSR set to: 0
  6047  00271E  C001  F001         	movff	___flneg@f1,?___flneg
  6048  002722  C002  F002         	movff	___flneg@f1+1,?___flneg+1
  6049  002726  C003  F003         	movff	___flneg@f1+2,?___flneg+2
  6050  00272A  C004  F004         	movff	___flneg@f1+3,?___flneg+3
  6051                           
  6052                           ; BSR set to: 0
  6053  00272E  0012               	return		;funcret
  6054  002730                     __end_of___flneg:
  6055                           	callstack 0
  6056                           
  6057 ;; *************** function ___flge *****************
  6058 ;; Defined at:
  6059 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\flge.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  ff1             4    0[COMRAM] unsigned char 
  6062 ;;  ff2             4    4[COMRAM] unsigned char 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;		None
  6065 ;; Return value:  Size  Location     Type
  6066 ;;		None               void
  6067 ;; Registers used:
  6068 ;;		wreg, status,2, status,0
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6074 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;Total ram usage:       12 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:    1
  6081 ;; This function calls:
  6082 ;;		Nothing
  6083 ;; This function is called by:
  6084 ;;		_printf
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text21
  6089  001EB4                     __ptext21:
  6090                           	callstack 0
  6091  001EB4                     ___flge:
  6092                           	callstack 27
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;incstack = 0
  6096  001EB4  0E00               	movlw	0
  6097  001EB6  1401               	andwf	___flge@ff1^0,w,c
  6098  001EB8  6E09               	movwf	??___flge^0,c
  6099  001EBA  0E00               	movlw	0
  6100  001EBC  1402               	andwf	(___flge@ff1+1)^0,w,c
  6101  001EBE  6E0A               	movwf	(??___flge+1)^0,c
  6102  001EC0  0E80               	movlw	128
  6103  001EC2  1403               	andwf	(___flge@ff1+2)^0,w,c
  6104  001EC4  6E0B               	movwf	(??___flge+2)^0,c
  6105  001EC6  0E7F               	movlw	127
  6106  001EC8  1404               	andwf	(___flge@ff1+3)^0,w,c
  6107  001ECA  6E0C               	movwf	(??___flge+3)^0,c
  6108  001ECC  5009               	movf	??___flge^0,w,c
  6109  001ECE  100A               	iorwf	(??___flge+1)^0,w,c
  6110  001ED0  100B               	iorwf	(??___flge+2)^0,w,c
  6111  001ED2  100C               	iorwf	(??___flge+3)^0,w,c
  6112  001ED4  A4D8               	btfss	status,2,c
  6113  001ED6  D008               	goto	l3689
  6114  001ED8  0E00               	movlw	0
  6115  001EDA  6E01               	movwf	___flge@ff1^0,c
  6116  001EDC  0E00               	movlw	0
  6117  001EDE  6E02               	movwf	(___flge@ff1+1)^0,c
  6118  001EE0  0E00               	movlw	0
  6119  001EE2  6E03               	movwf	(___flge@ff1+2)^0,c
  6120  001EE4  0E00               	movlw	0
  6121  001EE6  6E04               	movwf	(___flge@ff1+3)^0,c
  6122  001EE8                     l3689:
  6123  001EE8  0E00               	movlw	0
  6124  001EEA  1405               	andwf	___flge@ff2^0,w,c
  6125  001EEC  6E09               	movwf	??___flge^0,c
  6126  001EEE  0E00               	movlw	0
  6127  001EF0  1406               	andwf	(___flge@ff2+1)^0,w,c
  6128  001EF2  6E0A               	movwf	(??___flge+1)^0,c
  6129  001EF4  0E80               	movlw	128
  6130  001EF6  1407               	andwf	(___flge@ff2+2)^0,w,c
  6131  001EF8  6E0B               	movwf	(??___flge+2)^0,c
  6132  001EFA  0E7F               	movlw	127
  6133  001EFC  1408               	andwf	(___flge@ff2+3)^0,w,c
  6134  001EFE  6E0C               	movwf	(??___flge+3)^0,c
  6135  001F00  5009               	movf	??___flge^0,w,c
  6136  001F02  100A               	iorwf	(??___flge+1)^0,w,c
  6137  001F04  100B               	iorwf	(??___flge+2)^0,w,c
  6138  001F06  100C               	iorwf	(??___flge+3)^0,w,c
  6139  001F08  A4D8               	btfss	status,2,c
  6140  001F0A  D008               	goto	l3693
  6141  001F0C  0E00               	movlw	0
  6142  001F0E  6E05               	movwf	___flge@ff2^0,c
  6143  001F10  0E00               	movlw	0
  6144  001F12  6E06               	movwf	(___flge@ff2+1)^0,c
  6145  001F14  0E00               	movlw	0
  6146  001F16  6E07               	movwf	(___flge@ff2+2)^0,c
  6147  001F18  0E00               	movlw	0
  6148  001F1A  6E08               	movwf	(___flge@ff2+3)^0,c
  6149  001F1C                     l3693:
  6150  001F1C  AE04               	btfss	(___flge@ff1+3)^0,7,c
  6151  001F1E  D009               	goto	l3697
  6152  001F20  6C01               	negf	___flge@ff1^0,c
  6153  001F22  1E02               	comf	(___flge@ff1+1)^0,f,c
  6154  001F24  B0D8               	btfsc	status,0,c
  6155  001F26  2A02               	incf	(___flge@ff1+1)^0,f,c
  6156  001F28  1E03               	comf	(___flge@ff1+2)^0,f,c
  6157  001F2A  B0D8               	btfsc	status,0,c
  6158  001F2C  2A03               	incf	(___flge@ff1+2)^0,f,c
  6159  001F2E  0E80               	movlw	128
  6160  001F30  5604               	subfwb	(___flge@ff1+3)^0,f,c
  6161  001F32                     l3697:
  6162  001F32  AE08               	btfss	(___flge@ff2+3)^0,7,c
  6163  001F34  D009               	goto	l752
  6164  001F36  6C05               	negf	___flge@ff2^0,c
  6165  001F38  1E06               	comf	(___flge@ff2+1)^0,f,c
  6166  001F3A  B0D8               	btfsc	status,0,c
  6167  001F3C  2A06               	incf	(___flge@ff2+1)^0,f,c
  6168  001F3E  1E07               	comf	(___flge@ff2+2)^0,f,c
  6169  001F40  B0D8               	btfsc	status,0,c
  6170  001F42  2A07               	incf	(___flge@ff2+2)^0,f,c
  6171  001F44  0E80               	movlw	128
  6172  001F46  5608               	subfwb	(___flge@ff2+3)^0,f,c
  6173  001F48                     l752:
  6174  001F48  0E00               	movlw	0
  6175  001F4A  1A01               	xorwf	___flge@ff1^0,f,c
  6176  001F4C  0E00               	movlw	0
  6177  001F4E  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  6178  001F50  0E00               	movlw	0
  6179  001F52  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  6180  001F54  0E80               	movlw	128
  6181  001F56  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  6182  001F58  0E00               	movlw	0
  6183  001F5A  1A05               	xorwf	___flge@ff2^0,f,c
  6184  001F5C  0E00               	movlw	0
  6185  001F5E  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  6186  001F60  0E00               	movlw	0
  6187  001F62  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  6188  001F64  0E80               	movlw	128
  6189  001F66  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  6190  001F68  5005               	movf	___flge@ff2^0,w,c
  6191  001F6A  5C01               	subwf	___flge@ff1^0,w,c
  6192  001F6C  5006               	movf	(___flge@ff2+1)^0,w,c
  6193  001F6E  5802               	subwfb	(___flge@ff1+1)^0,w,c
  6194  001F70  5007               	movf	(___flge@ff2+2)^0,w,c
  6195  001F72  5803               	subwfb	(___flge@ff1+2)^0,w,c
  6196  001F74  5008               	movf	(___flge@ff2+3)^0,w,c
  6197  001F76  5804               	subwfb	(___flge@ff1+3)^0,w,c
  6198  001F78  B0D8               	btfsc	status,0,c
  6199  001F7A  D002               	goto	l3703
  6200  001F7C  90D8               	bcf	status,0,c
  6201  001F7E  0012               	return	
  6202  001F80                     l3703:
  6203  001F80  80D8               	bsf	status,0,c
  6204  001F82  0012               	return		;funcret
  6205  001F84                     __end_of___flge:
  6206                           	callstack 0
  6207                           
  6208 ;; *************** function ___fleq *****************
  6209 ;; Defined at:
  6210 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fleq.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;  ff1             4    0[COMRAM] unsigned char 
  6213 ;;  ff2             4    4[COMRAM] unsigned char 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;		None
  6216 ;; Return value:  Size  Location     Type
  6217 ;;		None               void
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0
  6220 ;; Tracked objects:
  6221 ;;		On entry : 3F/0
  6222 ;;		On exit  : 3F/0
  6223 ;;		Unchanged: 3F/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6225 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;Total ram usage:       12 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    1
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_printf
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text22
  6240  0021A0                     __ptext22:
  6241                           	callstack 0
  6242  0021A0                     ___fleq:
  6243                           	callstack 27
  6244                           
  6245                           ; BSR set to: 0
  6246                           
  6247                           ;incstack = 0
  6248  0021A0  0E00               	movlw	0
  6249  0021A2  1401               	andwf	___fleq@ff1^0,w,c
  6250  0021A4  6E09               	movwf	??___fleq^0,c
  6251  0021A6  0E00               	movlw	0
  6252  0021A8  1402               	andwf	(___fleq@ff1+1)^0,w,c
  6253  0021AA  6E0A               	movwf	(??___fleq+1)^0,c
  6254  0021AC  0E80               	movlw	128
  6255  0021AE  1403               	andwf	(___fleq@ff1+2)^0,w,c
  6256  0021B0  6E0B               	movwf	(??___fleq+2)^0,c
  6257  0021B2  0E7F               	movlw	127
  6258  0021B4  1404               	andwf	(___fleq@ff1+3)^0,w,c
  6259  0021B6  6E0C               	movwf	(??___fleq+3)^0,c
  6260  0021B8  5009               	movf	??___fleq^0,w,c
  6261  0021BA  100A               	iorwf	(??___fleq+1)^0,w,c
  6262  0021BC  100B               	iorwf	(??___fleq+2)^0,w,c
  6263  0021BE  100C               	iorwf	(??___fleq+3)^0,w,c
  6264  0021C0  A4D8               	btfss	status,2,c
  6265  0021C2  D008               	goto	l3673
  6266                           
  6267                           ; BSR set to: 0
  6268  0021C4  0E00               	movlw	0
  6269  0021C6  6E01               	movwf	___fleq@ff1^0,c
  6270  0021C8  0E00               	movlw	0
  6271  0021CA  6E02               	movwf	(___fleq@ff1+1)^0,c
  6272  0021CC  0E00               	movlw	0
  6273  0021CE  6E03               	movwf	(___fleq@ff1+2)^0,c
  6274  0021D0  0E00               	movlw	0
  6275  0021D2  6E04               	movwf	(___fleq@ff1+3)^0,c
  6276  0021D4                     l3673:
  6277                           
  6278                           ; BSR set to: 0
  6279  0021D4  0E00               	movlw	0
  6280  0021D6  1405               	andwf	___fleq@ff2^0,w,c
  6281  0021D8  6E09               	movwf	??___fleq^0,c
  6282  0021DA  0E00               	movlw	0
  6283  0021DC  1406               	andwf	(___fleq@ff2+1)^0,w,c
  6284  0021DE  6E0A               	movwf	(??___fleq+1)^0,c
  6285  0021E0  0E80               	movlw	128
  6286  0021E2  1407               	andwf	(___fleq@ff2+2)^0,w,c
  6287  0021E4  6E0B               	movwf	(??___fleq+2)^0,c
  6288  0021E6  0E7F               	movlw	127
  6289  0021E8  1408               	andwf	(___fleq@ff2+3)^0,w,c
  6290  0021EA  6E0C               	movwf	(??___fleq+3)^0,c
  6291  0021EC  5009               	movf	??___fleq^0,w,c
  6292  0021EE  100A               	iorwf	(??___fleq+1)^0,w,c
  6293  0021F0  100B               	iorwf	(??___fleq+2)^0,w,c
  6294  0021F2  100C               	iorwf	(??___fleq+3)^0,w,c
  6295  0021F4  A4D8               	btfss	status,2,c
  6296  0021F6  D008               	goto	l3677
  6297                           
  6298                           ; BSR set to: 0
  6299  0021F8  0E00               	movlw	0
  6300  0021FA  6E05               	movwf	___fleq@ff2^0,c
  6301  0021FC  0E00               	movlw	0
  6302  0021FE  6E06               	movwf	(___fleq@ff2+1)^0,c
  6303  002200  0E00               	movlw	0
  6304  002202  6E07               	movwf	(___fleq@ff2+2)^0,c
  6305  002204  0E00               	movlw	0
  6306  002206  6E08               	movwf	(___fleq@ff2+3)^0,c
  6307  002208                     l3677:
  6308                           
  6309                           ; BSR set to: 0
  6310  002208  5005               	movf	___fleq@ff2^0,w,c
  6311  00220A  1801               	xorwf	___fleq@ff1^0,w,c
  6312  00220C  E10A               	bnz	u3100
  6313  00220E  5006               	movf	(___fleq@ff2+1)^0,w,c
  6314  002210  1802               	xorwf	(___fleq@ff1+1)^0,w,c
  6315  002212  E107               	bnz	u3100
  6316  002214  5007               	movf	(___fleq@ff2+2)^0,w,c
  6317  002216  1803               	xorwf	(___fleq@ff1+2)^0,w,c
  6318  002218  E104               	bnz	u3100
  6319  00221A  5008               	movf	(___fleq@ff2+3)^0,w,c
  6320  00221C  1804               	xorwf	(___fleq@ff1+3)^0,w,c
  6321  00221E  B4D8               	btfsc	status,2,c
  6322  002220  D002               	goto	l3681
  6323  002222                     u3100:
  6324                           
  6325                           ; BSR set to: 0
  6326  002222  90D8               	bcf	status,0,c
  6327  002224  0012               	return	
  6328  002226                     l3681:
  6329                           
  6330                           ; BSR set to: 0
  6331  002226  80D8               	bsf	status,0,c
  6332                           
  6333                           ; BSR set to: 0
  6334  002228  0012               	return		;funcret
  6335  00222A                     __end_of___fleq:
  6336                           	callstack 0
  6337                           
  6338 ;; *************** function _LoRaSetFrequency *****************
  6339 ;; Defined at:
  6340 ;;		line 225 in file "LoRa.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  freqMHz         4   58[COMRAM] float 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  intermediate    4   65[COMRAM] unsigned long 
  6345 ;;  lsb             1   64[COMRAM] unsigned char 
  6346 ;;  mid             1   63[COMRAM] unsigned char 
  6347 ;;  msb             1   62[COMRAM] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      void 
  6350 ;; Registers used:
  6351 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 3F/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6357 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;Total ram usage:       11 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    2
  6364 ;; This function calls:
  6365 ;;		_SPI2WriteByte
  6366 ;;		___flmul
  6367 ;;		___fltol
  6368 ;; This function is called by:
  6369 ;;		_LoRaStart
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text23
  6374  002330                     __ptext23:
  6375                           	callstack 0
  6376  002330                     _LoRaSetFrequency:
  6377                           	callstack 26
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;LoRa.c: 226: uint32_t intermediate = (freqMHz*16384);
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;incstack = 0
  6384  002330  0E00               	movlw	0
  6385  002332  6E13               	movwf	___flmul@a^0,c
  6386  002334  0E00               	movlw	0
  6387  002336  6E14               	movwf	(___flmul@a+1)^0,c
  6388  002338  0E80               	movlw	128
  6389  00233A  6E15               	movwf	(___flmul@a+2)^0,c
  6390  00233C  0E46               	movlw	70
  6391  00233E  6E16               	movwf	(___flmul@a+3)^0,c
  6392  002340  C03B  F00F         	movff	LoRaSetFrequency@freqMHz,___flmul@b
  6393  002344  C03C  F010         	movff	LoRaSetFrequency@freqMHz+1,___flmul@b+1
  6394  002348  C03D  F011         	movff	LoRaSetFrequency@freqMHz+2,___flmul@b+2
  6395  00234C  C03E  F012         	movff	LoRaSetFrequency@freqMHz+3,___flmul@b+3
  6396  002350  EC5C  F006         	call	___flmul	;wreg free
  6397  002354  C00F  F031         	movff	?___flmul,___fltol@f1
  6398  002358  C010  F032         	movff	?___flmul+1,___fltol@f1+1
  6399  00235C  C011  F033         	movff	?___flmul+2,___fltol@f1+2
  6400  002360  C012  F034         	movff	?___flmul+3,___fltol@f1+3
  6401  002364  EC28  F010         	call	___fltol	;wreg free
  6402  002368  C031  F042         	movff	?___fltol,LoRaSetFrequency@intermediate
  6403  00236C  C032  F043         	movff	?___fltol+1,LoRaSetFrequency@intermediate+1
  6404  002370  C033  F044         	movff	?___fltol+2,LoRaSetFrequency@intermediate+2
  6405  002374  C034  F045         	movff	?___fltol+3,LoRaSetFrequency@intermediate+3
  6406                           
  6407                           ;LoRa.c: 228: uint8_t msb = (intermediate>>16) & 0xFF;
  6408  002378  C044  F03F         	movff	LoRaSetFrequency@intermediate+2,LoRaSetFrequency@msb
  6409                           
  6410                           ;LoRa.c: 229: uint8_t mid = (intermediate>>8)& 0xFF;
  6411  00237C  C043  F040         	movff	LoRaSetFrequency@intermediate+1,LoRaSetFrequency@mid
  6412                           
  6413                           ;LoRa.c: 230: uint8_t lsb = intermediate & 0xFF;
  6414  002380  C042  F041         	movff	LoRaSetFrequency@intermediate,LoRaSetFrequency@lsb
  6415                           
  6416                           ;LoRa.c: 232: SPI2WriteByte(0x06,msb);
  6417  002384  C03F  F001         	movff	LoRaSetFrequency@msb,SPI2WriteByte@data
  6418  002388  0E06               	movlw	6
  6419  00238A  EC0D  F013         	call	_SPI2WriteByte
  6420                           
  6421                           ;LoRa.c: 233: SPI2WriteByte(0x07,mid);
  6422  00238E  C040  F001         	movff	LoRaSetFrequency@mid,SPI2WriteByte@data
  6423  002392  0E07               	movlw	7
  6424  002394  EC0D  F013         	call	_SPI2WriteByte
  6425                           
  6426                           ;LoRa.c: 234: SPI2WriteByte(0x08,lsb);
  6427  002398  C041  F001         	movff	LoRaSetFrequency@lsb,SPI2WriteByte@data
  6428  00239C  0E08               	movlw	8
  6429  00239E  EC0D  F013         	call	_SPI2WriteByte
  6430  0023A2  0012               	return		;funcret
  6431  0023A4                     __end_of_LoRaSetFrequency:
  6432                           	callstack 0
  6433                           
  6434 ;; *************** function ___fltol *****************
  6435 ;; Defined at:
  6436 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fltol.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  f1              4   48[COMRAM] void 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;  exp1            1   57[COMRAM] unsigned char 
  6441 ;;  sign1           1   56[COMRAM] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  4   48[COMRAM] long 
  6444 ;; Registers used:
  6445 ;;		wreg, status,2, status,0
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6451 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;Total ram usage:       10 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    1
  6458 ;; This function calls:
  6459 ;;		Nothing
  6460 ;; This function is called by:
  6461 ;;		_LoRaSetFrequency
  6462 ;;		_printf
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text24
  6467  002050                     __ptext24:
  6468                           	callstack 0
  6469  002050                     ___fltol:
  6470                           	callstack 27
  6471                           
  6472                           ;incstack = 0
  6473  002050  3433               	rlcf	(___fltol@f1+2)^0,w,c
  6474  002052  3434               	rlcf	(___fltol@f1+3)^0,w,c
  6475  002054  6E3A               	movwf	___fltol@exp1^0,c
  6476  002056  503A               	movf	___fltol@exp1^0,w,c
  6477  002058  A4D8               	btfss	status,2,c
  6478  00205A  D009               	goto	l3721
  6479  00205C                     u3170:
  6480  00205C  0E00               	movlw	0
  6481  00205E  6E31               	movwf	?___fltol^0,c
  6482  002060  0E00               	movlw	0
  6483  002062  6E32               	movwf	(?___fltol+1)^0,c
  6484  002064  0E00               	movlw	0
  6485  002066  6E33               	movwf	(?___fltol+2)^0,c
  6486  002068  0E00               	movlw	0
  6487  00206A  6E34               	movwf	(?___fltol+3)^0,c
  6488  00206C  0012               	return	
  6489  00206E                     l3721:
  6490  00206E  C031  F035         	movff	___fltol@f1,??___fltol
  6491  002072  C032  F036         	movff	___fltol@f1+1,??___fltol+1
  6492  002076  C033  F037         	movff	___fltol@f1+2,??___fltol+2
  6493  00207A  C034  F038         	movff	___fltol@f1+3,??___fltol+3
  6494  00207E  0E20               	movlw	32
  6495  002080  D005               	goto	u3180
  6496  002082                     u3185:
  6497  002082  90D8               	bcf	status,0,c
  6498  002084  3238               	rrcf	(??___fltol+3)^0,f,c
  6499  002086  3237               	rrcf	(??___fltol+2)^0,f,c
  6500  002088  3236               	rrcf	(??___fltol+1)^0,f,c
  6501  00208A  3235               	rrcf	??___fltol^0,f,c
  6502  00208C                     u3180:
  6503  00208C  2EE8               	decfsz	wreg,f,c
  6504  00208E  D7F9               	goto	u3185
  6505  002090  5035               	movf	??___fltol^0,w,c
  6506  002092  6E39               	movwf	___fltol@sign1^0,c
  6507  002094  8E33               	bsf	(___fltol@f1+2)^0,7,c
  6508  002096  0EFF               	movlw	255
  6509  002098  1631               	andwf	___fltol@f1^0,f,c
  6510  00209A  0EFF               	movlw	255
  6511  00209C  1632               	andwf	(___fltol@f1+1)^0,f,c
  6512  00209E  0EFF               	movlw	255
  6513  0020A0  1633               	andwf	(___fltol@f1+2)^0,f,c
  6514  0020A2  0E00               	movlw	0
  6515  0020A4  1634               	andwf	(___fltol@f1+3)^0,f,c
  6516  0020A6  0E96               	movlw	150
  6517  0020A8  5E3A               	subwf	___fltol@exp1^0,f,c
  6518  0020AA  AE3A               	btfss	___fltol@exp1^0,7,c
  6519  0020AC  D00D               	goto	l3741
  6520  0020AE  503A               	movf	___fltol@exp1^0,w,c
  6521  0020B0  0A80               	xorlw	128
  6522  0020B2  0F97               	addlw	151
  6523  0020B4  A0D8               	btfss	status,0,c
  6524  0020B6  D7D2               	goto	u3170
  6525  0020B8                     l3737:
  6526  0020B8  90D8               	bcf	status,0,c
  6527  0020BA  3234               	rrcf	(___fltol@f1+3)^0,f,c
  6528  0020BC  3233               	rrcf	(___fltol@f1+2)^0,f,c
  6529  0020BE  3232               	rrcf	(___fltol@f1+1)^0,f,c
  6530  0020C0  3231               	rrcf	___fltol@f1^0,f,c
  6531  0020C2  3E3A               	incfsz	___fltol@exp1^0,f,c
  6532  0020C4  D7F9               	goto	l3737
  6533  0020C6  D00D               	goto	u3220
  6534  0020C8                     l3741:
  6535  0020C8  0E1F               	movlw	31
  6536  0020CA  643A               	cpfsgt	___fltol@exp1^0,c
  6537  0020CC  D007               	goto	l3749
  6538  0020CE  D7C6               	goto	u3170
  6539  0020D0                     l3747:
  6540  0020D0  90D8               	bcf	status,0,c
  6541  0020D2  3631               	rlcf	___fltol@f1^0,f,c
  6542  0020D4  3632               	rlcf	(___fltol@f1+1)^0,f,c
  6543  0020D6  3633               	rlcf	(___fltol@f1+2)^0,f,c
  6544  0020D8  3634               	rlcf	(___fltol@f1+3)^0,f,c
  6545  0020DA  063A               	decf	___fltol@exp1^0,f,c
  6546  0020DC                     l3749:
  6547  0020DC  503A               	movf	___fltol@exp1^0,w,c
  6548  0020DE  A4D8               	btfss	status,2,c
  6549  0020E0  D7F7               	goto	l3747
  6550  0020E2                     u3220:
  6551  0020E2  5039               	movf	___fltol@sign1^0,w,c
  6552  0020E4  B4D8               	btfsc	status,2,c
  6553  0020E6  D008               	goto	l3755
  6554  0020E8  1E34               	comf	(___fltol@f1+3)^0,f,c
  6555  0020EA  1E33               	comf	(___fltol@f1+2)^0,f,c
  6556  0020EC  1E32               	comf	(___fltol@f1+1)^0,f,c
  6557  0020EE  6C31               	negf	___fltol@f1^0,c
  6558  0020F0  0E00               	movlw	0
  6559  0020F2  2232               	addwfc	(___fltol@f1+1)^0,f,c
  6560  0020F4  2233               	addwfc	(___fltol@f1+2)^0,f,c
  6561  0020F6  2234               	addwfc	(___fltol@f1+3)^0,f,c
  6562  0020F8                     l3755:
  6563  0020F8  C031  F031         	movff	___fltol@f1,?___fltol
  6564  0020FC  C032  F032         	movff	___fltol@f1+1,?___fltol+1
  6565  002100  C033  F033         	movff	___fltol@f1+2,?___fltol+2
  6566  002104  C034  F034         	movff	___fltol@f1+3,?___fltol+3
  6567  002108  0012               	return		;funcret
  6568  00210A                     __end_of___fltol:
  6569                           	callstack 0
  6570                           
  6571 ;; *************** function ___flmul *****************
  6572 ;; Defined at:
  6573 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\sprcmul.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  b               4   14[COMRAM] long 
  6576 ;;  a               4   18[COMRAM] long 
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;  prod            4   33[COMRAM] struct .
  6579 ;;  grs             4   28[COMRAM] unsigned long 
  6580 ;;  temp            2   37[COMRAM] struct .
  6581 ;;  bexp            1   32[COMRAM] unsigned char 
  6582 ;;  aexp            1   27[COMRAM] unsigned char 
  6583 ;;  sign            1   26[COMRAM] unsigned char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  4   14[COMRAM] unsigned char 
  6586 ;; Registers used:
  6587 ;;		wreg, status,2, status,0, prodl, prodh
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6593 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;Total ram usage:       25 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    1
  6600 ;; This function calls:
  6601 ;;		Nothing
  6602 ;; This function is called by:
  6603 ;;		_LoRaSetFrequency
  6604 ;;		_fround
  6605 ;;		_scale
  6606 ;;		_printf
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text25
  6611  000CB8                     __ptext25:
  6612                           	callstack 0
  6613  000CB8                     ___flmul:
  6614                           	callstack 26
  6615                           
  6616                           ;incstack = 0
  6617  000CB8  5012               	movf	(___flmul@b+3)^0,w,c
  6618  000CBA  0B80               	andlw	128
  6619  000CBC  6E1B               	movwf	___flmul@sign^0,c
  6620  000CBE  5012               	movf	(___flmul@b+3)^0,w,c
  6621  000CC0  2412               	addwf	(___flmul@b+3)^0,w,c
  6622  000CC2  6E21               	movwf	___flmul@bexp^0,c
  6623  000CC4  BE11               	btfsc	(___flmul@b+2)^0,7,c
  6624  000CC6  8021               	bsf	___flmul@bexp^0,0,c
  6625  000CC8  5021               	movf	___flmul@bexp^0,w,c
  6626  000CCA  B4D8               	btfsc	status,2,c
  6627  000CCC  D00D               	goto	l3215
  6628  000CCE  2821               	incf	___flmul@bexp^0,w,c
  6629  000CD0  A4D8               	btfss	status,2,c
  6630  000CD2  D008               	goto	l3213
  6631  000CD4  0E00               	movlw	0
  6632  000CD6  6E0F               	movwf	___flmul@b^0,c
  6633  000CD8  0E00               	movlw	0
  6634  000CDA  6E10               	movwf	(___flmul@b+1)^0,c
  6635  000CDC  0E00               	movlw	0
  6636  000CDE  6E11               	movwf	(___flmul@b+2)^0,c
  6637  000CE0  0E00               	movlw	0
  6638  000CE2  6E12               	movwf	(___flmul@b+3)^0,c
  6639  000CE4                     l3213:
  6640  000CE4  8E11               	bsf	(___flmul@b+2)^0,7,c
  6641  000CE6  D008               	goto	l3217
  6642  000CE8                     l3215:
  6643  000CE8  0E00               	movlw	0
  6644  000CEA  6E0F               	movwf	___flmul@b^0,c
  6645  000CEC  0E00               	movlw	0
  6646  000CEE  6E10               	movwf	(___flmul@b+1)^0,c
  6647  000CF0  0E00               	movlw	0
  6648  000CF2  6E11               	movwf	(___flmul@b+2)^0,c
  6649  000CF4  0E00               	movlw	0
  6650  000CF6  6E12               	movwf	(___flmul@b+3)^0,c
  6651  000CF8                     l3217:
  6652  000CF8  5016               	movf	(___flmul@a+3)^0,w,c
  6653  000CFA  0B80               	andlw	128
  6654  000CFC  1A1B               	xorwf	___flmul@sign^0,f,c
  6655  000CFE  5016               	movf	(___flmul@a+3)^0,w,c
  6656  000D00  2416               	addwf	(___flmul@a+3)^0,w,c
  6657  000D02  6E1C               	movwf	___flmul@aexp^0,c
  6658  000D04  BE15               	btfsc	(___flmul@a+2)^0,7,c
  6659  000D06  801C               	bsf	___flmul@aexp^0,0,c
  6660  000D08  501C               	movf	___flmul@aexp^0,w,c
  6661  000D0A  B4D8               	btfsc	status,2,c
  6662  000D0C  D00D               	goto	l3233
  6663  000D0E  281C               	incf	___flmul@aexp^0,w,c
  6664  000D10  A4D8               	btfss	status,2,c
  6665  000D12  D008               	goto	l3231
  6666  000D14  0E00               	movlw	0
  6667  000D16  6E13               	movwf	___flmul@a^0,c
  6668  000D18  0E00               	movlw	0
  6669  000D1A  6E14               	movwf	(___flmul@a+1)^0,c
  6670  000D1C  0E00               	movlw	0
  6671  000D1E  6E15               	movwf	(___flmul@a+2)^0,c
  6672  000D20  0E00               	movlw	0
  6673  000D22  6E16               	movwf	(___flmul@a+3)^0,c
  6674  000D24                     l3231:
  6675  000D24  8E15               	bsf	(___flmul@a+2)^0,7,c
  6676  000D26  D008               	goto	l1110
  6677  000D28                     l3233:
  6678  000D28  0E00               	movlw	0
  6679  000D2A  6E13               	movwf	___flmul@a^0,c
  6680  000D2C  0E00               	movlw	0
  6681  000D2E  6E14               	movwf	(___flmul@a+1)^0,c
  6682  000D30  0E00               	movlw	0
  6683  000D32  6E15               	movwf	(___flmul@a+2)^0,c
  6684  000D34  0E00               	movlw	0
  6685  000D36  6E16               	movwf	(___flmul@a+3)^0,c
  6686  000D38                     l1110:
  6687  000D38  501C               	movf	___flmul@aexp^0,w,c
  6688  000D3A  B4D8               	btfsc	status,2,c
  6689  000D3C  D003               	goto	u2530
  6690  000D3E  5021               	movf	___flmul@bexp^0,w,c
  6691  000D40  A4D8               	btfss	status,2,c
  6692  000D42  D009               	goto	l3241
  6693  000D44                     u2530:
  6694  000D44  0E00               	movlw	0
  6695  000D46  6E0F               	movwf	?___flmul^0,c
  6696  000D48  0E00               	movlw	0
  6697  000D4A  6E10               	movwf	(?___flmul+1)^0,c
  6698  000D4C  0E00               	movlw	0
  6699  000D4E  6E11               	movwf	(?___flmul+2)^0,c
  6700  000D50  0E00               	movlw	0
  6701  000D52  6E12               	movwf	(?___flmul+3)^0,c
  6702  000D54  0012               	return	
  6703  000D56                     l3241:
  6704  000D56  5015               	movf	(___flmul@a+2)^0,w,c
  6705  000D58  020F               	mulwf	___flmul@b^0,c
  6706  000D5A  CFF3 F026          	movff	prodl,___flmul@temp
  6707  000D5E  CFF4 F027          	movff	prodh,___flmul@temp+1
  6708  000D62  5026               	movf	___flmul@temp^0,w,c
  6709  000D64  6E1D               	movwf	___flmul@grs^0,c
  6710  000D66  6A1E               	clrf	(___flmul@grs+1)^0,c
  6711  000D68  6A1F               	clrf	(___flmul@grs+2)^0,c
  6712  000D6A  6A20               	clrf	(___flmul@grs+3)^0,c
  6713  000D6C  5027               	movf	(___flmul@temp+1)^0,w,c
  6714  000D6E  6E22               	movwf	___flmul@prod^0,c
  6715  000D70  6A23               	clrf	(___flmul@prod+1)^0,c
  6716  000D72  6A24               	clrf	(___flmul@prod+2)^0,c
  6717  000D74  6A25               	clrf	(___flmul@prod+3)^0,c
  6718  000D76  5014               	movf	(___flmul@a+1)^0,w,c
  6719  000D78  0210               	mulwf	(___flmul@b+1)^0,c
  6720  000D7A  CFF3 F026          	movff	prodl,___flmul@temp
  6721  000D7E  CFF4 F027          	movff	prodh,___flmul@temp+1
  6722  000D82  5026               	movf	___flmul@temp^0,w,c
  6723  000D84  261D               	addwf	___flmul@grs^0,f,c
  6724  000D86  0E00               	movlw	0
  6725  000D88  221E               	addwfc	(___flmul@grs+1)^0,f,c
  6726  000D8A  221F               	addwfc	(___flmul@grs+2)^0,f,c
  6727  000D8C  2220               	addwfc	(___flmul@grs+3)^0,f,c
  6728  000D8E  5027               	movf	(___flmul@temp+1)^0,w,c
  6729  000D90  2622               	addwf	___flmul@prod^0,f,c
  6730  000D92  0E00               	movlw	0
  6731  000D94  2223               	addwfc	(___flmul@prod+1)^0,f,c
  6732  000D96  2224               	addwfc	(___flmul@prod+2)^0,f,c
  6733  000D98  2225               	addwfc	(___flmul@prod+3)^0,f,c
  6734  000D9A  5013               	movf	___flmul@a^0,w,c
  6735  000D9C  0211               	mulwf	(___flmul@b+2)^0,c
  6736  000D9E  CFF3 F026          	movff	prodl,___flmul@temp
  6737  000DA2  CFF4 F027          	movff	prodh,___flmul@temp+1
  6738  000DA6  5026               	movf	___flmul@temp^0,w,c
  6739  000DA8  261D               	addwf	___flmul@grs^0,f,c
  6740  000DAA  0E00               	movlw	0
  6741  000DAC  221E               	addwfc	(___flmul@grs+1)^0,f,c
  6742  000DAE  221F               	addwfc	(___flmul@grs+2)^0,f,c
  6743  000DB0  2220               	addwfc	(___flmul@grs+3)^0,f,c
  6744  000DB2  5027               	movf	(___flmul@temp+1)^0,w,c
  6745  000DB4  2622               	addwf	___flmul@prod^0,f,c
  6746  000DB6  0E00               	movlw	0
  6747  000DB8  2223               	addwfc	(___flmul@prod+1)^0,f,c
  6748  000DBA  2224               	addwfc	(___flmul@prod+2)^0,f,c
  6749  000DBC  2225               	addwfc	(___flmul@prod+3)^0,f,c
  6750  000DBE  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  6751  000DC2  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  6752  000DC6  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  6753  000DCA  6A1D               	clrf	___flmul@grs^0,c
  6754  000DCC  5013               	movf	___flmul@a^0,w,c
  6755  000DCE  0210               	mulwf	(___flmul@b+1)^0,c
  6756  000DD0  CFF3 F026          	movff	prodl,___flmul@temp
  6757  000DD4  CFF4 F027          	movff	prodh,___flmul@temp+1
  6758  000DD8  5026               	movf	___flmul@temp^0,w,c
  6759  000DDA  261D               	addwf	___flmul@grs^0,f,c
  6760  000DDC  5027               	movf	(___flmul@temp+1)^0,w,c
  6761  000DDE  221E               	addwfc	(___flmul@grs+1)^0,f,c
  6762  000DE0  0E00               	movlw	0
  6763  000DE2  221F               	addwfc	(___flmul@grs+2)^0,f,c
  6764  000DE4  0E00               	movlw	0
  6765  000DE6  2220               	addwfc	(___flmul@grs+3)^0,f,c
  6766  000DE8  5014               	movf	(___flmul@a+1)^0,w,c
  6767  000DEA  020F               	mulwf	___flmul@b^0,c
  6768  000DEC  CFF3 F026          	movff	prodl,___flmul@temp
  6769  000DF0  CFF4 F027          	movff	prodh,___flmul@temp+1
  6770  000DF4  5026               	movf	___flmul@temp^0,w,c
  6771  000DF6  261D               	addwf	___flmul@grs^0,f,c
  6772  000DF8  5027               	movf	(___flmul@temp+1)^0,w,c
  6773  000DFA  221E               	addwfc	(___flmul@grs+1)^0,f,c
  6774  000DFC  0E00               	movlw	0
  6775  000DFE  221F               	addwfc	(___flmul@grs+2)^0,f,c
  6776  000E00  0E00               	movlw	0
  6777  000E02  2220               	addwfc	(___flmul@grs+3)^0,f,c
  6778  000E04  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  6779  000E08  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  6780  000E0C  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  6781  000E10  6A1D               	clrf	___flmul@grs^0,c
  6782  000E12  5013               	movf	___flmul@a^0,w,c
  6783  000E14  020F               	mulwf	___flmul@b^0,c
  6784  000E16  CFF3 F026          	movff	prodl,___flmul@temp
  6785  000E1A  CFF4 F027          	movff	prodh,___flmul@temp+1
  6786  000E1E  5026               	movf	___flmul@temp^0,w,c
  6787  000E20  261D               	addwf	___flmul@grs^0,f,c
  6788  000E22  5027               	movf	(___flmul@temp+1)^0,w,c
  6789  000E24  221E               	addwfc	(___flmul@grs+1)^0,f,c
  6790  000E26  0E00               	movlw	0
  6791  000E28  221F               	addwfc	(___flmul@grs+2)^0,f,c
  6792  000E2A  0E00               	movlw	0
  6793  000E2C  2220               	addwfc	(___flmul@grs+3)^0,f,c
  6794  000E2E  5015               	movf	(___flmul@a+2)^0,w,c
  6795  000E30  0210               	mulwf	(___flmul@b+1)^0,c
  6796  000E32  CFF3 F026          	movff	prodl,___flmul@temp
  6797  000E36  CFF4 F027          	movff	prodh,___flmul@temp+1
  6798  000E3A  5026               	movf	___flmul@temp^0,w,c
  6799  000E3C  2622               	addwf	___flmul@prod^0,f,c
  6800  000E3E  5027               	movf	(___flmul@temp+1)^0,w,c
  6801  000E40  2223               	addwfc	(___flmul@prod+1)^0,f,c
  6802  000E42  0E00               	movlw	0
  6803  000E44  2224               	addwfc	(___flmul@prod+2)^0,f,c
  6804  000E46  0E00               	movlw	0
  6805  000E48  2225               	addwfc	(___flmul@prod+3)^0,f,c
  6806  000E4A  5014               	movf	(___flmul@a+1)^0,w,c
  6807  000E4C  0211               	mulwf	(___flmul@b+2)^0,c
  6808  000E4E  CFF3 F026          	movff	prodl,___flmul@temp
  6809  000E52  CFF4 F027          	movff	prodh,___flmul@temp+1
  6810  000E56  5026               	movf	___flmul@temp^0,w,c
  6811  000E58  2622               	addwf	___flmul@prod^0,f,c
  6812  000E5A  5027               	movf	(___flmul@temp+1)^0,w,c
  6813  000E5C  2223               	addwfc	(___flmul@prod+1)^0,f,c
  6814  000E5E  0E00               	movlw	0
  6815  000E60  2224               	addwfc	(___flmul@prod+2)^0,f,c
  6816  000E62  0E00               	movlw	0
  6817  000E64  2225               	addwfc	(___flmul@prod+3)^0,f,c
  6818  000E66  5015               	movf	(___flmul@a+2)^0,w,c
  6819  000E68  0211               	mulwf	(___flmul@b+2)^0,c
  6820  000E6A  CFF3 F026          	movff	prodl,___flmul@temp
  6821  000E6E  CFF4 F027          	movff	prodh,___flmul@temp+1
  6822  000E72  5026               	movf	___flmul@temp^0,w,c
  6823  000E74  6E17               	movwf	??___flmul^0,c
  6824  000E76  5027               	movf	(___flmul@temp+1)^0,w,c
  6825  000E78  6E18               	movwf	(??___flmul+1)^0,c
  6826  000E7A  6A19               	clrf	(??___flmul+2)^0,c
  6827  000E7C  6A1A               	clrf	(??___flmul+3)^0,c
  6828  000E7E  C019  F01A         	movff	??___flmul+2,??___flmul+3
  6829  000E82  C018  F019         	movff	??___flmul+1,??___flmul+2
  6830  000E86  C017  F018         	movff	??___flmul,??___flmul+1
  6831  000E8A  6A17               	clrf	??___flmul^0,c
  6832  000E8C  5017               	movf	??___flmul^0,w,c
  6833  000E8E  2622               	addwf	___flmul@prod^0,f,c
  6834  000E90  5018               	movf	(??___flmul+1)^0,w,c
  6835  000E92  2223               	addwfc	(___flmul@prod+1)^0,f,c
  6836  000E94  5019               	movf	(??___flmul+2)^0,w,c
  6837  000E96  2224               	addwfc	(___flmul@prod+2)^0,f,c
  6838  000E98  501A               	movf	(??___flmul+3)^0,w,c
  6839  000E9A  2225               	addwfc	(___flmul@prod+3)^0,f,c
  6840  000E9C  5020               	movf	(___flmul@grs+3)^0,w,c
  6841  000E9E  2622               	addwf	___flmul@prod^0,f,c
  6842  000EA0  0E00               	movlw	0
  6843  000EA2  2223               	addwfc	(___flmul@prod+1)^0,f,c
  6844  000EA4  2224               	addwfc	(___flmul@prod+2)^0,f,c
  6845  000EA6  2225               	addwfc	(___flmul@prod+3)^0,f,c
  6846  000EA8  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  6847  000EAC  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  6848  000EB0  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  6849  000EB4  6A1D               	clrf	___flmul@grs^0,c
  6850  000EB6  501C               	movf	___flmul@aexp^0,w,c
  6851  000EB8  C021  F017         	movff	___flmul@bexp,??___flmul
  6852  000EBC  6A18               	clrf	(??___flmul+1)^0,c
  6853  000EBE  2617               	addwf	??___flmul^0,f,c
  6854  000EC0  0E00               	movlw	0
  6855  000EC2  2218               	addwfc	(??___flmul+1)^0,f,c
  6856  000EC4  0E82               	movlw	130
  6857  000EC6  2417               	addwf	??___flmul^0,w,c
  6858  000EC8  6E26               	movwf	___flmul@temp^0,c
  6859  000ECA  0EFF               	movlw	255
  6860  000ECC  2018               	addwfc	(??___flmul+1)^0,w,c
  6861  000ECE  6E27               	movwf	(___flmul@temp+1)^0,c
  6862  000ED0  D00F               	goto	l3289
  6863  000ED2                     l3283:
  6864  000ED2  90D8               	bcf	status,0,c
  6865  000ED4  3622               	rlcf	___flmul@prod^0,f,c
  6866  000ED6  3623               	rlcf	(___flmul@prod+1)^0,f,c
  6867  000ED8  3624               	rlcf	(___flmul@prod+2)^0,f,c
  6868  000EDA  3625               	rlcf	(___flmul@prod+3)^0,f,c
  6869  000EDC  BE20               	btfsc	(___flmul@grs+3)^0,7,c
  6870  000EDE  8022               	bsf	___flmul@prod^0,0,c
  6871  000EE0  90D8               	bcf	status,0,c
  6872  000EE2  361D               	rlcf	___flmul@grs^0,f,c
  6873  000EE4  361E               	rlcf	(___flmul@grs+1)^0,f,c
  6874  000EE6  361F               	rlcf	(___flmul@grs+2)^0,f,c
  6875  000EE8  3620               	rlcf	(___flmul@grs+3)^0,f,c
  6876  000EEA  0626               	decf	___flmul@temp^0,f,c
  6877  000EEC  A0D8               	btfss	status,0,c
  6878  000EEE  0627               	decf	(___flmul@temp+1)^0,f,c
  6879  000EF0                     l3289:
  6880  000EF0  AE24               	btfss	(___flmul@prod+2)^0,7,c
  6881  000EF2  D7EF               	goto	l3283
  6882  000EF4  0E00               	movlw	0
  6883  000EF6  6E1C               	movwf	___flmul@aexp^0,c
  6884  000EF8  AE20               	btfss	(___flmul@grs+3)^0,7,c
  6885  000EFA  D017               	goto	l1119
  6886  000EFC  0EFF               	movlw	255
  6887  000EFE  141D               	andwf	___flmul@grs^0,w,c
  6888  000F00  6E17               	movwf	??___flmul^0,c
  6889  000F02  0EFF               	movlw	255
  6890  000F04  141E               	andwf	(___flmul@grs+1)^0,w,c
  6891  000F06  6E18               	movwf	(??___flmul+1)^0,c
  6892  000F08  0EFF               	movlw	255
  6893  000F0A  141F               	andwf	(___flmul@grs+2)^0,w,c
  6894  000F0C  6E19               	movwf	(??___flmul+2)^0,c
  6895  000F0E  0E7F               	movlw	127
  6896  000F10  1420               	andwf	(___flmul@grs+3)^0,w,c
  6897  000F12  6E1A               	movwf	(??___flmul+3)^0,c
  6898  000F14  5017               	movf	??___flmul^0,w,c
  6899  000F16  1018               	iorwf	(??___flmul+1)^0,w,c
  6900  000F18  1019               	iorwf	(??___flmul+2)^0,w,c
  6901  000F1A  101A               	iorwf	(??___flmul+3)^0,w,c
  6902  000F1C  B4D8               	btfsc	status,2,c
  6903  000F1E  D003               	goto	l1120
  6904  000F20                     u2570:
  6905  000F20  0E01               	movlw	1
  6906  000F22  6E1C               	movwf	___flmul@aexp^0,c
  6907  000F24  D002               	goto	l1119
  6908  000F26                     l1120:
  6909  000F26  B022               	btfsc	___flmul@prod^0,0,c
  6910  000F28  D7FB               	goto	u2570
  6911  000F2A                     l1119:
  6912  000F2A  501C               	movf	___flmul@aexp^0,w,c
  6913  000F2C  B4D8               	btfsc	status,2,c
  6914  000F2E  D01F               	goto	l3309
  6915  000F30  0E01               	movlw	1
  6916  000F32  2622               	addwf	___flmul@prod^0,f,c
  6917  000F34  0E00               	movlw	0
  6918  000F36  2223               	addwfc	(___flmul@prod+1)^0,f,c
  6919  000F38  2224               	addwfc	(___flmul@prod+2)^0,f,c
  6920  000F3A  2225               	addwfc	(___flmul@prod+3)^0,f,c
  6921  000F3C  A025               	btfss	(___flmul@prod+3)^0,0,c
  6922  000F3E  D017               	goto	l3309
  6923  000F40  C022  F017         	movff	___flmul@prod,??___flmul
  6924  000F44  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  6925  000F48  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  6926  000F4C  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  6927  000F50  341A               	rlcf	(??___flmul+3)^0,w,c
  6928  000F52  321A               	rrcf	(??___flmul+3)^0,f,c
  6929  000F54  3219               	rrcf	(??___flmul+2)^0,f,c
  6930  000F56  3218               	rrcf	(??___flmul+1)^0,f,c
  6931  000F58  3217               	rrcf	??___flmul^0,f,c
  6932  000F5A  C017  F022         	movff	??___flmul,___flmul@prod
  6933  000F5E  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  6934  000F62  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  6935  000F66  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  6936  000F6A  4A26               	infsnz	___flmul@temp^0,f,c
  6937  000F6C  2A27               	incf	(___flmul@temp+1)^0,f,c
  6938  000F6E                     l3309:
  6939  000F6E  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  6940  000F70  D00D               	goto	l3313
  6941  000F72  5027               	movf	(___flmul@temp+1)^0,w,c
  6942  000F74  E103               	bnz	u2610
  6943  000F76  2826               	incf	___flmul@temp^0,w,c
  6944  000F78  A0D8               	btfss	status,0,c
  6945  000F7A  D008               	goto	l3313
  6946  000F7C                     u2610:
  6947  000F7C  0E00               	movlw	0
  6948  000F7E  6E22               	movwf	___flmul@prod^0,c
  6949  000F80  0E00               	movlw	0
  6950  000F82  6E23               	movwf	(___flmul@prod+1)^0,c
  6951  000F84  0E80               	movlw	128
  6952  000F86  6E24               	movwf	(___flmul@prod+2)^0,c
  6953  000F88  0E7F               	movlw	127
  6954  000F8A  D020               	goto	L7
  6955  000F8C                     l3313:
  6956  000F8C  BE27               	btfsc	(___flmul@temp+1)^0,7,c
  6957  000F8E  D005               	goto	u2620
  6958  000F90  5027               	movf	(___flmul@temp+1)^0,w,c
  6959  000F92  E10E               	bnz	l1127
  6960  000F94  0426               	decf	___flmul@temp^0,w,c
  6961  000F96  B0D8               	btfsc	status,0,c
  6962  000F98  D00B               	goto	l1127
  6963  000F9A                     u2620:
  6964  000F9A  0E00               	movlw	0
  6965  000F9C  6E22               	movwf	___flmul@prod^0,c
  6966  000F9E  0E00               	movlw	0
  6967  000FA0  6E23               	movwf	(___flmul@prod+1)^0,c
  6968  000FA2  0E00               	movlw	0
  6969  000FA4  6E24               	movwf	(___flmul@prod+2)^0,c
  6970  000FA6  0E00               	movlw	0
  6971  000FA8  6E25               	movwf	(___flmul@prod+3)^0,c
  6972  000FAA  0E00               	movlw	0
  6973  000FAC  6E1B               	movwf	___flmul@sign^0,c
  6974  000FAE  D00F               	goto	l3325
  6975  000FB0                     l1127:
  6976  000FB0  C026  F021         	movff	___flmul@temp,___flmul@bexp
  6977  000FB4  0EFF               	movlw	255
  6978  000FB6  1622               	andwf	___flmul@prod^0,f,c
  6979  000FB8  0EFF               	movlw	255
  6980  000FBA  1623               	andwf	(___flmul@prod+1)^0,f,c
  6981  000FBC  0E7F               	movlw	127
  6982  000FBE  1624               	andwf	(___flmul@prod+2)^0,f,c
  6983  000FC0  0E00               	movlw	0
  6984  000FC2  1625               	andwf	(___flmul@prod+3)^0,f,c
  6985  000FC4  B021               	btfsc	___flmul@bexp^0,0,c
  6986  000FC6  8E24               	bsf	(___flmul@prod+2)^0,7,c
  6987  000FC8  90D8               	bcf	status,0,c
  6988  000FCA  3021               	rrcf	___flmul@bexp^0,w,c
  6989  000FCC                     L7:
  6990  000FCC  6E25               	movwf	(___flmul@prod+3)^0,c
  6991  000FCE                     l3325:
  6992  000FCE  501B               	movf	___flmul@sign^0,w,c
  6993  000FD0  1225               	iorwf	(___flmul@prod+3)^0,f,c
  6994  000FD2  C022  F00F         	movff	___flmul@prod,?___flmul
  6995  000FD6  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  6996  000FDA  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  6997  000FDE  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  6998  000FE2  0012               	return		;funcret
  6999  000FE4                     __end_of___flmul:
  7000                           	callstack 0
  7001                           
  7002 ;; *************** function _LoRaOptimalLoad *****************
  7003 ;; Defined at:
  7004 ;;		line 273 in file "LoRa.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;  syncWord        1    wreg     unsigned char 
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;  syncWord        1    6[COMRAM] unsigned char 
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  1    wreg      void 
  7011 ;; Registers used:
  7012 ;;		wreg, status,2, status,0, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 3F/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;Total ram usage:        2 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    4
  7025 ;; This function calls:
  7026 ;;		_LoRaSleepMode
  7027 ;;		_LoRaStandbyMode
  7028 ;;		_SPI2WriteByte
  7029 ;;		_setLoRaMode
  7030 ;; This function is called by:
  7031 ;;		_LoRaStart
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text26
  7036  0017E2                     __ptext26:
  7037                           	callstack 0
  7038  0017E2                     _LoRaOptimalLoad:
  7039                           	callstack 24
  7040                           
  7041                           ;incstack = 0
  7042                           ;LoRaOptimalLoad@syncWord stored from wreg
  7043  0017E2  6E07               	movwf	LoRaOptimalLoad@syncWord^0,c
  7044                           
  7045                           ;LoRa.c: 274: LoRaSleepMode();
  7046  0017E4  EC3D  F014         	call	_LoRaSleepMode	;wreg free
  7047                           
  7048                           ;LoRa.c: 275: setLoRaMode();
  7049  0017E8  EC33  F014         	call	_setLoRaMode	;wreg free
  7050                           
  7051                           ;LoRa.c: 276: LoRaStandbyMode();
  7052  0017EC  EC26  F014         	call	_LoRaStandbyMode	;wreg free
  7053                           
  7054                           ;LoRa.c: 277: _delay((unsigned long)((10)*(64000000/4000.0)));
  7055  0017F0  0ED0               	movlw	208
  7056  0017F2  6E06               	movwf	??_LoRaOptimalLoad^0,c
  7057  0017F4  0ECA               	movlw	202
  7058  0017F6                     u4167:
  7059  0017F6  2EE8               	decfsz	wreg,f,c
  7060  0017F8  D7FE               	bra	u4167
  7061  0017FA  2E06               	decfsz	??_LoRaOptimalLoad^0,f,c
  7062  0017FC  D7FC               	bra	u4167
  7063                           
  7064                           ;LoRa.c: 278: SPI2WriteByte(0x06, 0xD9);
  7065  0017FE  0ED9               	movlw	217
  7066  001800  6E01               	movwf	SPI2WriteByte@data^0,c
  7067  001802  0E06               	movlw	6
  7068  001804  EC0D  F013         	call	_SPI2WriteByte
  7069                           
  7070                           ;LoRa.c: 279: SPI2WriteByte(0x07, 0);
  7071  001808  0E00               	movlw	0
  7072  00180A  6E01               	movwf	SPI2WriteByte@data^0,c
  7073  00180C  0E07               	movlw	7
  7074  00180E  EC0D  F013         	call	_SPI2WriteByte
  7075                           
  7076                           ;LoRa.c: 280: SPI2WriteByte(0x08, 0);
  7077  001812  0E00               	movlw	0
  7078  001814  6E01               	movwf	SPI2WriteByte@data^0,c
  7079  001816  0E08               	movlw	8
  7080  001818  EC0D  F013         	call	_SPI2WriteByte
  7081                           
  7082                           ;LoRa.c: 281: SPI2WriteByte(0x09, 0x8F);
  7083  00181C  0E8F               	movlw	143
  7084  00181E  6E01               	movwf	SPI2WriteByte@data^0,c
  7085  001820  0E09               	movlw	9
  7086  001822  EC0D  F013         	call	_SPI2WriteByte
  7087                           
  7088                           ;LoRa.c: 282: SPI2WriteByte(0x0A, 0x09);
  7089  001826  0E09               	movlw	9
  7090  001828  6E01               	movwf	SPI2WriteByte@data^0,c
  7091  00182A  0E0A               	movlw	10
  7092  00182C  EC0D  F013         	call	_SPI2WriteByte
  7093                           
  7094                           ;LoRa.c: 283: SPI2WriteByte(0x0B, 0x2B);
  7095  001830  0E2B               	movlw	43
  7096  001832  6E01               	movwf	SPI2WriteByte@data^0,c
  7097  001834  0E0B               	movlw	11
  7098  001836  EC0D  F013         	call	_SPI2WriteByte
  7099                           
  7100                           ;LoRa.c: 284: SPI2WriteByte(0x0C, 0x23);
  7101  00183A  0E23               	movlw	35
  7102  00183C  6E01               	movwf	SPI2WriteByte@data^0,c
  7103  00183E  0E0C               	movlw	12
  7104  001840  EC0D  F013         	call	_SPI2WriteByte
  7105                           
  7106                           ;LoRa.c: 285: SPI2WriteByte(0x0E, 0);
  7107  001844  0E00               	movlw	0
  7108  001846  6E01               	movwf	SPI2WriteByte@data^0,c
  7109  001848  0E0E               	movlw	14
  7110  00184A  EC0D  F013         	call	_SPI2WriteByte
  7111                           
  7112                           ;LoRa.c: 286: SPI2WriteByte(0x0F, 0);
  7113  00184E  0E00               	movlw	0
  7114  001850  6E01               	movwf	SPI2WriteByte@data^0,c
  7115  001852  0E0F               	movlw	15
  7116  001854  EC0D  F013         	call	_SPI2WriteByte
  7117                           
  7118                           ;LoRa.c: 287: SPI2WriteByte(0x10, 0);
  7119  001858  0E00               	movlw	0
  7120  00185A  6E01               	movwf	SPI2WriteByte@data^0,c
  7121  00185C  0E10               	movlw	16
  7122  00185E  EC0D  F013         	call	_SPI2WriteByte
  7123                           
  7124                           ;LoRa.c: 288: SPI2WriteByte(0x11, 0);
  7125  001862  0E00               	movlw	0
  7126  001864  6E01               	movwf	SPI2WriteByte@data^0,c
  7127  001866  0E11               	movlw	17
  7128  001868  EC0D  F013         	call	_SPI2WriteByte
  7129                           
  7130                           ;LoRa.c: 289: SPI2WriteByte(0x13, 0);
  7131  00186C  0E00               	movlw	0
  7132  00186E  6E01               	movwf	SPI2WriteByte@data^0,c
  7133  001870  0E13               	movlw	19
  7134  001872  EC0D  F013         	call	_SPI2WriteByte
  7135                           
  7136                           ;LoRa.c: 290: SPI2WriteByte(0x1D, 0x72);
  7137  001876  0E72               	movlw	114
  7138  001878  6E01               	movwf	SPI2WriteByte@data^0,c
  7139  00187A  0E1D               	movlw	29
  7140  00187C  EC0D  F013         	call	_SPI2WriteByte
  7141                           
  7142                           ;LoRa.c: 291: SPI2WriteByte(0x1E, 0x70);
  7143  001880  0E70               	movlw	112
  7144  001882  6E01               	movwf	SPI2WriteByte@data^0,c
  7145  001884  0E1E               	movlw	30
  7146  001886  EC0D  F013         	call	_SPI2WriteByte
  7147                           
  7148                           ;LoRa.c: 292: SPI2WriteByte(0x1F, 0x64);
  7149  00188A  0E64               	movlw	100
  7150  00188C  6E01               	movwf	SPI2WriteByte@data^0,c
  7151  00188E  0E1F               	movlw	31
  7152  001890  EC0D  F013         	call	_SPI2WriteByte
  7153                           
  7154                           ;LoRa.c: 293: SPI2WriteByte(0x20, 0);
  7155  001894  0E00               	movlw	0
  7156  001896  6E01               	movwf	SPI2WriteByte@data^0,c
  7157  001898  0E20               	movlw	32
  7158  00189A  EC0D  F013         	call	_SPI2WriteByte
  7159                           
  7160                           ;LoRa.c: 294: SPI2WriteByte(0x21, 0x08);
  7161  00189E  0E08               	movlw	8
  7162  0018A0  6E01               	movwf	SPI2WriteByte@data^0,c
  7163  0018A2  0E21               	movlw	33
  7164  0018A4  EC0D  F013         	call	_SPI2WriteByte
  7165                           
  7166                           ;LoRa.c: 295: SPI2WriteByte(0x23, 0xFF);
  7167  0018A8  0EFF               	movlw	255
  7168  0018AA  6E01               	movwf	SPI2WriteByte@data^0,c
  7169  0018AC  0E23               	movlw	35
  7170  0018AE  EC0D  F013         	call	_SPI2WriteByte
  7171                           
  7172                           ;LoRa.c: 296: SPI2WriteByte(0x24, 0);
  7173  0018B2  0E00               	movlw	0
  7174  0018B4  6E01               	movwf	SPI2WriteByte@data^0,c
  7175  0018B6  0E24               	movlw	36
  7176  0018B8  EC0D  F013         	call	_SPI2WriteByte
  7177                           
  7178                           ;LoRa.c: 297: SPI2WriteByte(0x25, 0);
  7179  0018BC  0E00               	movlw	0
  7180  0018BE  6E01               	movwf	SPI2WriteByte@data^0,c
  7181  0018C0  0E25               	movlw	37
  7182  0018C2  EC0D  F013         	call	_SPI2WriteByte
  7183                           
  7184                           ;LoRa.c: 298: SPI2WriteByte(0x26, 0x04);
  7185  0018C6  0E04               	movlw	4
  7186  0018C8  6E01               	movwf	SPI2WriteByte@data^0,c
  7187  0018CA  0E26               	movlw	38
  7188  0018CC  EC0D  F013         	call	_SPI2WriteByte
  7189                           
  7190                           ;LoRa.c: 299: SPI2WriteByte(0x2F, 0x45);
  7191  0018D0  0E45               	movlw	69
  7192  0018D2  6E01               	movwf	SPI2WriteByte@data^0,c
  7193  0018D4  0E2F               	movlw	47
  7194  0018D6  EC0D  F013         	call	_SPI2WriteByte
  7195                           
  7196                           ;LoRa.c: 300: SPI2WriteByte(0x30, 0x55);
  7197  0018DA  0E55               	movlw	85
  7198  0018DC  6E01               	movwf	SPI2WriteByte@data^0,c
  7199  0018DE  0E30               	movlw	48
  7200  0018E0  EC0D  F013         	call	_SPI2WriteByte
  7201                           
  7202                           ;LoRa.c: 301: SPI2WriteByte(0x31, 0xC3);
  7203  0018E4  0EC3               	movlw	195
  7204  0018E6  6E01               	movwf	SPI2WriteByte@data^0,c
  7205  0018E8  0E31               	movlw	49
  7206  0018EA  EC0D  F013         	call	_SPI2WriteByte
  7207                           
  7208                           ;LoRa.c: 302: SPI2WriteByte(0x33, 0x27);
  7209  0018EE  0E27               	movlw	39
  7210  0018F0  6E01               	movwf	SPI2WriteByte@data^0,c
  7211  0018F2  0E33               	movlw	51
  7212  0018F4  EC0D  F013         	call	_SPI2WriteByte
  7213                           
  7214                           ;LoRa.c: 303: SPI2WriteByte(0x36, 0x03);
  7215  0018F8  0E03               	movlw	3
  7216  0018FA  6E01               	movwf	SPI2WriteByte@data^0,c
  7217  0018FC  0E36               	movlw	54
  7218  0018FE  EC0D  F013         	call	_SPI2WriteByte
  7219                           
  7220                           ;LoRa.c: 304: SPI2WriteByte(0x37, 0x0A);
  7221  001902  0E0A               	movlw	10
  7222  001904  6E01               	movwf	SPI2WriteByte@data^0,c
  7223  001906  0E37               	movlw	55
  7224  001908  EC0D  F013         	call	_SPI2WriteByte
  7225                           
  7226                           ;LoRa.c: 305: SPI2WriteByte(0x39, syncWord);
  7227  00190C  C007  F001         	movff	LoRaOptimalLoad@syncWord,SPI2WriteByte@data
  7228  001910  0E39               	movlw	57
  7229  001912  EC0D  F013         	call	_SPI2WriteByte
  7230                           
  7231                           ;LoRa.c: 306: SPI2WriteByte(0x3A, 0x49);
  7232  001916  0E49               	movlw	73
  7233  001918  6E01               	movwf	SPI2WriteByte@data^0,c
  7234  00191A  0E3A               	movlw	58
  7235  00191C  EC0D  F013         	call	_SPI2WriteByte
  7236                           
  7237                           ;LoRa.c: 307: SPI2WriteByte(0x4B, 0x09);
  7238  001920  0E09               	movlw	9
  7239  001922  6E01               	movwf	SPI2WriteByte@data^0,c
  7240  001924  0E4B               	movlw	75
  7241  001926  EC0D  F013         	call	_SPI2WriteByte
  7242                           
  7243                           ;LoRa.c: 308: SPI2WriteByte(0x4D, 0x84);
  7244  00192A  0E84               	movlw	132
  7245  00192C  6E01               	movwf	SPI2WriteByte@data^0,c
  7246  00192E  0E4D               	movlw	77
  7247  001930  EC0D  F013         	call	_SPI2WriteByte
  7248                           
  7249                           ;LoRa.c: 309: SPI2WriteByte(0x61, 0x1C);
  7250  001934  0E1C               	movlw	28
  7251  001936  6E01               	movwf	SPI2WriteByte@data^0,c
  7252  001938  0E61               	movlw	97
  7253  00193A  EC0D  F013         	call	_SPI2WriteByte
  7254                           
  7255                           ;LoRa.c: 310: SPI2WriteByte(0x62, 0x0E);
  7256  00193E  0E0E               	movlw	14
  7257  001940  6E01               	movwf	SPI2WriteByte@data^0,c
  7258  001942  0E62               	movlw	98
  7259  001944  EC0D  F013         	call	_SPI2WriteByte
  7260                           
  7261                           ;LoRa.c: 311: SPI2WriteByte(0x63, 0x5B);
  7262  001948  0E5B               	movlw	91
  7263  00194A  6E01               	movwf	SPI2WriteByte@data^0,c
  7264  00194C  0E63               	movlw	99
  7265  00194E  EC0D  F013         	call	_SPI2WriteByte
  7266                           
  7267                           ;LoRa.c: 312: SPI2WriteByte(0x64, 0xCC);
  7268  001952  0ECC               	movlw	204
  7269  001954  6E01               	movwf	SPI2WriteByte@data^0,c
  7270  001956  0E64               	movlw	100
  7271  001958  EC0D  F013         	call	_SPI2WriteByte
  7272                           
  7273                           ;LoRa.c: 313: SPI2WriteByte(0x70, 0xD0);
  7274  00195C  0ED0               	movlw	208
  7275  00195E  6E01               	movwf	SPI2WriteByte@data^0,c
  7276  001960  0E70               	movlw	112
  7277  001962  EC0D  F013         	call	_SPI2WriteByte
  7278  001966  0012               	return		;funcret
  7279  001968                     __end_of_LoRaOptimalLoad:
  7280                           	callstack 0
  7281                           
  7282 ;; *************** function _setLoRaMode *****************
  7283 ;; Defined at:
  7284 ;;		line 77 in file "LoRa.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;		None
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  regValue        1    4[COMRAM] unsigned char 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  1    wreg      void 
  7291 ;; Registers used:
  7292 ;;		wreg, status,2, status,0, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;Total ram usage:        1 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    3
  7305 ;; This function calls:
  7306 ;;		_readOpModeRegister
  7307 ;;		_writeOpModeRegister
  7308 ;; This function is called by:
  7309 ;;		_LoRaStart
  7310 ;;		_LoRaOptimalLoad
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text27
  7315  002866                     __ptext27:
  7316                           	callstack 0
  7317  002866                     _setLoRaMode:
  7318                           	callstack 25
  7319                           
  7320                           ;LoRa.c: 79: uint8_t regValue = readOpModeRegister();
  7321                           
  7322                           ;incstack = 0
  7323  002866  EC66  F014         	call	_readOpModeRegister	;wreg free
  7324  00286A  6E05               	movwf	setLoRaMode@regValue^0,c
  7325                           
  7326                           ;LoRa.c: 80: regValue = regValue | 0b10000000;
  7327  00286C  5005               	movf	setLoRaMode@regValue^0,w,c
  7328  00286E  0980               	iorlw	128
  7329  002870  6E05               	movwf	setLoRaMode@regValue^0,c
  7330                           
  7331                           ;LoRa.c: 81: writeOpModeRegister(regValue);
  7332  002872  5005               	movf	setLoRaMode@regValue^0,w,c
  7333  002874  EC4F  F014         	call	_writeOpModeRegister
  7334  002878  0012               	return		;funcret
  7335  00287A                     __end_of_setLoRaMode:
  7336                           	callstack 0
  7337                           
  7338 ;; *************** function _LoRaStandbyMode *****************
  7339 ;; Defined at:
  7340 ;;		line 175 in file "LoRa.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;		None
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;  regValue        1    4[COMRAM] unsigned char 
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      void 
  7347 ;; Registers used:
  7348 ;;		wreg, status,2, status,0, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;Total ram usage:        1 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:    3
  7361 ;; This function calls:
  7362 ;;		_readOpModeRegister
  7363 ;;		_writeOpModeRegister
  7364 ;; This function is called by:
  7365 ;;		_LoRaTXData
  7366 ;;		_LoRaOptimalLoad
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           	psect	text28
  7371  00284C                     __ptext28:
  7372                           	callstack 0
  7373  00284C                     _LoRaStandbyMode:
  7374                           	callstack 25
  7375                           
  7376                           ;LoRa.c: 176: uint8_t regValue = readOpModeRegister();
  7377                           
  7378                           ;incstack = 0
  7379  00284C  EC66  F014         	call	_readOpModeRegister	;wreg free
  7380  002850  6E05               	movwf	LoRaStandbyMode@regValue^0,c
  7381                           
  7382                           ;LoRa.c: 177: regValue = regValue & 0b11111000;
  7383  002852  5005               	movf	LoRaStandbyMode@regValue^0,w,c
  7384  002854  0BF8               	andlw	248
  7385  002856  6E05               	movwf	LoRaStandbyMode@regValue^0,c
  7386                           
  7387                           ;LoRa.c: 178: regValue = regValue | 0b00000001;
  7388  002858  5005               	movf	LoRaStandbyMode@regValue^0,w,c
  7389  00285A  0901               	iorlw	1
  7390  00285C  6E05               	movwf	LoRaStandbyMode@regValue^0,c
  7391                           
  7392                           ;LoRa.c: 179: writeOpModeRegister(regValue);
  7393  00285E  5005               	movf	LoRaStandbyMode@regValue^0,w,c
  7394  002860  EC4F  F014         	call	_writeOpModeRegister
  7395  002864  0012               	return		;funcret
  7396  002866                     __end_of_LoRaStandbyMode:
  7397                           	callstack 0
  7398                           
  7399 ;; *************** function _LoRaSleepMode *****************
  7400 ;; Defined at:
  7401 ;;		line 182 in file "LoRa.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;  regValue        1    4[COMRAM] unsigned char 
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		wreg, status,2, status,0, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;Total ram usage:        1 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; Hardware stack levels required when called:    3
  7422 ;; This function calls:
  7423 ;;		_readOpModeRegister
  7424 ;;		_writeOpModeRegister
  7425 ;; This function is called by:
  7426 ;;		_transmitData
  7427 ;;		_LoRaOptimalLoad
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text29
  7432  00287A                     __ptext29:
  7433                           	callstack 0
  7434  00287A                     _LoRaSleepMode:
  7435                           	callstack 24
  7436                           
  7437                           ;LoRa.c: 183: uint8_t regValue = readOpModeRegister();
  7438                           
  7439                           ;incstack = 0
  7440  00287A  EC66  F014         	call	_readOpModeRegister	;wreg free
  7441  00287E  6E05               	movwf	LoRaSleepMode@regValue^0,c
  7442                           
  7443                           ;LoRa.c: 185: regValue = regValue | 0b00000000;
  7444  002880  5005               	movf	LoRaSleepMode@regValue^0,w,c
  7445  002882  0BF8               	andlw	248
  7446  002884  6E05               	movwf	LoRaSleepMode@regValue^0,c
  7447                           
  7448                           ;LoRa.c: 186: writeOpModeRegister(regValue);
  7449  002886  5005               	movf	LoRaSleepMode@regValue^0,w,c
  7450  002888  EC4F  F014         	call	_writeOpModeRegister
  7451  00288C  0012               	return		;funcret
  7452  00288E                     __end_of_LoRaSleepMode:
  7453                           	callstack 0
  7454                           
  7455 ;; *************** function _writeOpModeRegister *****************
  7456 ;; Defined at:
  7457 ;;		line 88 in file "LoRa.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  regValue        1    wreg     unsigned char 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  regValue        1    3[COMRAM] unsigned char 
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      void 
  7464 ;; Registers used:
  7465 ;;		wreg, status,2, status,0, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;Total ram usage:        1 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    2
  7478 ;; This function calls:
  7479 ;;		_SPI2WriteByte
  7480 ;; This function is called by:
  7481 ;;		_setLoRaMode
  7482 ;;		_LoRaStandbyMode
  7483 ;;		_LoRaSleepMode
  7484 ;;		_LoRaTXMode
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text30
  7489  00289E                     __ptext30:
  7490                           	callstack 0
  7491  00289E                     _writeOpModeRegister:
  7492                           	callstack 25
  7493                           
  7494                           ;incstack = 0
  7495                           ;writeOpModeRegister@regValue stored from wreg
  7496  00289E  6E04               	movwf	writeOpModeRegister@regValue^0,c
  7497                           
  7498                           ;LoRa.c: 89: SPI2WriteByte(0x01, regValue);
  7499  0028A0  C004  F001         	movff	writeOpModeRegister@regValue,SPI2WriteByte@data
  7500  0028A4  0E01               	movlw	1
  7501  0028A6  EC0D  F013         	call	_SPI2WriteByte
  7502  0028AA  0012               	return		;funcret
  7503  0028AC                     __end_of_writeOpModeRegister:
  7504                           	callstack 0
  7505                           
  7506 ;; *************** function _readOpModeRegister *****************
  7507 ;; Defined at:
  7508 ;;		line 84 in file "LoRa.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;		None
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      unsigned char 
  7515 ;; Registers used:
  7516 ;;		wreg, status,2, cstack
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;Total ram usage:        0 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; Hardware stack levels required when called:    2
  7529 ;; This function calls:
  7530 ;;		_SPI2ReadByte
  7531 ;; This function is called by:
  7532 ;;		_setLoRaMode
  7533 ;;		_LoRaStandbyMode
  7534 ;;		_LoRaSleepMode
  7535 ;;		_LoRaTXMode
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           	psect	text31
  7540  0028CC                     __ptext31:
  7541                           	callstack 0
  7542  0028CC                     _readOpModeRegister:
  7543                           	callstack 25
  7544                           
  7545                           ;LoRa.c: 85: return SPI2ReadByte(0x01);
  7546                           
  7547                           ;incstack = 0
  7548  0028CC  0E01               	movlw	1
  7549  0028CE  EC14  F014         	call	_SPI2ReadByte
  7550  0028D2  0012               	return		;funcret
  7551  0028D4                     __end_of_readOpModeRegister:
  7552                           	callstack 0
  7553                           
  7554 ;; *************** function _LoRaGetIRQFlags *****************
  7555 ;; Defined at:
  7556 ;;		line 251 in file "LoRa.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;		None
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;  regValue        1    2[COMRAM] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;                  1    wreg      unsigned char 
  7563 ;; Registers used:
  7564 ;;		wreg, status,2, cstack
  7565 ;; Tracked objects:
  7566 ;;		On entry : 3F/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7571 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;Total ram usage:        1 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    2
  7577 ;; This function calls:
  7578 ;;		_SPI2ReadByte
  7579 ;; This function is called by:
  7580 ;;		_transmitData
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text32
  7585  0028AC                     __ptext32:
  7586                           	callstack 0
  7587  0028AC                     _LoRaGetIRQFlags:
  7588                           	callstack 27
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;LoRa.c: 252: uint8_t regValue = SPI2ReadByte(0x12);
  7592                           
  7593                           ;incstack = 0
  7594  0028AC  0E12               	movlw	18
  7595  0028AE  EC14  F014         	call	_SPI2ReadByte
  7596  0028B2  6E03               	movwf	LoRaGetIRQFlags@regValue^0,c
  7597                           
  7598                           ;LoRa.c: 253: return regValue;
  7599  0028B4  5003               	movf	LoRaGetIRQFlags@regValue^0,w,c
  7600  0028B6  0012               	return		;funcret
  7601  0028B8                     __end_of_LoRaGetIRQFlags:
  7602                           	callstack 0
  7603                           
  7604 ;; *************** function _LoRaGetFrequency *****************
  7605 ;; Defined at:
  7606 ;;		line 241 in file "LoRa.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;		None
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;  freqMHz         4   59[COMRAM] float 
  7611 ;;  intermediate    4   55[COMRAM] unsigned long 
  7612 ;;  lsb             1   65[COMRAM] unsigned char 
  7613 ;;  mid             1   64[COMRAM] unsigned char 
  7614 ;;  msb             1   63[COMRAM] unsigned char 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  4   39[COMRAM] float 
  7617 ;; Registers used:
  7618 ;;		wreg, status,2, status,0, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;Total ram usage:       27 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    2
  7631 ;; This function calls:
  7632 ;;		_SPI2ReadByte
  7633 ;;		___fldiv
  7634 ;;		___xxtofl
  7635 ;; This function is called by:
  7636 ;;		_transmitData
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text33
  7641  001F84                     __ptext33:
  7642                           	callstack 0
  7643  001F84                     _LoRaGetFrequency:
  7644                           	callstack 27
  7645                           
  7646                           ;LoRa.c: 242: uint8_t msb = SPI2ReadByte(0x06);
  7647                           
  7648                           ;incstack = 0
  7649  001F84  0E06               	movlw	6
  7650  001F86  EC14  F014         	call	_SPI2ReadByte
  7651  001F8A  6E40               	movwf	LoRaGetFrequency@msb^0,c
  7652                           
  7653                           ;LoRa.c: 243: uint8_t mid = SPI2ReadByte(0x07);
  7654  001F8C  0E07               	movlw	7
  7655  001F8E  EC14  F014         	call	_SPI2ReadByte
  7656  001F92  6E41               	movwf	LoRaGetFrequency@mid^0,c
  7657                           
  7658                           ;LoRa.c: 244: uint8_t lsb = SPI2ReadByte(0x08);
  7659  001F94  0E08               	movlw	8
  7660  001F96  EC14  F014         	call	_SPI2ReadByte
  7661  001F9A  6E42               	movwf	LoRaGetFrequency@lsb^0,c
  7662                           
  7663                           ;LoRa.c: 245: uint32_t intermediate = (uint32_t)msb<<16 | (uint32_t)mid<<8 | lsb;
  7664  001F9C  C041  F02C         	movff	LoRaGetFrequency@mid,??_LoRaGetFrequency
  7665  001FA0  6A2D               	clrf	(??_LoRaGetFrequency+1)^0,c
  7666  001FA2  6A2E               	clrf	(??_LoRaGetFrequency+2)^0,c
  7667  001FA4  6A2F               	clrf	(??_LoRaGetFrequency+3)^0,c
  7668  001FA6  C02E  F02F         	movff	??_LoRaGetFrequency+2,??_LoRaGetFrequency+3
  7669  001FAA  C02D  F02E         	movff	??_LoRaGetFrequency+1,??_LoRaGetFrequency+2
  7670  001FAE  C02C  F02D         	movff	??_LoRaGetFrequency,??_LoRaGetFrequency+1
  7671  001FB2  6A2C               	clrf	??_LoRaGetFrequency^0,c
  7672  001FB4  C040  F030         	movff	LoRaGetFrequency@msb,??_LoRaGetFrequency+4
  7673  001FB8  6A31               	clrf	(??_LoRaGetFrequency+5)^0,c
  7674  001FBA  6A32               	clrf	(??_LoRaGetFrequency+6)^0,c
  7675  001FBC  6A33               	clrf	(??_LoRaGetFrequency+7)^0,c
  7676  001FBE  C031  F033         	movff	??_LoRaGetFrequency+5,??_LoRaGetFrequency+7
  7677  001FC2  C030  F032         	movff	??_LoRaGetFrequency+4,??_LoRaGetFrequency+6
  7678  001FC6  6A31               	clrf	(??_LoRaGetFrequency+5)^0,c
  7679  001FC8  6A30               	clrf	(??_LoRaGetFrequency+4)^0,c
  7680  001FCA  502C               	movf	??_LoRaGetFrequency^0,w,c
  7681  001FCC  1030               	iorwf	(??_LoRaGetFrequency+4)^0,w,c
  7682  001FCE  6E34               	movwf	(??_LoRaGetFrequency+8)^0,c
  7683  001FD0  502D               	movf	(??_LoRaGetFrequency+1)^0,w,c
  7684  001FD2  1031               	iorwf	(??_LoRaGetFrequency+5)^0,w,c
  7685  001FD4  6E35               	movwf	(??_LoRaGetFrequency+9)^0,c
  7686  001FD6  502E               	movf	(??_LoRaGetFrequency+2)^0,w,c
  7687  001FD8  1032               	iorwf	(??_LoRaGetFrequency+6)^0,w,c
  7688  001FDA  6E36               	movwf	(??_LoRaGetFrequency+10)^0,c
  7689  001FDC  502F               	movf	(??_LoRaGetFrequency+3)^0,w,c
  7690  001FDE  1033               	iorwf	(??_LoRaGetFrequency+7)^0,w,c
  7691  001FE0  6E37               	movwf	(??_LoRaGetFrequency+11)^0,c
  7692  001FE2  5042               	movf	LoRaGetFrequency@lsb^0,w,c
  7693  001FE4  1034               	iorwf	(??_LoRaGetFrequency+8)^0,w,c
  7694  001FE6  6E38               	movwf	LoRaGetFrequency@intermediate^0,c
  7695  001FE8  5035               	movf	(??_LoRaGetFrequency+9)^0,w,c
  7696  001FEA  6E39               	movwf	(LoRaGetFrequency@intermediate+1)^0,c
  7697  001FEC  5036               	movf	(??_LoRaGetFrequency+10)^0,w,c
  7698  001FEE  6E3A               	movwf	(LoRaGetFrequency@intermediate+2)^0,c
  7699  001FF0  5037               	movf	(??_LoRaGetFrequency+11)^0,w,c
  7700  001FF2  6E3B               	movwf	(LoRaGetFrequency@intermediate+3)^0,c
  7701                           
  7702                           ;LoRa.c: 246: float freqMHz = (float)intermediate/16384.0;
  7703  001FF4  C038  F001         	movff	LoRaGetFrequency@intermediate,___xxtofl@val
  7704  001FF8  C039  F002         	movff	LoRaGetFrequency@intermediate+1,___xxtofl@val+1
  7705  001FFC  C03A  F003         	movff	LoRaGetFrequency@intermediate+2,___xxtofl@val+2
  7706  002000  C03B  F004         	movff	LoRaGetFrequency@intermediate+3,___xxtofl@val+3
  7707  002004  0E00               	movlw	0
  7708  002006  ECB4  F00C         	call	___xxtofl
  7709  00200A  C001  F00F         	movff	?___xxtofl,___fldiv@b
  7710  00200E  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  7711  002012  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  7712  002016  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  7713  00201A  0E00               	movlw	0
  7714  00201C  6E13               	movwf	___fldiv@a^0,c
  7715  00201E  0E00               	movlw	0
  7716  002020  6E14               	movwf	(___fldiv@a+1)^0,c
  7717  002022  0E80               	movlw	128
  7718  002024  6E15               	movwf	(___fldiv@a+2)^0,c
  7719  002026  0E46               	movlw	70
  7720  002028  6E16               	movwf	(___fldiv@a+3)^0,c
  7721  00202A  EC78  F009         	call	___fldiv	;wreg free
  7722  00202E  C00F  F03C         	movff	?___fldiv,LoRaGetFrequency@freqMHz
  7723  002032  C010  F03D         	movff	?___fldiv+1,LoRaGetFrequency@freqMHz+1
  7724  002036  C011  F03E         	movff	?___fldiv+2,LoRaGetFrequency@freqMHz+2
  7725  00203A  C012  F03F         	movff	?___fldiv+3,LoRaGetFrequency@freqMHz+3
  7726                           
  7727                           ;LoRa.c: 247: return freqMHz;
  7728  00203E  C03C  F028         	movff	LoRaGetFrequency@freqMHz,?_LoRaGetFrequency
  7729  002042  C03D  F029         	movff	LoRaGetFrequency@freqMHz+1,?_LoRaGetFrequency+1
  7730  002046  C03E  F02A         	movff	LoRaGetFrequency@freqMHz+2,?_LoRaGetFrequency+2
  7731  00204A  C03F  F02B         	movff	LoRaGetFrequency@freqMHz+3,?_LoRaGetFrequency+3
  7732  00204E  0012               	return		;funcret
  7733  002050                     __end_of_LoRaGetFrequency:
  7734                           	callstack 0
  7735                           
  7736 ;; *************** function ___xxtofl *****************
  7737 ;; Defined at:
  7738 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\xxtofl.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  sign            1    wreg     unsigned char 
  7741 ;;  val             4    0[COMRAM] long 
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  sign            1    8[COMRAM] unsigned char 
  7744 ;;  arg             4   10[COMRAM] unsigned long 
  7745 ;;  exp             1    9[COMRAM] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  4    0[COMRAM] unsigned char 
  7748 ;; Registers used:
  7749 ;;		wreg, status,2, status,0
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7755 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;Total ram usage:       14 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    1
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_LoRaGetFrequency
  7766 ;;		_printf
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text34
  7771  001968                     __ptext34:
  7772                           	callstack 0
  7773  001968                     ___xxtofl:
  7774                           	callstack 27
  7775                           
  7776                           ;incstack = 0
  7777                           ;___xxtofl@sign stored from wreg
  7778  001968  6E09               	movwf	___xxtofl@sign^0,c
  7779  00196A  5009               	movf	___xxtofl@sign^0,w,c
  7780  00196C  A4D8               	btfss	status,2,c
  7781  00196E  AE04               	btfss	(___xxtofl@val+3)^0,7,c
  7782  001970  D01A               	goto	l1151
  7783  001972  C001  F005         	movff	___xxtofl@val,??___xxtofl
  7784  001976  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  7785  00197A  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  7786  00197E  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  7787  001982  1E05               	comf	??___xxtofl^0,f,c
  7788  001984  1E06               	comf	(??___xxtofl+1)^0,f,c
  7789  001986  1E07               	comf	(??___xxtofl+2)^0,f,c
  7790  001988  1E08               	comf	(??___xxtofl+3)^0,f,c
  7791  00198A  2A05               	incf	??___xxtofl^0,f,c
  7792  00198C  0E00               	movlw	0
  7793  00198E  2206               	addwfc	(??___xxtofl+1)^0,f,c
  7794  001990  2207               	addwfc	(??___xxtofl+2)^0,f,c
  7795  001992  2208               	addwfc	(??___xxtofl+3)^0,f,c
  7796  001994  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  7797  001998  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  7798  00199C  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  7799  0019A0  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  7800  0019A4  D008               	goto	l3781
  7801  0019A6                     l1151:
  7802  0019A6  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  7803  0019AA  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  7804  0019AE  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  7805  0019B2  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  7806  0019B6                     l3781:
  7807  0019B6  5001               	movf	___xxtofl@val^0,w,c
  7808  0019B8  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  7809  0019BA  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  7810  0019BC  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  7811  0019BE  A4D8               	btfss	status,2,c
  7812  0019C0  D009               	goto	l3787
  7813  0019C2  0E00               	movlw	0
  7814  0019C4  6E01               	movwf	?___xxtofl^0,c
  7815  0019C6  0E00               	movlw	0
  7816  0019C8  6E02               	movwf	(?___xxtofl+1)^0,c
  7817  0019CA  0E00               	movlw	0
  7818  0019CC  6E03               	movwf	(?___xxtofl+2)^0,c
  7819  0019CE  0E00               	movlw	0
  7820  0019D0  6E04               	movwf	(?___xxtofl+3)^0,c
  7821  0019D2  0012               	return	
  7822  0019D4                     l3787:
  7823  0019D4  0E96               	movlw	150
  7824  0019D6  6E0A               	movwf	___xxtofl@exp^0,c
  7825  0019D8  D006               	goto	l3791
  7826  0019DA                     l3789:
  7827  0019DA  2A0A               	incf	___xxtofl@exp^0,f,c
  7828  0019DC  90D8               	bcf	status,0,c
  7829  0019DE  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  7830  0019E0  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  7831  0019E2  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  7832  0019E4  320B               	rrcf	___xxtofl@arg^0,f,c
  7833  0019E6                     l3791:
  7834  0019E6  0E00               	movlw	0
  7835  0019E8  140B               	andwf	___xxtofl@arg^0,w,c
  7836  0019EA  6E05               	movwf	??___xxtofl^0,c
  7837  0019EC  0E00               	movlw	0
  7838  0019EE  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  7839  0019F0  6E06               	movwf	(??___xxtofl+1)^0,c
  7840  0019F2  0E00               	movlw	0
  7841  0019F4  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  7842  0019F6  6E07               	movwf	(??___xxtofl+2)^0,c
  7843  0019F8  0EFE               	movlw	254
  7844  0019FA  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  7845  0019FC  6E08               	movwf	(??___xxtofl+3)^0,c
  7846  0019FE  5005               	movf	??___xxtofl^0,w,c
  7847  001A00  1006               	iorwf	(??___xxtofl+1)^0,w,c
  7848  001A02  1007               	iorwf	(??___xxtofl+2)^0,w,c
  7849  001A04  1008               	iorwf	(??___xxtofl+3)^0,w,c
  7850  001A06  B4D8               	btfsc	status,2,c
  7851  001A08  D00D               	goto	l1158
  7852  001A0A  D7E7               	goto	l3789
  7853  001A0C                     l3793:
  7854  001A0C  2A0A               	incf	___xxtofl@exp^0,f,c
  7855  001A0E  0E01               	movlw	1
  7856  001A10  260B               	addwf	___xxtofl@arg^0,f,c
  7857  001A12  0E00               	movlw	0
  7858  001A14  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  7859  001A16  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  7860  001A18  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  7861  001A1A  90D8               	bcf	status,0,c
  7862  001A1C  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  7863  001A1E  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  7864  001A20  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  7865  001A22  320B               	rrcf	___xxtofl@arg^0,f,c
  7866  001A24                     l1158:
  7867  001A24  0E00               	movlw	0
  7868  001A26  140B               	andwf	___xxtofl@arg^0,w,c
  7869  001A28  6E05               	movwf	??___xxtofl^0,c
  7870  001A2A  0E00               	movlw	0
  7871  001A2C  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  7872  001A2E  6E06               	movwf	(??___xxtofl+1)^0,c
  7873  001A30  0E00               	movlw	0
  7874  001A32  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  7875  001A34  6E07               	movwf	(??___xxtofl+2)^0,c
  7876  001A36  0EFF               	movlw	255
  7877  001A38  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  7878  001A3A  6E08               	movwf	(??___xxtofl+3)^0,c
  7879  001A3C  5005               	movf	??___xxtofl^0,w,c
  7880  001A3E  1006               	iorwf	(??___xxtofl+1)^0,w,c
  7881  001A40  1007               	iorwf	(??___xxtofl+2)^0,w,c
  7882  001A42  1008               	iorwf	(??___xxtofl+3)^0,w,c
  7883  001A44  B4D8               	btfsc	status,2,c
  7884  001A46  D007               	goto	l3801
  7885  001A48  D7E1               	goto	l3793
  7886  001A4A                     l3799:
  7887  001A4A  060A               	decf	___xxtofl@exp^0,f,c
  7888  001A4C  90D8               	bcf	status,0,c
  7889  001A4E  360B               	rlcf	___xxtofl@arg^0,f,c
  7890  001A50  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  7891  001A52  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  7892  001A54  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  7893  001A56                     l3801:
  7894  001A56  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  7895  001A58  D003               	goto	u3330
  7896  001A5A  0E02               	movlw	2
  7897  001A5C  600A               	cpfslt	___xxtofl@exp^0,c
  7898  001A5E  D7F5               	goto	l3799
  7899  001A60                     u3330:
  7900  001A60  A00A               	btfss	___xxtofl@exp^0,0,c
  7901  001A62  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  7902  001A64  90D8               	bcf	status,0,c
  7903  001A66  320A               	rrcf	___xxtofl@exp^0,f,c
  7904  001A68  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  7905  001A6C  6A06               	clrf	(??___xxtofl+1)^0,c
  7906  001A6E  6A07               	clrf	(??___xxtofl+2)^0,c
  7907  001A70  6A08               	clrf	(??___xxtofl+3)^0,c
  7908  001A72  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  7909  001A76  6A07               	clrf	(??___xxtofl+2)^0,c
  7910  001A78  6A06               	clrf	(??___xxtofl+1)^0,c
  7911  001A7A  6A05               	clrf	??___xxtofl^0,c
  7912  001A7C  5005               	movf	??___xxtofl^0,w,c
  7913  001A7E  120B               	iorwf	___xxtofl@arg^0,f,c
  7914  001A80  5006               	movf	(??___xxtofl+1)^0,w,c
  7915  001A82  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  7916  001A84  5007               	movf	(??___xxtofl+2)^0,w,c
  7917  001A86  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  7918  001A88  5008               	movf	(??___xxtofl+3)^0,w,c
  7919  001A8A  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  7920  001A8C  5009               	movf	___xxtofl@sign^0,w,c
  7921  001A8E  A4D8               	btfss	status,2,c
  7922  001A90  AE04               	btfss	(___xxtofl@val+3)^0,7,c
  7923  001A92  D001               	goto	l3817
  7924  001A94  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  7925  001A96                     l3817:
  7926  001A96  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  7927  001A9A  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  7928  001A9E  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  7929  001AA2  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  7930  001AA6  0012               	return		;funcret
  7931  001AA8                     __end_of___xxtofl:
  7932                           	callstack 0
  7933                           
  7934 ;; *************** function ___fldiv *****************
  7935 ;; Defined at:
  7936 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\sprcdiv.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  b               4   14[COMRAM] unsigned char 
  7939 ;;  a               4   18[COMRAM] unsigned char 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;  grs             4   33[COMRAM] unsigned long 
  7942 ;;  rem             4   26[COMRAM] unsigned long 
  7943 ;;  new_exp         2   31[COMRAM] int 
  7944 ;;  aexp            1   38[COMRAM] unsigned char 
  7945 ;;  bexp            1   37[COMRAM] unsigned char 
  7946 ;;  sign            1   30[COMRAM] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  4   14[COMRAM] unsigned char 
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7956 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;Total ram usage:       25 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    1
  7963 ;; This function calls:
  7964 ;;		Nothing
  7965 ;; This function is called by:
  7966 ;;		_LoRaGetFrequency
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           	psect	text35
  7971  0012F0                     __ptext35:
  7972                           	callstack 0
  7973  0012F0                     ___fldiv:
  7974                           	callstack 27
  7975                           
  7976                           ;incstack = 0
  7977  0012F0  5012               	movf	(___fldiv@b+3)^0,w,c
  7978  0012F2  0B80               	andlw	128
  7979  0012F4  6E1F               	movwf	___fldiv@sign^0,c
  7980  0012F6  5012               	movf	(___fldiv@b+3)^0,w,c
  7981  0012F8  2412               	addwf	(___fldiv@b+3)^0,w,c
  7982  0012FA  6E26               	movwf	___fldiv@bexp^0,c
  7983  0012FC  BE11               	btfsc	(___fldiv@b+2)^0,7,c
  7984  0012FE  8026               	bsf	___fldiv@bexp^0,0,c
  7985  001300  5026               	movf	___fldiv@bexp^0,w,c
  7986  001302  B4D8               	btfsc	status,2,c
  7987  001304  D00D               	goto	l4189
  7988  001306  2826               	incf	___fldiv@bexp^0,w,c
  7989  001308  A4D8               	btfss	status,2,c
  7990  00130A  D008               	goto	l4185
  7991  00130C  0E00               	movlw	0
  7992  00130E  6E0F               	movwf	___fldiv@b^0,c
  7993  001310  0E00               	movlw	0
  7994  001312  6E10               	movwf	(___fldiv@b+1)^0,c
  7995  001314  0E00               	movlw	0
  7996  001316  6E11               	movwf	(___fldiv@b+2)^0,c
  7997  001318  0E00               	movlw	0
  7998  00131A  6E12               	movwf	(___fldiv@b+3)^0,c
  7999  00131C                     l4185:
  8000  00131C  8E11               	bsf	(___fldiv@b+2)^0,7,c
  8001  00131E  D006               	goto	L8
  8002  001320                     l4189:
  8003  001320  0E00               	movlw	0
  8004  001322  6E0F               	movwf	___fldiv@b^0,c
  8005  001324  0E00               	movlw	0
  8006  001326  6E10               	movwf	(___fldiv@b+1)^0,c
  8007  001328  0E00               	movlw	0
  8008  00132A  6E11               	movwf	(___fldiv@b+2)^0,c
  8009  00132C                     L8:
  8010  00132C  0E00               	movlw	0
  8011  00132E  6E12               	movwf	(___fldiv@b+3)^0,c
  8012  001330  5016               	movf	(___fldiv@a+3)^0,w,c
  8013  001332  0B80               	andlw	128
  8014  001334  1A1F               	xorwf	___fldiv@sign^0,f,c
  8015  001336  5016               	movf	(___fldiv@a+3)^0,w,c
  8016  001338  2416               	addwf	(___fldiv@a+3)^0,w,c
  8017  00133A  6E27               	movwf	___fldiv@aexp^0,c
  8018  00133C  BE15               	btfsc	(___fldiv@a+2)^0,7,c
  8019  00133E  8027               	bsf	___fldiv@aexp^0,0,c
  8020  001340  5027               	movf	___fldiv@aexp^0,w,c
  8021  001342  B4D8               	btfsc	status,2,c
  8022  001344  D00D               	goto	l4209
  8023  001346  2827               	incf	___fldiv@aexp^0,w,c
  8024  001348  A4D8               	btfss	status,2,c
  8025  00134A  D008               	goto	l4205
  8026  00134C  0E00               	movlw	0
  8027  00134E  6E13               	movwf	___fldiv@a^0,c
  8028  001350  0E00               	movlw	0
  8029  001352  6E14               	movwf	(___fldiv@a+1)^0,c
  8030  001354  0E00               	movlw	0
  8031  001356  6E15               	movwf	(___fldiv@a+2)^0,c
  8032  001358  0E00               	movlw	0
  8033  00135A  6E16               	movwf	(___fldiv@a+3)^0,c
  8034  00135C                     l4205:
  8035  00135C  8E15               	bsf	(___fldiv@a+2)^0,7,c
  8036  00135E  D006               	goto	L9
  8037  001360                     l4209:
  8038  001360  0E00               	movlw	0
  8039  001362  6E13               	movwf	___fldiv@a^0,c
  8040  001364  0E00               	movlw	0
  8041  001366  6E14               	movwf	(___fldiv@a+1)^0,c
  8042  001368  0E00               	movlw	0
  8043  00136A  6E15               	movwf	(___fldiv@a+2)^0,c
  8044  00136C                     L9:
  8045  00136C  0E00               	movlw	0
  8046  00136E  6E16               	movwf	(___fldiv@a+3)^0,c
  8047  001370  5013               	movf	___fldiv@a^0,w,c
  8048  001372  1014               	iorwf	(___fldiv@a+1)^0,w,c
  8049  001374  1015               	iorwf	(___fldiv@a+2)^0,w,c
  8050  001376  1016               	iorwf	(___fldiv@a+3)^0,w,c
  8051  001378  A4D8               	btfss	status,2,c
  8052  00137A  D017               	goto	l4223
  8053  00137C  0E00               	movlw	0
  8054  00137E  6E0F               	movwf	___fldiv@b^0,c
  8055  001380  0E00               	movlw	0
  8056  001382  6E10               	movwf	(___fldiv@b+1)^0,c
  8057  001384  0E00               	movlw	0
  8058  001386  6E11               	movwf	(___fldiv@b+2)^0,c
  8059  001388  0E00               	movlw	0
  8060  00138A  6E12               	movwf	(___fldiv@b+3)^0,c
  8061  00138C  0E80               	movlw	128
  8062  00138E  1211               	iorwf	(___fldiv@b+2)^0,f,c
  8063  001390  0E7F               	movlw	127
  8064  001392  1212               	iorwf	(___fldiv@b+3)^0,f,c
  8065  001394                     l4217:
  8066  001394  501F               	movf	___fldiv@sign^0,w,c
  8067  001396  1212               	iorwf	(___fldiv@b+3)^0,f,c
  8068  001398  C00F  F00F         	movff	___fldiv@b,?___fldiv
  8069  00139C  C010  F010         	movff	___fldiv@b+1,?___fldiv+1
  8070  0013A0  C011  F011         	movff	___fldiv@b+2,?___fldiv+2
  8071  0013A4  C012  F012         	movff	___fldiv@b+3,?___fldiv+3
  8072  0013A8  0012               	return	
  8073  0013AA                     l4223:
  8074  0013AA  5026               	movf	___fldiv@bexp^0,w,c
  8075  0013AC  A4D8               	btfss	status,2,c
  8076  0013AE  D009               	goto	l4231
  8077  0013B0  0E00               	movlw	0
  8078  0013B2  6E0F               	movwf	?___fldiv^0,c
  8079  0013B4  0E00               	movlw	0
  8080  0013B6  6E10               	movwf	(?___fldiv+1)^0,c
  8081  0013B8  0E00               	movlw	0
  8082  0013BA  6E11               	movwf	(?___fldiv+2)^0,c
  8083  0013BC  0E00               	movlw	0
  8084  0013BE  6E12               	movwf	(?___fldiv+3)^0,c
  8085  0013C0  0012               	return	
  8086  0013C2                     l4231:
  8087  0013C2  5027               	movf	___fldiv@aexp^0,w,c
  8088  0013C4  C026  F017         	movff	___fldiv@bexp,??___fldiv
  8089  0013C8  6A18               	clrf	(??___fldiv+1)^0,c
  8090  0013CA  5E17               	subwf	??___fldiv^0,f,c
  8091  0013CC  0E00               	movlw	0
  8092  0013CE  5A18               	subwfb	(??___fldiv+1)^0,f,c
  8093  0013D0  0E7F               	movlw	127
  8094  0013D2  2417               	addwf	??___fldiv^0,w,c
  8095  0013D4  6E20               	movwf	___fldiv@new_exp^0,c
  8096  0013D6  0E00               	movlw	0
  8097  0013D8  2018               	addwfc	(??___fldiv+1)^0,w,c
  8098  0013DA  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  8099  0013DC  C00F  F01B         	movff	___fldiv@b,___fldiv@rem
  8100  0013E0  C010  F01C         	movff	___fldiv@b+1,___fldiv@rem+1
  8101  0013E4  C011  F01D         	movff	___fldiv@b+2,___fldiv@rem+2
  8102  0013E8  C012  F01E         	movff	___fldiv@b+3,___fldiv@rem+3
  8103  0013EC  0E00               	movlw	0
  8104  0013EE  6E0F               	movwf	___fldiv@b^0,c
  8105  0013F0  0E00               	movlw	0
  8106  0013F2  6E10               	movwf	(___fldiv@b+1)^0,c
  8107  0013F4  0E00               	movlw	0
  8108  0013F6  6E11               	movwf	(___fldiv@b+2)^0,c
  8109  0013F8  0E00               	movlw	0
  8110  0013FA  6E12               	movwf	(___fldiv@b+3)^0,c
  8111  0013FC  0E00               	movlw	0
  8112  0013FE  6E22               	movwf	___fldiv@grs^0,c
  8113  001400  0E00               	movlw	0
  8114  001402  6E23               	movwf	(___fldiv@grs+1)^0,c
  8115  001404  0E00               	movlw	0
  8116  001406  6E24               	movwf	(___fldiv@grs+2)^0,c
  8117  001408  0E00               	movlw	0
  8118  00140A  6E25               	movwf	(___fldiv@grs+3)^0,c
  8119  00140C  0E00               	movlw	0
  8120  00140E  6E27               	movwf	___fldiv@aexp^0,c
  8121  001410  D028               	goto	l1080
  8122  001412                     l4241:
  8123  001412  5027               	movf	___fldiv@aexp^0,w,c
  8124  001414  B4D8               	btfsc	status,2,c
  8125  001416  D011               	goto	l4249
  8126  001418  90D8               	bcf	status,0,c
  8127  00141A  361B               	rlcf	___fldiv@rem^0,f,c
  8128  00141C  361C               	rlcf	(___fldiv@rem+1)^0,f,c
  8129  00141E  361D               	rlcf	(___fldiv@rem+2)^0,f,c
  8130  001420  361E               	rlcf	(___fldiv@rem+3)^0,f,c
  8131  001422  90D8               	bcf	status,0,c
  8132  001424  360F               	rlcf	___fldiv@b^0,f,c
  8133  001426  3610               	rlcf	(___fldiv@b+1)^0,f,c
  8134  001428  3611               	rlcf	(___fldiv@b+2)^0,f,c
  8135  00142A  3612               	rlcf	(___fldiv@b+3)^0,f,c
  8136  00142C  BE25               	btfsc	(___fldiv@grs+3)^0,7,c
  8137  00142E  800F               	bsf	___fldiv@b^0,0,c
  8138  001430  90D8               	bcf	status,0,c
  8139  001432  3622               	rlcf	___fldiv@grs^0,f,c
  8140  001434  3623               	rlcf	(___fldiv@grs+1)^0,f,c
  8141  001436  3624               	rlcf	(___fldiv@grs+2)^0,f,c
  8142  001438  3625               	rlcf	(___fldiv@grs+3)^0,f,c
  8143  00143A                     l4249:
  8144  00143A  5013               	movf	___fldiv@a^0,w,c
  8145  00143C  5C1B               	subwf	___fldiv@rem^0,w,c
  8146  00143E  5014               	movf	(___fldiv@a+1)^0,w,c
  8147  001440  581C               	subwfb	(___fldiv@rem+1)^0,w,c
  8148  001442  5015               	movf	(___fldiv@a+2)^0,w,c
  8149  001444  581D               	subwfb	(___fldiv@rem+2)^0,w,c
  8150  001446  5016               	movf	(___fldiv@a+3)^0,w,c
  8151  001448  581E               	subwfb	(___fldiv@rem+3)^0,w,c
  8152  00144A  A0D8               	btfss	status,0,c
  8153  00144C  D009               	goto	l4255
  8154  00144E  8C25               	bsf	(___fldiv@grs+3)^0,6,c
  8155  001450  5013               	movf	___fldiv@a^0,w,c
  8156  001452  5E1B               	subwf	___fldiv@rem^0,f,c
  8157  001454  5014               	movf	(___fldiv@a+1)^0,w,c
  8158  001456  5A1C               	subwfb	(___fldiv@rem+1)^0,f,c
  8159  001458  5015               	movf	(___fldiv@a+2)^0,w,c
  8160  00145A  5A1D               	subwfb	(___fldiv@rem+2)^0,f,c
  8161  00145C  5016               	movf	(___fldiv@a+3)^0,w,c
  8162  00145E  5A1E               	subwfb	(___fldiv@rem+3)^0,f,c
  8163  001460                     l4255:
  8164  001460  2A27               	incf	___fldiv@aexp^0,f,c
  8165  001462                     l1080:
  8166  001462  0E19               	movlw	25
  8167  001464  6427               	cpfsgt	___fldiv@aexp^0,c
  8168  001466  D7D5               	goto	l4241
  8169  001468  501B               	movf	___fldiv@rem^0,w,c
  8170  00146A  101C               	iorwf	(___fldiv@rem+1)^0,w,c
  8171  00146C  101D               	iorwf	(___fldiv@rem+2)^0,w,c
  8172  00146E  101E               	iorwf	(___fldiv@rem+3)^0,w,c
  8173  001470  B4D8               	btfsc	status,2,c
  8174  001472  D011               	goto	l4267
  8175  001474  8022               	bsf	___fldiv@grs^0,0,c
  8176  001476  D00F               	goto	l4267
  8177  001478                     l4261:
  8178  001478  90D8               	bcf	status,0,c
  8179  00147A  360F               	rlcf	___fldiv@b^0,f,c
  8180  00147C  3610               	rlcf	(___fldiv@b+1)^0,f,c
  8181  00147E  3611               	rlcf	(___fldiv@b+2)^0,f,c
  8182  001480  3612               	rlcf	(___fldiv@b+3)^0,f,c
  8183  001482  BE25               	btfsc	(___fldiv@grs+3)^0,7,c
  8184  001484  800F               	bsf	___fldiv@b^0,0,c
  8185  001486  90D8               	bcf	status,0,c
  8186  001488  3622               	rlcf	___fldiv@grs^0,f,c
  8187  00148A  3623               	rlcf	(___fldiv@grs+1)^0,f,c
  8188  00148C  3624               	rlcf	(___fldiv@grs+2)^0,f,c
  8189  00148E  3625               	rlcf	(___fldiv@grs+3)^0,f,c
  8190  001490  0620               	decf	___fldiv@new_exp^0,f,c
  8191  001492  A0D8               	btfss	status,0,c
  8192  001494  0621               	decf	(___fldiv@new_exp+1)^0,f,c
  8193  001496                     l4267:
  8194  001496  AE11               	btfss	(___fldiv@b+2)^0,7,c
  8195  001498  D7EF               	goto	l4261
  8196  00149A  0E00               	movlw	0
  8197  00149C  6E27               	movwf	___fldiv@aexp^0,c
  8198  00149E  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  8199  0014A0  D017               	goto	l1091
  8200  0014A2  0EFF               	movlw	255
  8201  0014A4  1422               	andwf	___fldiv@grs^0,w,c
  8202  0014A6  6E17               	movwf	??___fldiv^0,c
  8203  0014A8  0EFF               	movlw	255
  8204  0014AA  1423               	andwf	(___fldiv@grs+1)^0,w,c
  8205  0014AC  6E18               	movwf	(??___fldiv+1)^0,c
  8206  0014AE  0EFF               	movlw	255
  8207  0014B0  1424               	andwf	(___fldiv@grs+2)^0,w,c
  8208  0014B2  6E19               	movwf	(??___fldiv+2)^0,c
  8209  0014B4  0E7F               	movlw	127
  8210  0014B6  1425               	andwf	(___fldiv@grs+3)^0,w,c
  8211  0014B8  6E1A               	movwf	(??___fldiv+3)^0,c
  8212  0014BA  5017               	movf	??___fldiv^0,w,c
  8213  0014BC  1018               	iorwf	(??___fldiv+1)^0,w,c
  8214  0014BE  1019               	iorwf	(??___fldiv+2)^0,w,c
  8215  0014C0  101A               	iorwf	(??___fldiv+3)^0,w,c
  8216  0014C2  B4D8               	btfsc	status,2,c
  8217  0014C4  D003               	goto	l1092
  8218  0014C6                     u3850:
  8219  0014C6  0E01               	movlw	1
  8220  0014C8  6E27               	movwf	___fldiv@aexp^0,c
  8221  0014CA  D002               	goto	l1091
  8222  0014CC                     l1092:
  8223  0014CC  B00F               	btfsc	___fldiv@b^0,0,c
  8224  0014CE  D7FB               	goto	u3850
  8225  0014D0                     l1091:
  8226  0014D0  5027               	movf	___fldiv@aexp^0,w,c
  8227  0014D2  B4D8               	btfsc	status,2,c
  8228  0014D4  D01F               	goto	l4287
  8229  0014D6  0E01               	movlw	1
  8230  0014D8  260F               	addwf	___fldiv@b^0,f,c
  8231  0014DA  0E00               	movlw	0
  8232  0014DC  2210               	addwfc	(___fldiv@b+1)^0,f,c
  8233  0014DE  2211               	addwfc	(___fldiv@b+2)^0,f,c
  8234  0014E0  2212               	addwfc	(___fldiv@b+3)^0,f,c
  8235  0014E2  A012               	btfss	(___fldiv@b+3)^0,0,c
  8236  0014E4  D017               	goto	l4287
  8237  0014E6  C00F  F017         	movff	___fldiv@b,??___fldiv
  8238  0014EA  C010  F018         	movff	___fldiv@b+1,??___fldiv+1
  8239  0014EE  C011  F019         	movff	___fldiv@b+2,??___fldiv+2
  8240  0014F2  C012  F01A         	movff	___fldiv@b+3,??___fldiv+3
  8241  0014F6  341A               	rlcf	(??___fldiv+3)^0,w,c
  8242  0014F8  321A               	rrcf	(??___fldiv+3)^0,f,c
  8243  0014FA  3219               	rrcf	(??___fldiv+2)^0,f,c
  8244  0014FC  3218               	rrcf	(??___fldiv+1)^0,f,c
  8245  0014FE  3217               	rrcf	??___fldiv^0,f,c
  8246  001500  C017  F00F         	movff	??___fldiv,___fldiv@b
  8247  001504  C018  F010         	movff	??___fldiv+1,___fldiv@b+1
  8248  001508  C019  F011         	movff	??___fldiv+2,___fldiv@b+2
  8249  00150C  C01A  F012         	movff	??___fldiv+3,___fldiv@b+3
  8250  001510  4A20               	infsnz	___fldiv@new_exp^0,f,c
  8251  001512  2A21               	incf	(___fldiv@new_exp+1)^0,f,c
  8252  001514                     l4287:
  8253  001514  BE21               	btfsc	(___fldiv@new_exp+1)^0,7,c
  8254  001516  D010               	goto	l4291
  8255  001518  5021               	movf	(___fldiv@new_exp+1)^0,w,c
  8256  00151A  E103               	bnz	u3890
  8257  00151C  2820               	incf	___fldiv@new_exp^0,w,c
  8258  00151E  A0D8               	btfss	status,0,c
  8259  001520  D00B               	goto	l4291
  8260  001522                     u3890:
  8261  001522  0E00               	movlw	0
  8262  001524  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  8263  001526  6820               	setf	___fldiv@new_exp^0,c
  8264  001528  0E00               	movlw	0
  8265  00152A  6E0F               	movwf	___fldiv@b^0,c
  8266  00152C  0E00               	movlw	0
  8267  00152E  6E10               	movwf	(___fldiv@b+1)^0,c
  8268  001530  0E00               	movlw	0
  8269  001532  6E11               	movwf	(___fldiv@b+2)^0,c
  8270  001534  0E00               	movlw	0
  8271  001536  6E12               	movwf	(___fldiv@b+3)^0,c
  8272  001538                     l4291:
  8273  001538  BE21               	btfsc	(___fldiv@new_exp+1)^0,7,c
  8274  00153A  D005               	goto	u3900
  8275  00153C  5021               	movf	(___fldiv@new_exp+1)^0,w,c
  8276  00153E  E111               	bnz	l4295
  8277  001540  0420               	decf	___fldiv@new_exp^0,w,c
  8278  001542  B0D8               	btfsc	status,0,c
  8279  001544  D00E               	goto	l4295
  8280  001546                     u3900:
  8281  001546  0E00               	movlw	0
  8282  001548  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  8283  00154A  0E00               	movlw	0
  8284  00154C  6E20               	movwf	___fldiv@new_exp^0,c
  8285  00154E  0E00               	movlw	0
  8286  001550  6E0F               	movwf	___fldiv@b^0,c
  8287  001552  0E00               	movlw	0
  8288  001554  6E10               	movwf	(___fldiv@b+1)^0,c
  8289  001556  0E00               	movlw	0
  8290  001558  6E11               	movwf	(___fldiv@b+2)^0,c
  8291  00155A  0E00               	movlw	0
  8292  00155C  6E12               	movwf	(___fldiv@b+3)^0,c
  8293  00155E  0E00               	movlw	0
  8294  001560  6E1F               	movwf	___fldiv@sign^0,c
  8295  001562                     l4295:
  8296  001562  C020  F026         	movff	___fldiv@new_exp,___fldiv@bexp
  8297  001566  A026               	btfss	___fldiv@bexp^0,0,c
  8298  001568  D002               	goto	l4301
  8299  00156A  8E11               	bsf	(___fldiv@b+2)^0,7,c
  8300  00156C  D001               	goto	l4303
  8301  00156E                     l4301:
  8302  00156E  9E11               	bcf	(___fldiv@b+2)^0,7,c
  8303  001570                     l4303:
  8304  001570  90D8               	bcf	status,0,c
  8305  001572  3026               	rrcf	___fldiv@bexp^0,w,c
  8306  001574  6E12               	movwf	(___fldiv@b+3)^0,c
  8307  001576  D70E               	goto	l4217
  8308  001578                     __end_of___fldiv:
  8309                           	callstack 0
  8310                           
  8311 ;; *************** function _SPI2ReadByte *****************
  8312 ;; Defined at:
  8313 ;;		line 132 in file "LoRa.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  address         1    wreg     unsigned char 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  address         1    0[COMRAM] unsigned char 
  8318 ;;  dataByte        1    1[COMRAM] unsigned char 
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  1    wreg      unsigned char 
  8321 ;; Registers used:
  8322 ;;		wreg, status,2
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;Total ram usage:        2 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:    1
  8335 ;; This function calls:
  8336 ;;		Nothing
  8337 ;; This function is called by:
  8338 ;;		_readOpModeRegister
  8339 ;;		_LoRaGetFrequency
  8340 ;;		_LoRaGetIRQFlags
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           	psect	text36
  8345  002828                     __ptext36:
  8346                           	callstack 0
  8347  002828                     _SPI2ReadByte:
  8348                           	callstack 25
  8349                           
  8350                           ;incstack = 0
  8351                           ;SPI2ReadByte@address stored from wreg
  8352  002828  6E01               	movwf	SPI2ReadByte@address^0,c
  8353                           
  8354                           ;LoRa.c: 133: SSP2IF=0;
  8355  00282A  9EA4               	bcf	4004,7,c	;volatile
  8356                           
  8357                           ;LoRa.c: 134: LATDbits.LATD3=0;
  8358  00282C  968C               	bcf	140,3,c	;volatile
  8359                           
  8360                           ;LoRa.c: 135: SSP2BUF=address;
  8361  00282E  C001  FF6F         	movff	SPI2ReadByte@address,3951	;volatile
  8362  002832                     l249:
  8363  002832  AEA4               	btfss	4004,7,c	;volatile
  8364  002834  D7FE               	goto	l249
  8365                           
  8366                           ;LoRa.c: 138: };LoRa.c: 139: SSP2IF=0;
  8367  002836  9EA4               	bcf	4004,7,c	;volatile
  8368                           
  8369                           ;LoRa.c: 140: SSP2BUF=0;
  8370  002838  0E00               	movlw	0
  8371  00283A  6E6F               	movwf	111,c	;volatile
  8372  00283C                     l252:
  8373  00283C  AEA4               	btfss	4004,7,c	;volatile
  8374  00283E  D7FE               	goto	l252
  8375                           
  8376                           ;LoRa.c: 143: };LoRa.c: 144: SSP2IF=0;
  8377  002840  9EA4               	bcf	4004,7,c	;volatile
  8378                           
  8379                           ;LoRa.c: 146: LATDbits.LATD3=1;
  8380  002842  868C               	bsf	140,3,c	;volatile
  8381                           
  8382                           ;LoRa.c: 147: uint8_t dataByte = SSP2BUF;
  8383  002844  CF6F F002          	movff	3951,SPI2ReadByte@dataByte	;volatile
  8384                           
  8385                           ;LoRa.c: 148: return dataByte;
  8386  002848  5002               	movf	SPI2ReadByte@dataByte^0,w,c
  8387  00284A  0012               	return		;funcret
  8388  00284C                     __end_of_SPI2ReadByte:
  8389                           	callstack 0
  8390                           
  8391 ;; *************** function _LoRaClearIRQFlags *****************
  8392 ;; Defined at:
  8393 ;;		line 256 in file "LoRa.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;		None
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;		None
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		wreg, status,2, status,0, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;Total ram usage:        0 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    2
  8414 ;; This function calls:
  8415 ;;		_SPI2WriteByte
  8416 ;; This function is called by:
  8417 ;;		_transmitData
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           	psect	text37
  8422  0028B8                     __ptext37:
  8423                           	callstack 0
  8424  0028B8                     _LoRaClearIRQFlags:
  8425                           	callstack 27
  8426                           
  8427                           ;LoRa.c: 257: SPI2WriteByte(0x12,0xFF);
  8428                           
  8429                           ;incstack = 0
  8430  0028B8  0EFF               	movlw	255
  8431  0028BA  6E01               	movwf	SPI2WriteByte@data^0,c
  8432  0028BC  0E12               	movlw	18
  8433  0028BE  EC0D  F013         	call	_SPI2WriteByte
  8434  0028C2  0012               	return		;funcret
  8435  0028C4                     __end_of_LoRaClearIRQFlags:
  8436                           	callstack 0
  8437                           
  8438 ;; *************** function _SPI2WriteByte *****************
  8439 ;; Defined at:
  8440 ;;		line 104 in file "LoRa.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  address         1    wreg     unsigned char 
  8443 ;;  data            1    0[COMRAM] unsigned char 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  address         1    2[COMRAM] unsigned char 
  8446 ;;  dataByte        1    0        unsigned char 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;                  1    wreg      void 
  8449 ;; Registers used:
  8450 ;;		wreg, status,2, status,0
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8456 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;Total ram usage:        3 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    1
  8463 ;; This function calls:
  8464 ;;		Nothing
  8465 ;; This function is called by:
  8466 ;;		_writeOpModeRegister
  8467 ;;		_LoRaTXData
  8468 ;;		_LoRaSetFrequency
  8469 ;;		_LoRaClearIRQFlags
  8470 ;;		_LoRaOptimalLoad
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           	psect	text38
  8475  00261A                     __ptext38:
  8476                           	callstack 0
  8477  00261A                     _SPI2WriteByte:
  8478                           	callstack 27
  8479                           
  8480                           ;incstack = 0
  8481                           ;SPI2WriteByte@address stored from wreg
  8482  00261A  6E03               	movwf	SPI2WriteByte@address^0,c
  8483                           
  8484                           ;LoRa.c: 105: SSP2IF=0;
  8485  00261C  9EA4               	bcf	4004,7,c	;volatile
  8486                           
  8487                           ;LoRa.c: 106: LATDbits.LATD3=0;
  8488  00261E  968C               	bcf	140,3,c	;volatile
  8489                           
  8490                           ;LoRa.c: 107: _delay((unsigned long)((5)*(64000000/4000000.0)));
  8491  002620  0E1A               	movlw	26
  8492  002622                     u4177:
  8493  002622  2EE8               	decfsz	wreg,f,c
  8494  002624  D7FE               	bra	u4177
  8495  002626  D000               	nop2	
  8496                           
  8497                           ;LoRa.c: 108: address = address|0x80;
  8498  002628  5003               	movf	SPI2WriteByte@address^0,w,c
  8499  00262A  0980               	iorlw	128
  8500  00262C  6E03               	movwf	SPI2WriteByte@address^0,c
  8501                           
  8502                           ;LoRa.c: 109: SSP2BUF=address;
  8503  00262E  C003  FF6F         	movff	SPI2WriteByte@address,3951	;volatile
  8504  002632                     l240:
  8505  002632  AEA4               	btfss	4004,7,c	;volatile
  8506  002634  D7FE               	goto	l240
  8507                           
  8508                           ;LoRa.c: 112: };LoRa.c: 113: SSP2IF=0;
  8509  002636  9EA4               	bcf	4004,7,c	;volatile
  8510                           
  8511                           ;LoRa.c: 114: _delay((unsigned long)((5)*(64000000/4000000.0)));
  8512  002638  0E1A               	movlw	26
  8513  00263A                     u4187:
  8514  00263A  2EE8               	decfsz	wreg,f,c
  8515  00263C  D7FE               	bra	u4187
  8516  00263E  D000               	nop2	
  8517                           
  8518                           ;LoRa.c: 115: SSP2BUF=data;
  8519  002640  C001  FF6F         	movff	SPI2WriteByte@data,3951	;volatile
  8520  002644                     l243:
  8521  002644  AEA4               	btfss	4004,7,c	;volatile
  8522  002646  D7FE               	goto	l243
  8523                           
  8524                           ;LoRa.c: 118: };LoRa.c: 119: _delay((unsigned long)((5)*(64000000/4000000.0)));
  8525  002648  0E1A               	movlw	26
  8526  00264A                     u4197:
  8527  00264A  2EE8               	decfsz	wreg,f,c
  8528  00264C  D7FE               	bra	u4197
  8529  00264E  D000               	nop2	
  8530                           
  8531                           ;LoRa.c: 120: LATDbits.LATD3=1;
  8532  002650  868C               	bsf	140,3,c	;volatile
  8533                           
  8534                           ;LoRa.c: 121: SSP2IF=0;
  8535  002652  9EA4               	bcf	4004,7,c	;volatile
  8536  002654  506F               	movf	111,w,c	;volatile
  8537  002656  0012               	return		;funcret
  8538  002658                     __end_of_SPI2WriteByte:
  8539                           	callstack 0
  8540                           
  8541 ;; *************** function _CRC16 *****************
  8542 ;; Defined at:
  8543 ;;		line 10 in file "CRC16.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;  nData           1    0[COMRAM] PTR const unsigned char 
  8546 ;;		 -> txData(50), 
  8547 ;;  wLength         2    1[COMRAM] unsigned short 
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;  wCRCWord        2    6[COMRAM] unsigned short 
  8550 ;;  nTemp           1    5[COMRAM] unsigned char 
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  2    0[COMRAM] unsigned short 
  8553 ;; Registers used:
  8554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8555 ;; Tracked objects:
  8556 ;;		On entry : 3F/0
  8557 ;;		On exit  : 3F/0
  8558 ;;		Unchanged: 3F/0
  8559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8560 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;Total ram usage:        8 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    1
  8567 ;; This function calls:
  8568 ;;		Nothing
  8569 ;; This function is called by:
  8570 ;;		_transmitData
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           	psect	text39
  8575  0024D8                     __ptext39:
  8576                           	callstack 0
  8577  0024D8                     _CRC16:
  8578                           	callstack 28
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;CRC16.c: 11: static const unsigned short int wCRCTable[] = {;CRC16.c: 12: 0X0000, 0XC0C
      +                          1, 0XC181, 0X0140, 0XC301, 0X03C0, 0X0280, 0XC241,;CRC16.c: 13: 0XC601, 0X06C0, 0X0780, 
      +                          0XC741, 0X0500, 0XC5C1, 0XC481, 0X0440,;CRC16.c: 14: 0XCC01, 0X0CC0, 0X0D80, 0XCD41, 0X0
      +                          F00, 0XCFC1, 0XCE81, 0X0E40,;CRC16.c: 15: 0X0A00, 0XCAC1, 0XCB81, 0X0B40, 0XC901, 0X09C0
      +                          , 0X0880, 0XC841,;CRC16.c: 16: 0XD801, 0X18C0, 0X1980, 0XD941, 0X1B00, 0XDBC1, 0XDA81, 0
      +                          X1A40,;CRC16.c: 17: 0X1E00, 0XDEC1, 0XDF81, 0X1F40, 0XDD01, 0X1DC0, 0X1C80, 0XDC41,
  8582                           
  8583                           ;incstack = 0
  8584  0024D8  6807               	setf	CRC16@wCRCWord^0,c
  8585  0024DA  6808               	setf	(CRC16@wCRCWord+1)^0,c
  8586                           
  8587                           ;CRC16.c: 48: while (wLength--){
  8588  0024DC  D01C               	goto	l4337
  8589  0024DE                     l4329:
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;CRC16.c: 49: nTemp = *nData++ ^ wCRCWord;
  8593  0024DE  5001               	movf	CRC16@nData^0,w,c
  8594  0024E0  6ED9               	movwf	fsr2l,c
  8595  0024E2  6ADA               	clrf	fsr2h,c
  8596  0024E4  50DF               	movf	indf2,w,c
  8597  0024E6  1807               	xorwf	CRC16@wCRCWord^0,w,c
  8598  0024E8  6E06               	movwf	CRC16@nTemp^0,c
  8599                           
  8600                           ; BSR set to: 0
  8601  0024EA  2A01               	incf	CRC16@nData^0,f,c
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;CRC16.c: 50: wCRCWord >>= 8;
  8605  0024EC  C008  F007         	movff	CRC16@wCRCWord+1,CRC16@wCRCWord
  8606  0024F0  6A08               	clrf	(CRC16@wCRCWord+1)^0,c
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;CRC16.c: 51: wCRCWord ^= wCRCTable[nTemp];
  8610  0024F2  5006               	movf	CRC16@nTemp^0,w,c
  8611  0024F4  0D02               	mullw	2
  8612  0024F6  0E1D               	movlw	low CRC16@wCRCTable
  8613  0024F8  24F3               	addwf	243,w,c
  8614  0024FA  6EF6               	movwf	tblptrl,c
  8615  0024FC  0EFC               	movlw	high CRC16@wCRCTable
  8616  0024FE  20F4               	addwfc	244,w,c
  8617  002500  6EF7               	movwf	tblptrh,c
  8618  002502                     	if	0	;There are less than 3 active tblptr bytes
  8619  002502                     	endif
  8620  002502  0009               	tblrd		*+
  8621  002504  CFF5 F004          	movff	tablat,??_CRC16
  8622  002508  0009               	tblrd		*+
  8623  00250A  CFF5 F005          	movff	tablat,??_CRC16+1
  8624  00250E  5004               	movf	??_CRC16^0,w,c
  8625  002510  1A07               	xorwf	CRC16@wCRCWord^0,f,c
  8626  002512  5005               	movf	(??_CRC16+1)^0,w,c
  8627  002514  1A08               	xorwf	(CRC16@wCRCWord+1)^0,f,c
  8628  002516                     l4337:
  8629                           
  8630                           ; BSR set to: 0
  8631  002516  0602               	decf	CRC16@wLength^0,f,c
  8632  002518  A0D8               	btfss	status,0,c
  8633  00251A  0603               	decf	(CRC16@wLength+1)^0,f,c
  8634  00251C  2802               	incf	CRC16@wLength^0,w,c
  8635  00251E  E1DF               	bnz	l4329
  8636  002520  2803               	incf	(CRC16@wLength+1)^0,w,c
  8637  002522  A4D8               	btfss	status,2,c
  8638  002524  D7DC               	goto	l4329
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;CRC16.c: 52: };CRC16.c: 53: return wCRCWord;
  8642  002526  C007  F001         	movff	CRC16@wCRCWord,?_CRC16
  8643  00252A  C008  F002         	movff	CRC16@wCRCWord+1,?_CRC16+1
  8644                           
  8645                           ; BSR set to: 0
  8646  00252E  0012               	return		;funcret
  8647  002530                     __end_of_CRC16:
  8648                           	callstack 0
  8649                           
  8650 ;; *************** function _setupAtoD *****************
  8651 ;; Defined at:
  8652 ;;		line 283 in file "main.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;		None
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;		None
  8657 ;; Return value:  Size  Location     Type
  8658 ;;                  1    wreg      void 
  8659 ;; Registers used:
  8660 ;;		wreg, status,2
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 3F/F
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;Total ram usage:        0 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; Hardware stack levels required when called:    1
  8673 ;; This function calls:
  8674 ;;		Nothing
  8675 ;; This function is called by:
  8676 ;;		_main
  8677 ;; This function uses a non-reentrant model
  8678 ;;
  8679                           
  8680                           	psect	text40
  8681  0026CC                     __ptext40:
  8682                           	callstack 0
  8683  0026CC                     _setupAtoD:
  8684                           	callstack 29
  8685                           
  8686                           ;main.c: 287: ANSELAbits.ANSA0=1;
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;incstack = 0
  8690  0026CC  010F               	movlb	15	; () banked
  8691  0026CE  8138               	bsf	56,0,b	;volatile
  8692                           
  8693                           ;main.c: 288: ANSELAbits.ANSA1=1;
  8694  0026D0  8338               	bsf	56,1,b	;volatile
  8695                           
  8696                           ;main.c: 291: TRISAbits.RA0=1;
  8697  0026D2  8092               	bsf	146,0,c	;volatile
  8698                           
  8699                           ;main.c: 292: TRISAbits.RA1=1;
  8700  0026D4  8292               	bsf	146,1,c	;volatile
  8701                           
  8702                           ; BSR set to: 15
  8703                           ;main.c: 295: ADCON1bits.PVCFG=0;
  8704  0026D6  0EF3               	movlw	-13
  8705  0026D8  16C1               	andwf	193,f,c	;volatile
  8706                           
  8707                           ;main.c: 296: ADCON1bits.NVCFG=0;
  8708  0026DA  0EFC               	movlw	-4
  8709  0026DC  16C1               	andwf	193,f,c	;volatile
  8710                           
  8711                           ;main.c: 297: VREFCON0bits.FVRS=0b01;
  8712  0026DE  5142               	movf	66,w,b	;volatile
  8713  0026E0  0BCF               	andlw	-49
  8714  0026E2  0910               	iorlw	16
  8715  0026E4  6F42               	movwf	66,b	;volatile
  8716                           
  8717                           ; BSR set to: 15
  8718                           ;main.c: 298: VREFCON0bits.FVREN=1;
  8719  0026E6  8F42               	bsf	66,7,b	;volatile
  8720                           
  8721                           ;main.c: 301: ADCON0bits.CHS=0;
  8722  0026E8  0E83               	movlw	-125
  8723  0026EA  16C2               	andwf	194,f,c	;volatile
  8724                           
  8725                           ;main.c: 304: ADCON2bits.ACQT=0b010;
  8726  0026EC  50C0               	movf	192,w,c	;volatile
  8727  0026EE  0BC7               	andlw	-57
  8728  0026F0  0910               	iorlw	16
  8729  0026F2  6EC0               	movwf	192,c	;volatile
  8730                           
  8731                           ;main.c: 307: ADCON2bits.ADCS=0b110;
  8732  0026F4  50C0               	movf	192,w,c	;volatile
  8733  0026F6  0BF8               	andlw	-8
  8734  0026F8  0906               	iorlw	6
  8735  0026FA  6EC0               	movwf	192,c	;volatile
  8736                           
  8737                           ; BSR set to: 15
  8738                           ;main.c: 310: ADCON2bits.ADFM = 1;
  8739  0026FC  8EC0               	bsf	192,7,c	;volatile
  8740                           
  8741                           ; BSR set to: 15
  8742                           ;main.c: 313: ADCON0bits.ADON=1;
  8743  0026FE  80C2               	bsf	194,0,c	;volatile
  8744                           
  8745                           ; BSR set to: 15
  8746  002700  0012               	return		;funcret
  8747  002702                     __end_of_setupAtoD:
  8748                           	callstack 0
  8749                           
  8750 ;; *************** function _readTemperature *****************
  8751 ;; Defined at:
  8752 ;;		line 271 in file "main.c"
  8753 ;; Parameters:    Size  Location     Type
  8754 ;;		None
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  result          2    4[COMRAM] unsigned int 
  8757 ;; Return value:  Size  Location     Type
  8758 ;;                  2    0[COMRAM] unsigned int 
  8759 ;; Registers used:
  8760 ;;		wreg, status,2, status,0
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/F
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;Total ram usage:        6 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; Hardware stack levels required when called:    1
  8773 ;; This function calls:
  8774 ;;		Nothing
  8775 ;; This function is called by:
  8776 ;;		_main
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           	psect	text41
  8781  002730                     __ptext41:
  8782                           	callstack 0
  8783  002730                     _readTemperature:
  8784                           	callstack 29
  8785                           
  8786                           ;main.c: 272: ADCON1bits.PVCFG=0;
  8787                           
  8788                           ; BSR set to: 15
  8789                           ;incstack = 0
  8790  002730  0EF3               	movlw	-13
  8791  002732  16C1               	andwf	193,f,c	;volatile
  8792                           
  8793                           ;main.c: 274: ADCON0bits.CHS=1;
  8794  002734  50C2               	movf	194,w,c	;volatile
  8795  002736  0B83               	andlw	-125
  8796  002738  0904               	iorlw	4
  8797  00273A  6EC2               	movwf	194,c	;volatile
  8798                           
  8799                           ;main.c: 275: ADCON0bits.GO_NOT_DONE=1;
  8800  00273C  82C2               	bsf	194,1,c	;volatile
  8801  00273E                     l155:
  8802  00273E  B2C2               	btfsc	194,1,c	;volatile
  8803  002740  D7FE               	goto	l155
  8804                           
  8805                           ;main.c: 278: };main.c: 279: uint16_t result = ADRESH * 256 + ADRESL;
  8806  002742  50C4               	movf	196,w,c	;volatile
  8807  002744  6E04               	movwf	(??_readTemperature+1)^0,c
  8808  002746  6A03               	clrf	??_readTemperature^0,c
  8809  002748  50C3               	movf	195,w,c	;volatile
  8810  00274A  2403               	addwf	??_readTemperature^0,w,c
  8811  00274C  6E05               	movwf	readTemperature@result^0,c
  8812  00274E  0E00               	movlw	0
  8813  002750  2004               	addwfc	(??_readTemperature+1)^0,w,c
  8814  002752  6E06               	movwf	(readTemperature@result+1)^0,c
  8815                           
  8816                           ;main.c: 280: return result;
  8817  002754  C005  F001         	movff	readTemperature@result,?_readTemperature
  8818  002758  C006  F002         	movff	readTemperature@result+1,?_readTemperature+1
  8819  00275C  0012               	return		;funcret
  8820  00275E                     __end_of_readTemperature:
  8821                           	callstack 0
  8822                           
  8823 ;; *************** function _readBattery *****************
  8824 ;; Defined at:
  8825 ;;		line 261 in file "main.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;  result          2    4[COMRAM] unsigned int 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  2    0[COMRAM] unsigned int 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/F
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;Total ram usage:        6 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    1
  8846 ;; This function calls:
  8847 ;;		Nothing
  8848 ;; This function is called by:
  8849 ;;		_main
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text42
  8854  002788                     __ptext42:
  8855                           	callstack 0
  8856  002788                     _readBattery:
  8857                           	callstack 29
  8858                           
  8859                           ;main.c: 262: ADCON1bits.PVCFG=0b10;
  8860                           
  8861                           ;incstack = 0
  8862  002788  50C1               	movf	193,w,c	;volatile
  8863  00278A  0BF3               	andlw	-13
  8864  00278C  0908               	iorlw	8
  8865  00278E  6EC1               	movwf	193,c	;volatile
  8866                           
  8867                           ;main.c: 263: ADCON0bits.GO_NOT_DONE=1;
  8868  002790  82C2               	bsf	194,1,c	;volatile
  8869  002792                     l149:
  8870  002792  B2C2               	btfsc	194,1,c	;volatile
  8871  002794  D7FE               	goto	l149
  8872                           
  8873                           ;main.c: 266: };main.c: 267: uint16_t result = ADRESH * 256 + ADRESL;
  8874  002796  50C4               	movf	196,w,c	;volatile
  8875  002798  6E04               	movwf	(??_readBattery+1)^0,c
  8876  00279A  6A03               	clrf	??_readBattery^0,c
  8877  00279C  50C3               	movf	195,w,c	;volatile
  8878  00279E  2403               	addwf	??_readBattery^0,w,c
  8879  0027A0  6E05               	movwf	readBattery@result^0,c
  8880  0027A2  0E00               	movlw	0
  8881  0027A4  2004               	addwfc	(??_readBattery+1)^0,w,c
  8882  0027A6  6E06               	movwf	(readBattery@result+1)^0,c
  8883                           
  8884                           ;main.c: 268: return result;
  8885  0027A8  C005  F001         	movff	readBattery@result,?_readBattery
  8886  0027AC  C006  F002         	movff	readBattery@result+1,?_readBattery+1
  8887  0027B0  0012               	return		;funcret
  8888  0027B2                     __end_of_readBattery:
  8889                           	callstack 0
  8890                           
  8891 ;; *************** function _disablePeripherals *****************
  8892 ;; Defined at:
  8893 ;;		line 139 in file "main.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;		None
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;		None
  8898 ;; Return value:  Size  Location     Type
  8899 ;;                  1    wreg      void 
  8900 ;; Registers used:
  8901 ;;		wreg, status,2
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 3F/F
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;Total ram usage:        0 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    1
  8914 ;; This function calls:
  8915 ;;		Nothing
  8916 ;; This function is called by:
  8917 ;;		_main
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           	psect	text43
  8922  002586                     __ptext43:
  8923                           	callstack 0
  8924  002586                     _disablePeripherals:
  8925                           	callstack 29
  8926                           
  8927                           ;main.c: 140: ADCON0bits.ADON=0;
  8928                           
  8929                           ;incstack = 0
  8930  002586  90C2               	bcf	194,0,c	;volatile
  8931                           
  8932                           ;main.c: 142: TRISA=0;
  8933  002588  0E00               	movlw	0
  8934  00258A  6E92               	movwf	146,c	;volatile
  8935                           
  8936                           ;main.c: 143: TRISB=0x02;
  8937  00258C  0E02               	movlw	2
  8938  00258E  6E93               	movwf	147,c	;volatile
  8939                           
  8940                           ;main.c: 144: TRISC=0;
  8941  002590  0E00               	movlw	0
  8942  002592  6E94               	movwf	148,c	;volatile
  8943                           
  8944                           ;main.c: 145: TRISD=0;
  8945  002594  0E00               	movlw	0
  8946  002596  6E95               	movwf	149,c	;volatile
  8947                           
  8948                           ;main.c: 146: TRISE=0;
  8949  002598  0E00               	movlw	0
  8950  00259A  6E96               	movwf	150,c	;volatile
  8951                           
  8952                           ;main.c: 147: LATA=0;
  8953  00259C  0E00               	movlw	0
  8954  00259E  6E89               	movwf	137,c	;volatile
  8955                           
  8956                           ;main.c: 148: LATB=0;
  8957  0025A0  0E00               	movlw	0
  8958  0025A2  6E8A               	movwf	138,c	;volatile
  8959                           
  8960                           ;main.c: 149: LATC=0;
  8961  0025A4  0E00               	movlw	0
  8962  0025A6  6E8B               	movwf	139,c	;volatile
  8963                           
  8964                           ;main.c: 150: LATD=0;
  8965  0025A8  0E00               	movlw	0
  8966  0025AA  6E8C               	movwf	140,c	;volatile
  8967                           
  8968                           ;main.c: 151: LATE=0;
  8969  0025AC  0E00               	movlw	0
  8970  0025AE  6E8D               	movwf	141,c	;volatile
  8971                           
  8972                           ;main.c: 152: LATAbits.LA2=1;
  8973  0025B0  8489               	bsf	137,2,c	;volatile
  8974                           
  8975                           ;main.c: 154: TRISDbits.RD1=1;
  8976  0025B2  8295               	bsf	149,1,c	;volatile
  8977                           
  8978                           ;main.c: 155: ANSELDbits.ANSD1=0;
  8979  0025B4  010F               	movlb	15	; () banked
  8980  0025B6  933B               	bcf	59,1,b	;volatile
  8981                           
  8982                           ; BSR set to: 15
  8983                           ;main.c: 156: LATDbits.LATD3=1;
  8984  0025B8  868C               	bsf	140,3,c	;volatile
  8985                           
  8986                           ; BSR set to: 15
  8987                           ;main.c: 157: PMD0bits.UART2MD=1;
  8988  0025BA  8F3F               	bsf	63,7,b	;volatile
  8989                           
  8990                           ; BSR set to: 15
  8991                           ;main.c: 158: PMD0bits.UART1MD=1;
  8992  0025BC  8D3F               	bsf	63,6,b	;volatile
  8993                           
  8994                           ; BSR set to: 15
  8995                           ;main.c: 159: PMD0bits.TMR6MD=1;
  8996  0025BE  8B3F               	bsf	63,5,b	;volatile
  8997                           
  8998                           ; BSR set to: 15
  8999                           ;main.c: 160: PMD0bits.TMR5MD=1;
  9000  0025C0  893F               	bsf	63,4,b	;volatile
  9001                           
  9002                           ; BSR set to: 15
  9003                           ;main.c: 161: PMD0bits.TMR4MD=1;
  9004  0025C2  873F               	bsf	63,3,b	;volatile
  9005                           
  9006                           ; BSR set to: 15
  9007                           ;main.c: 162: PMD0bits.TMR3MD=1;
  9008  0025C4  853F               	bsf	63,2,b	;volatile
  9009                           
  9010                           ; BSR set to: 15
  9011                           ;main.c: 163: PMD0bits.TMR2MD=1;
  9012  0025C6  833F               	bsf	63,1,b	;volatile
  9013                           
  9014                           ; BSR set to: 15
  9015                           ;main.c: 164: PMD0bits.TMR1MD=1;
  9016  0025C8  813F               	bsf	63,0,b	;volatile
  9017                           
  9018                           ; BSR set to: 15
  9019                           ;main.c: 165: PMD0bits.SPI2MD=1;
  9020  0025CA  853F               	bsf	63,2,b	;volatile
  9021                           
  9022                           ; BSR set to: 15
  9023                           ;main.c: 166: PMD0bits.SPI1MD=1;
  9024  0025CC  833F               	bsf	63,1,b	;volatile
  9025                           
  9026                           ; BSR set to: 15
  9027                           ;main.c: 167: PMD1=0xFF;
  9028  0025CE  693E               	setf	62,b	;volatile
  9029                           
  9030                           ; BSR set to: 15
  9031                           ;main.c: 168: PMD2=0xFF;
  9032  0025D0  693D               	setf	61,b	;volatile
  9033                           
  9034                           ; BSR set to: 15
  9035  0025D2  0012               	return		;funcret
  9036  0025D4                     __end_of_disablePeripherals:
  9037                           	callstack 0
  9038                           
  9039 ;; *************** function _configureIO *****************
  9040 ;; Defined at:
  9041 ;;		line 116 in file "main.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;		None
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;		None
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  1    wreg      void 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0, cstack
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;Total ram usage:        0 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    2
  9062 ;; This function calls:
  9063 ;;		_USART2_Start
  9064 ;; This function is called by:
  9065 ;;		_main
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           	psect	text44
  9070  0027B2                     __ptext44:
  9071                           	callstack 0
  9072  0027B2                     _configureIO:
  9073                           	callstack 28
  9074                           
  9075                           ;main.c: 117: PMD0bits.UART2MD=0;
  9076                           
  9077                           ; BSR set to: 15
  9078                           ;incstack = 0
  9079  0027B2  010F               	movlb	15	; () banked
  9080  0027B4  9F3F               	bcf	63,7,b	;volatile
  9081                           
  9082                           ;main.c: 118: PMD0bits.SPI2MD=0;
  9083  0027B6  953F               	bcf	63,2,b	;volatile
  9084                           
  9085                           ;main.c: 119: PMD2bits.ADCMD=0;
  9086  0027B8  913D               	bcf	61,0,b	;volatile
  9087                           
  9088                           ;main.c: 120: ANSELAbits.ANSA2=0;
  9089  0027BA  9538               	bcf	56,2,b	;volatile
  9090                           
  9091                           ;main.c: 121: TRISAbits.RA2=0;
  9092  0027BC  9492               	bcf	146,2,c	;volatile
  9093                           
  9094                           ;main.c: 122: LATAbits.LATA2=0;
  9095  0027BE  9489               	bcf	137,2,c	;volatile
  9096                           
  9097                           ;main.c: 123: ANSELEbits.ANSE1=0;
  9098  0027C0  933C               	bcf	60,1,b	;volatile
  9099                           
  9100                           ;main.c: 124: ANSELEbits.ANSE2=0;
  9101  0027C2  953C               	bcf	60,2,b	;volatile
  9102                           
  9103                           ;main.c: 125: ANSELBbits.ANSB4=0;
  9104  0027C4  9939               	bcf	57,4,b	;volatile
  9105                           
  9106                           ;main.c: 126: TRISEbits.RE1=0;
  9107  0027C6  9296               	bcf	150,1,c	;volatile
  9108                           
  9109                           ;main.c: 127: TRISEbits.RE2=0;
  9110  0027C8  9496               	bcf	150,2,c	;volatile
  9111                           
  9112                           ;main.c: 128: ANSELBbits.ANSB1=0;
  9113  0027CA  9339               	bcf	57,1,b	;volatile
  9114                           
  9115                           ;main.c: 129: TRISBbits.RB1=1;
  9116  0027CC  8293               	bsf	147,1,c	;volatile
  9117                           
  9118                           ; BSR set to: 15
  9119                           ;main.c: 130: USART2_Start(2);
  9120  0027CE  0E02               	movlw	2
  9121  0027D0  EC3D  F012         	call	_USART2_Start
  9122                           
  9123                           ;main.c: 134: INTCON3bits.INT1E=1;
  9124  0027D4  86F0               	bsf	240,3,c	;volatile
  9125                           
  9126                           ;main.c: 135: INTCON3bits.INT1F=0;
  9127  0027D6  90F0               	bcf	240,0,c	;volatile
  9128                           
  9129                           ;main.c: 136: INTCONbits.GIE=1;
  9130  0027D8  8EF2               	bsf	242,7,c	;volatile
  9131  0027DA  0012               	return		;funcret
  9132  0027DC                     __end_of_configureIO:
  9133                           	callstack 0
  9134                           
  9135 ;; *************** function _USART2_Start *****************
  9136 ;; Defined at:
  9137 ;;		line 10 in file "usart2.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;  baudrate        1    wreg     const unsigned char 
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  baudrate        1    0[COMRAM] const unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;                  1    wreg      void 
  9144 ;; Registers used:
  9145 ;;		wreg, status,2, status,0
  9146 ;; Tracked objects:
  9147 ;;		On entry : 3F/F
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;Total ram usage:        1 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    1
  9158 ;; This function calls:
  9159 ;;		Nothing
  9160 ;; This function is called by:
  9161 ;;		_configureIO
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           	psect	text45
  9166  00247A                     __ptext45:
  9167                           	callstack 0
  9168  00247A                     _USART2_Start:
  9169                           	callstack 28
  9170                           
  9171                           ;incstack = 0
  9172                           ;USART2_Start@baudrate stored from wreg
  9173  00247A  6E01               	movwf	USART2_Start@baudrate^0,c
  9174                           
  9175                           ;usart2.c: 13: TXSTA2bits.CSRC = 0;
  9176  00247C  9E72               	bcf	114,7,c	;volatile
  9177                           
  9178                           ;usart2.c: 14: TXSTA2bits.TX9 = 0;
  9179  00247E  9C72               	bcf	114,6,c	;volatile
  9180                           
  9181                           ;usart2.c: 15: TXSTA2bits.TXEN = 1;
  9182  002480  8A72               	bsf	114,5,c	;volatile
  9183                           
  9184                           ;usart2.c: 16: TXSTA2bits.SYNC = 0;
  9185  002482  9872               	bcf	114,4,c	;volatile
  9186                           
  9187                           ;usart2.c: 17: TXSTA2bits.SENDB = 0;
  9188  002484  9672               	bcf	114,3,c	;volatile
  9189                           
  9190                           ;usart2.c: 18: TXSTA2bits.BRGH = 1;
  9191  002486  8472               	bsf	114,2,c	;volatile
  9192                           
  9193                           ;usart2.c: 21: RCSTA2bits.SPEN = 1;
  9194  002488  8E71               	bsf	113,7,c	;volatile
  9195                           
  9196                           ;usart2.c: 22: RCSTA2bits.RX9 = 0;
  9197  00248A  9C71               	bcf	113,6,c	;volatile
  9198                           
  9199                           ;usart2.c: 23: RCSTA2bits.CREN = 1;
  9200  00248C  8871               	bsf	113,4,c	;volatile
  9201                           
  9202                           ;usart2.c: 24: RCSTA2bits.ADDEN = 0;
  9203  00248E  9671               	bcf	113,3,c	;volatile
  9204                           
  9205                           ;usart2.c: 27: BAUDCON2bits.ABDOVF = 0;
  9206  002490  9E70               	bcf	112,7,c	;volatile
  9207                           
  9208                           ;usart2.c: 28: BAUDCON2bits.DTRXP = 0;
  9209  002492  9A70               	bcf	112,5,c	;volatile
  9210                           
  9211                           ;usart2.c: 29: BAUDCON2bits.CKTXP = 0;
  9212  002494  9870               	bcf	112,4,c	;volatile
  9213                           
  9214                           ;usart2.c: 30: BAUDCON2bits.BRG16 = 1;
  9215  002496  8670               	bsf	112,3,c	;volatile
  9216                           
  9217                           ;usart2.c: 31: BAUDCON2bits.WUE = 0;
  9218  002498  9270               	bcf	112,1,c	;volatile
  9219                           
  9220                           ;usart2.c: 32: BAUDCON2bits.ABDEN = 0;
  9221  00249A  9070               	bcf	112,0,c	;volatile
  9222                           
  9223                           ;usart2.c: 34: if(baudrate==1){
  9224  00249C  0401               	decf	USART2_Start@baudrate^0,w,c
  9225  00249E  A4D8               	btfss	status,2,c
  9226  0024A0  D005               	goto	l4317
  9227                           
  9228                           ;usart2.c: 35: SPBRGH2 = 0x03;
  9229  0024A2  0E03               	movlw	3
  9230  0024A4  6E76               	movwf	118,c	;volatile
  9231                           
  9232                           ;usart2.c: 36: SPBRG2 = 0x40;
  9233  0024A6  0E40               	movlw	64
  9234  0024A8  6E75               	movwf	117,c	;volatile
  9235                           
  9236                           ;usart2.c: 38: }
  9237  0024AA  0012               	return	
  9238  0024AC                     l4317:
  9239                           
  9240                           ;usart2.c: 39: else if(baudrate==0){
  9241  0024AC  5001               	movf	USART2_Start@baudrate^0,w,c
  9242  0024AE  A4D8               	btfss	status,2,c
  9243  0024B0  D005               	goto	l4321
  9244                           
  9245                           ;usart2.c: 40: SPBRGH2 = 0x06;
  9246  0024B2  0E06               	movlw	6
  9247  0024B4  6E76               	movwf	118,c	;volatile
  9248                           
  9249                           ;usart2.c: 41: SPBRG2 = 0x82;
  9250  0024B6  0E82               	movlw	130
  9251  0024B8  6E75               	movwf	117,c	;volatile
  9252                           
  9253                           ;usart2.c: 43: }
  9254  0024BA  0012               	return	
  9255  0024BC                     l4321:
  9256                           
  9257                           ;usart2.c: 44: else if(baudrate==3){
  9258  0024BC  0E03               	movlw	3
  9259  0024BE  1801               	xorwf	USART2_Start@baudrate^0,w,c
  9260  0024C0  A4D8               	btfss	status,2,c
  9261  0024C2  D005               	goto	l4325
  9262                           
  9263                           ;usart2.c: 45: SPBRGH2 = 0;
  9264  0024C4  0E00               	movlw	0
  9265  0024C6  6E76               	movwf	118,c	;volatile
  9266                           
  9267                           ;usart2.c: 46: SPBRG2 = 0x8A;
  9268  0024C8  0E8A               	movlw	138
  9269  0024CA  6E75               	movwf	117,c	;volatile
  9270                           
  9271                           ;usart2.c: 48: }
  9272  0024CC  0012               	return	
  9273  0024CE                     l4325:
  9274                           
  9275                           ;usart2.c: 49: else{;usart2.c: 51: SPBRGH2 = 0x01;
  9276  0024CE  0E01               	movlw	1
  9277  0024D0  6E76               	movwf	118,c	;volatile
  9278                           
  9279                           ;usart2.c: 52: SPBRG2 = 0x17;
  9280  0024D2  0E17               	movlw	23
  9281  0024D4  6E75               	movwf	117,c	;volatile
  9282  0024D6  0012               	return		;funcret
  9283  0024D8                     __end_of_USART2_Start:
  9284                           	callstack 0
  9285                           
  9286 ;; *************** function _Isr *****************
  9287 ;; Defined at:
  9288 ;;		line 316 in file "main.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;		None
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;		None
  9293 ;; Return value:  Size  Location     Type
  9294 ;;                  1    wreg      void 
  9295 ;; Registers used:
  9296 ;;		wreg, status,2, status,0
  9297 ;; Tracked objects:
  9298 ;;		On entry : 0/0
  9299 ;;		On exit  : 0/0
  9300 ;;		Unchanged: 0/0
  9301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9306 ;;Total ram usage:        0 bytes
  9307 ;; Hardware stack levels used:    1
  9308 ;; This function calls:
  9309 ;;		Nothing
  9310 ;; This function is called by:
  9311 ;;		Interrupt level 2
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           	psect	intcode
  9316  000008                     __pintcode:
  9317                           	callstack 0
  9318  000008                     _Isr:
  9319                           	callstack 24
  9320                           
  9321                           ;incstack = 0
  9322  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9323                           
  9324                           ;main.c: 317: if(INTCON3bits.INT1F==1){
  9325  00000A  A0F0               	btfss	240,0,c	;volatile
  9326  00000C  D009               	goto	i2l167
  9327                           
  9328                           ;main.c: 318: tips++;
  9329  00000E  0E01               	movlw	1
  9330  000010  0100               	movlb	0	; () banked
  9331  000012  2764               	addwf	_tips& (0+255),f,b	;volatile
  9332  000014  0E00               	movlw	0
  9333  000016  2365               	addwfc	(_tips+1)& (0+255),f,b	;volatile
  9334  000018  2366               	addwfc	(_tips+2)& (0+255),f,b	;volatile
  9335  00001A  2367               	addwfc	(_tips+3)& (0+255),f,b	;volatile
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;main.c: 319: INTCON3bits.INT1F=0;
  9339  00001C  90F0               	bcf	240,0,c	;volatile
  9340                           
  9341                           ; BSR set to: 0
  9342                           ;main.c: 320: LATEbits.LATE2=1;
  9343  00001E  848D               	bsf	141,2,c	;volatile
  9344  000020                     i2l167:
  9345  000020  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9346  000022  0011               	retfie		f
  9347  000024                     __end_of_Isr:
  9348                           	callstack 0
  9349                           
  9350                           	psect	rparam
  9351  0000                     
  9352                           	psect	temp
  9353  00005E                     btemp:
  9354                           	callstack 0
  9355  00005E                     	ds	1
  9356  0000                     int$flags	set	btemp
  9357  0000                     wtemp8	set	btemp+1
  9358  0000                     ttemp5	set	btemp+1
  9359  0000                     ttemp6	set	btemp+4
  9360  0000                     ttemp7	set	btemp+8
  9361                           
  9362                           	psect	idloc
  9363                           
  9364                           ;Config register IDLOC0 @ 0x200000
  9365                           ;	unspecified, using default values
  9366  200000                     	org	2097152
  9367  200000  FF                 	db	255
  9368                           
  9369                           ;Config register IDLOC1 @ 0x200001
  9370                           ;	unspecified, using default values
  9371  200001                     	org	2097153
  9372  200001  FF                 	db	255
  9373                           
  9374                           ;Config register IDLOC2 @ 0x200002
  9375                           ;	unspecified, using default values
  9376  200002                     	org	2097154
  9377  200002  FF                 	db	255
  9378                           
  9379                           ;Config register IDLOC3 @ 0x200003
  9380                           ;	unspecified, using default values
  9381  200003                     	org	2097155
  9382  200003  FF                 	db	255
  9383                           
  9384                           ;Config register IDLOC4 @ 0x200004
  9385                           ;	unspecified, using default values
  9386  200004                     	org	2097156
  9387  200004  FF                 	db	255
  9388                           
  9389                           ;Config register IDLOC5 @ 0x200005
  9390                           ;	unspecified, using default values
  9391  200005                     	org	2097157
  9392  200005  FF                 	db	255
  9393                           
  9394                           ;Config register IDLOC6 @ 0x200006
  9395                           ;	unspecified, using default values
  9396  200006                     	org	2097158
  9397  200006  FF                 	db	255
  9398                           
  9399                           ;Config register IDLOC7 @ 0x200007
  9400                           ;	unspecified, using default values
  9401  200007                     	org	2097159
  9402  200007  FF                 	db	255
  9403                           
  9404                           	psect	config
  9405                           
  9406                           ; Padding undefined space
  9407  300000                     	org	3145728
  9408  300000  FF                 	db	255
  9409                           
  9410                           ;Config register CONFIG1H @ 0x300001
  9411                           ;	Oscillator Selection bits
  9412                           ;	FOSC = HSMP, HS oscillator (medium power 4-16 MHz)
  9413                           ;	4X PLL Enable
  9414                           ;	PLLCFG = ON, Oscillator multiplied by 4
  9415                           ;	Primary clock enable bit
  9416                           ;	PRICLKEN = ON, Primary clock is always enabled
  9417                           ;	Fail-Safe Clock Monitor Enable bit
  9418                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  9419                           ;	Internal/External Oscillator Switchover bit
  9420                           ;	IESO = OFF, Oscillator Switchover mode disabled
  9421  300001                     	org	3145729
  9422  300001  33                 	db	51
  9423                           
  9424                           ;Config register CONFIG2L @ 0x300002
  9425                           ;	Power-up Timer Enable bit
  9426                           ;	PWRTEN = ON, Power up timer enabled
  9427                           ;	Brown-out Reset Enable bits
  9428                           ;	BOREN = NOSLP, Brown-out Reset enabled in hardware only and disabled in Sleep mode (SB
      +                          OREN is disabled)
  9429                           ;	Brown Out Reset Voltage bits
  9430                           ;	BORV = 190, VBOR set to 1.90 V nominal
  9431  300002                     	org	3145730
  9432  300002  1C                 	db	28
  9433                           
  9434                           ;Config register CONFIG2H @ 0x300003
  9435                           ;	Watchdog Timer Enable bits
  9436                           ;	WDTEN = ON, WDT is always enabled. SWDTEN bit has no effect
  9437                           ;	Watchdog Timer Postscale Select bits
  9438                           ;	WDTPS = 32768, 1:32768
  9439  300003                     	org	3145731
  9440  300003  3F                 	db	63
  9441                           
  9442                           ; Padding undefined space
  9443  300004                     	org	3145732
  9444  300004  FF                 	db	255
  9445                           
  9446                           ;Config register CONFIG3H @ 0x300005
  9447                           ;	CCP2 MUX bit
  9448                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  9449                           ;	PORTB A/D Enable bit
  9450                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  9451                           ;	P3A/CCP3 Mux bit
  9452                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  9453                           ;	HFINTOSC Fast Start-up
  9454                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  9455                           ;	Timer3 Clock input mux bit
  9456                           ;	T3CMX = PORTC0, T3CKI is on RC0
  9457                           ;	ECCP2 B output mux bit
  9458                           ;	P2BMX = PORTD2, P2B is on RD2
  9459                           ;	MCLR Pin Enable bit
  9460                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  9461  300005                     	org	3145733
  9462  300005  BD                 	db	189
  9463                           
  9464                           ;Config register CONFIG4L @ 0x300006
  9465                           ;	Stack Full/Underflow Reset Enable bit
  9466                           ;	STVREN = ON, Stack full/underflow will cause Reset
  9467                           ;	Single-Supply ICSP Enable bit
  9468                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  9469                           ;	Extended Instruction Set Enable bit
  9470                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  9471                           ;	Background Debug
  9472                           ;	DEBUG = 0x1, unprogrammed default
  9473  300006                     	org	3145734
  9474  300006  85                 	db	133
  9475                           
  9476                           ; Padding undefined space
  9477  300007                     	org	3145735
  9478  300007  FF                 	db	255
  9479                           
  9480                           ;Config register CONFIG5L @ 0x300008
  9481                           ;	Code Protection Block 0
  9482                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  9483                           ;	Code Protection Block 1
  9484                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  9485                           ;	Code Protection Block 2
  9486                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  9487                           ;	Code Protection Block 3
  9488                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  9489  300008                     	org	3145736
  9490  300008  0F                 	db	15
  9491                           
  9492                           ;Config register CONFIG5H @ 0x300009
  9493                           ;	Boot Block Code Protection bit
  9494                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  9495                           ;	Data EEPROM Code Protection bit
  9496                           ;	CPD = OFF, Data EEPROM not code-protected
  9497  300009                     	org	3145737
  9498  300009  C0                 	db	192
  9499                           
  9500                           ;Config register CONFIG6L @ 0x30000A
  9501                           ;	Write Protection Block 0
  9502                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  9503                           ;	Write Protection Block 1
  9504                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  9505                           ;	Write Protection Block 2
  9506                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  9507                           ;	Write Protection Block 3
  9508                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  9509  30000A                     	org	3145738
  9510  30000A  0F                 	db	15
  9511                           
  9512                           ;Config register CONFIG6H @ 0x30000B
  9513                           ;	Configuration Register Write Protection bit
  9514                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  9515                           ;	Boot Block Write Protection bit
  9516                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  9517                           ;	Data EEPROM Write Protection bit
  9518                           ;	WRTD = OFF, Data EEPROM not write-protected
  9519  30000B                     	org	3145739
  9520  30000B  E0                 	db	224
  9521                           
  9522                           ;Config register CONFIG7L @ 0x30000C
  9523                           ;	Table Read Protection Block 0
  9524                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  9525                           ;	Table Read Protection Block 1
  9526                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  9527                           ;	Table Read Protection Block 2
  9528                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  9529                           ;	Table Read Protection Block 3
  9530                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  9531  30000C                     	org	3145740
  9532  30000C  0F                 	db	15
  9533                           
  9534                           ;Config register CONFIG7H @ 0x30000D
  9535                           ;	Boot Block Table Read Protection bit
  9536                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  9537  30000D                     	org	3145741
  9538  30000D  40                 	db	64
  9539                           tosu	equ	0xFFF
  9540                           tosh	equ	0xFFE
  9541                           tosl	equ	0xFFD
  9542                           stkptr	equ	0xFFC
  9543                           pclatu	equ	0xFFB
  9544                           pclath	equ	0xFFA
  9545                           pcl	equ	0xFF9
  9546                           tblptru	equ	0xFF8
  9547                           tblptrh	equ	0xFF7
  9548                           tblptrl	equ	0xFF6
  9549                           tablat	equ	0xFF5
  9550                           prodh	equ	0xFF4
  9551                           prodl	equ	0xFF3
  9552                           indf0	equ	0xFEF
  9553                           postinc0	equ	0xFEE
  9554                           postdec0	equ	0xFED
  9555                           preinc0	equ	0xFEC
  9556                           plusw0	equ	0xFEB
  9557                           fsr0h	equ	0xFEA
  9558                           fsr0l	equ	0xFE9
  9559                           wreg	equ	0xFE8
  9560                           indf1	equ	0xFE7
  9561                           postinc1	equ	0xFE6
  9562                           postdec1	equ	0xFE5
  9563                           preinc1	equ	0xFE4
  9564                           plusw1	equ	0xFE3
  9565                           fsr1h	equ	0xFE2
  9566                           fsr1l	equ	0xFE1
  9567                           bsr	equ	0xFE0
  9568                           indf2	equ	0xFDF
  9569                           postinc2	equ	0xFDE
  9570                           postdec2	equ	0xFDD
  9571                           preinc2	equ	0xFDC
  9572                           plusw2	equ	0xFDB
  9573                           fsr2h	equ	0xFDA
  9574                           fsr2l	equ	0xFD9
  9575                           status	equ	0xFD8

Data Sizes:
    Strings     306
    Constant    688
    Data        8
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     93      93
    BANK0           160     33     103
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_18(CODE[12]), STR_17(CODE[10]), STR_16(CODE[16]), STR_15(CODE[21]), 
		 -> STR_14(CODE[36]), STR_13(CODE[16]), STR_12(CODE[13]), STR_11(CODE[8]), 
		 -> STR_10(CODE[10]), STR_9(CODE[34]), STR_8(CODE[10]), STR_7(CODE[18]), 
		 -> STR_6(CODE[11]), STR_5(CODE[16]), STR_4(CODE[20]), STR_3(CODE[10]), 
		 -> STR_2(CODE[10]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    CRC16@nData	PTR const unsigned char  size(1) Largest target is 50
		 -> txData(BANK0[50]), 

    LoRaTXData@data	PTR unsigned char  size(1) Largest target is 50
		 -> txData(BANK0[50]), 


Critical Paths under _main in COMRAM

    _main->_transmitData
    _transmitData->_LoRaStart
    _LoRaTXData->_LoRaTXMode
    _LoRaTXMode->_printf
    _LoRaStart->_printf
    _printf->___flsub
    _scale->___flmul
    ___awdiv->___awmod
    _fround->___flmul
    ___lbdiv->___lbmod
    ___llmod->___lldiv
    ___flsub->___fladd
    ___fladd->_fround
    _LoRaSetFrequency->___fltol
    ___fltol->_scale
    ___flmul->___awdiv
    _LoRaOptimalLoad->_LoRaSleepMode
    _LoRaOptimalLoad->_LoRaStandbyMode
    _LoRaOptimalLoad->_setLoRaMode
    _setLoRaMode->_writeOpModeRegister
    _LoRaStandbyMode->_writeOpModeRegister
    _LoRaSleepMode->_writeOpModeRegister
    _writeOpModeRegister->_SPI2WriteByte
    _readOpModeRegister->_SPI2ReadByte
    _LoRaGetIRQFlags->_SPI2ReadByte
    _LoRaGetFrequency->___fldiv
    ___fldiv->___xxtofl
    _LoRaClearIRQFlags->_SPI2WriteByte
    _configureIO->_USART2_Start

Critical Paths under _Isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_transmitData
    _transmitData->_printf
    _LoRaTXData->_printf
    _LoRaTXMode->_printf
    _LoRaStart->_printf

Critical Paths under _Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  201439
                                             31 BANK0      2     2      0
                        _configureIO
                 _disablePeripherals
                             _printf
                        _readBattery
                    _readTemperature
                          _setupAtoD
                       _transmitData
 ---------------------------------------------------------------------------------
 (1) _transmitData                                         7     7      0  170608
                                             92 COMRAM     1     1      0
                                             25 BANK0      6     6      0
                              _CRC16
                  _LoRaClearIRQFlags
                   _LoRaGetFrequency
                    _LoRaGetIRQFlags
                      _LoRaSleepMode
                          _LoRaStart
                         _LoRaTXData
                             _printf
 ---------------------------------------------------------------------------------
 (2) _LoRaTXData                                           3     1      2   72627
                                             87 COMRAM     3     1      2
                    _LoRaStandbyMode
                         _LoRaTXMode
                      _SPI2WriteByte
                             _printf
 ---------------------------------------------------------------------------------
 (3) _LoRaTXMode                                           1     1      0   34406
                                             86 COMRAM     1     1      0
                             _printf
                 _readOpModeRegister
                _writeOpModeRegister
 ---------------------------------------------------------------------------------
 (2) _LoRaStart                                            6     1      5   57360
                                             86 COMRAM     6     1      5
                    _LoRaOptimalLoad
                   _LoRaSetFrequency
                             _printf
                        _setLoRaMode
 ---------------------------------------------------------------------------------
 (2) _printf                                              41    35      6   30719
                                             78 COMRAM     8     2      6
                                              0 BANK0     25    25      0
                   _LoRaGetFrequency (ARG)
                            ___awdiv
                            ___fladd
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     5      4    6888
                                             39 COMRAM     9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1208
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1364
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              15    11      4    4895
                                             39 COMRAM    15    11      4
                            ___flmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     387
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     390
                                              4 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         17     9      8     455
                                              0 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          14     6      8     455
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     770
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    2737
                                             70 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2414
                                             54 COMRAM    16     8      8
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4     121
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     638
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     646
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _LoRaSetFrequency                                    11     7      4    8193
                                             58 COMRAM    11     7      4
                      _SPI2WriteByte
                            ___flmul
                            ___fltol
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     533
                                             48 COMRAM    10     6      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    3873
                                             14 COMRAM    25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _LoRaOptimalLoad                                      2     2      0   14588
                                              5 COMRAM     2     2      0
                      _LoRaSleepMode
                    _LoRaStandbyMode
                      _SPI2WriteByte
                        _setLoRaMode
 ---------------------------------------------------------------------------------
 (3) _setLoRaMode                                          1     1      0    3664
                                              4 COMRAM     1     1      0
                 _readOpModeRegister
                _writeOpModeRegister
 ---------------------------------------------------------------------------------
 (3) _LoRaStandbyMode                                      1     1      0    3687
                                              4 COMRAM     1     1      0
                 _readOpModeRegister
                _writeOpModeRegister
 ---------------------------------------------------------------------------------
 (4) _LoRaSleepMode                                        1     1      0    3664
                                              4 COMRAM     1     1      0
                 _readOpModeRegister
                _writeOpModeRegister
 ---------------------------------------------------------------------------------
 (4) _writeOpModeRegister                                  1     1      0    3573
                                              3 COMRAM     1     1      0
                      _SPI2WriteByte
 ---------------------------------------------------------------------------------
 (4) _readOpModeRegister                                   0     0      0      45
                       _SPI2ReadByte
 ---------------------------------------------------------------------------------
 (2) _LoRaGetIRQFlags                                      1     1      0      68
                                              2 COMRAM     1     1      0
                       _SPI2ReadByte
 ---------------------------------------------------------------------------------
 (2) _LoRaGetFrequency                                    27    23      4    2033
                                             39 COMRAM    27    23      4
                       _SPI2ReadByte
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     474
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1399
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) _SPI2ReadByte                                         2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LoRaClearIRQFlags                                    0     0      0    3551
                      _SPI2WriteByte
 ---------------------------------------------------------------------------------
 (3) _SPI2WriteByte                                        3     2      1    3551
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _CRC16                                                8     5      3     290
                                              0 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 (1) _setupAtoD                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readTemperature                                      6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _readBattery                                          6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _disablePeripherals                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureIO                                          0     0      0      66
                       _USART2_Start
 ---------------------------------------------------------------------------------
 (2) _USART2_Start                                         1     1      0      66
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Isr                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configureIO
     _USART2_Start
   _disablePeripherals
   _printf
     _LoRaGetFrequency (ARG)
       _SPI2ReadByte
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
     ___awdiv (ARG)
       ___awmod (ARG)
     ___fladd (ARG)
       _fround (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___fleq (ARG)
     ___flge (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___flneg (ARG)
     ___flsub (ARG)
       ___fladd
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___xxtofl (ARG)
     ___fltol (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___wmul (ARG)
     ___xxtofl (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _putch (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
   _readBattery
   _readTemperature
   _setupAtoD
   _transmitData
     _CRC16
     _LoRaClearIRQFlags
       _SPI2WriteByte
     _LoRaGetFrequency
       _SPI2ReadByte
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
     _LoRaGetIRQFlags
       _SPI2ReadByte
     _LoRaSleepMode
       _readOpModeRegister
         _SPI2ReadByte
       _writeOpModeRegister
         _SPI2WriteByte
     _LoRaStart
       _LoRaOptimalLoad
         _LoRaSleepMode
           _readOpModeRegister
             _SPI2ReadByte
           _writeOpModeRegister
             _SPI2WriteByte
         _LoRaStandbyMode
           _readOpModeRegister
             _SPI2ReadByte
           _writeOpModeRegister
             _SPI2WriteByte
         _SPI2WriteByte
         _setLoRaMode
           _readOpModeRegister
             _SPI2ReadByte
           _writeOpModeRegister
             _SPI2WriteByte
       _LoRaSetFrequency
         _SPI2WriteByte
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___fltol
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
       _printf
         _LoRaGetFrequency (ARG)
           _SPI2ReadByte
           ___fldiv
             ___xxtofl (ARG)
           ___xxtofl
         ___awdiv (ARG)
           ___awmod (ARG)
         ___fladd (ARG)
           _fround (ARG)
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___fleq (ARG)
         ___flge (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___flneg (ARG)
         ___flsub (ARG)
           ___fladd
             _fround (ARG)
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
           ___xxtofl (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
         _putch (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
       _setLoRaMode
         _readOpModeRegister
           _SPI2ReadByte
         _writeOpModeRegister
           _SPI2WriteByte
     _LoRaTXData
       _LoRaStandbyMode
         _readOpModeRegister
           _SPI2ReadByte
         _writeOpModeRegister
           _SPI2WriteByte
       _LoRaTXMode
         _printf
           _LoRaGetFrequency (ARG)
             _SPI2ReadByte
             ___fldiv
               ___xxtofl (ARG)
             ___xxtofl
           ___awdiv (ARG)
             ___awmod (ARG)
           ___fladd (ARG)
             _fround (ARG)
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
           ___fleq (ARG)
           ___flge (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___flneg (ARG)
           ___flsub (ARG)
             ___fladd
               _fround (ARG)
                 ___flmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___lbdiv
                   ___lbmod (ARG)
                 ___lbmod
             ___xxtofl (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
           ___lldiv (ARG)
           ___llmod (ARG)
             ___lldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
           __div_to_l_ (ARG)
           __tdiv_to_l_ (ARG)
           _fround (ARG)
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
           _putch (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
         _readOpModeRegister
           _SPI2ReadByte
         _writeOpModeRegister
           _SPI2WriteByte
       _SPI2WriteByte
       _printf
         _LoRaGetFrequency (ARG)
           _SPI2ReadByte
           ___fldiv
             ___xxtofl (ARG)
           ___xxtofl
         ___awdiv (ARG)
           ___awmod (ARG)
         ___fladd (ARG)
           _fround (ARG)
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___fleq (ARG)
         ___flge (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___flneg (ARG)
         ___flsub (ARG)
           ___fladd
             _fround (ARG)
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
           ___xxtofl (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
         _putch (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
     _printf
       _LoRaGetFrequency (ARG)
         _SPI2ReadByte
         ___fldiv
           ___xxtofl (ARG)
         ___xxtofl
       ___awdiv (ARG)
         ___awmod (ARG)
       ___fladd (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___fleq (ARG)
       ___flge (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___flneg (ARG)
       ___flsub (ARG)
         ___fladd
           _fround (ARG)
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _putch (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)

 _Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      67       5       64.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5D      5D       1       98.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C4      12        0.0%
DATA                 0      0      C4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Sep 18 16:09:10 2021

                ?_configureIO 0001                  ___fldiv@aexp 0027                  ___fldiv@bexp 0026  
                ___fldiv@sign 001F                  ___awdiv@sign 000C           ___wmul@multiplicand 0003  
                         l120 1D10                           l240 2632                           l155 273E  
                         l243 2644                           l252 283C                           l149 2792  
                         l501 231E                           l249 2832                           l434 04FC  
                         l339 2898                           l443 06D2                           l752 1F48  
                         l840 1C72                           l916 2468                           l839 1C4A  
                         _Isr 0008                  ___awmod@sign 0006                           wreg 000FE8  
                  _TXSTA2bits 000F72                  ___flmul@aexp 001C                  ___flmul@bexp 0021  
                ___flmul@sign 001B                  ___flmul@temp 0026                  ___flmul@prod 0022  
                        ?_Isr 0001              ?_LoRaGetIRQFlags 0001                  ___fltol@exp1 003A  
                        l1110 0D38                          l1120 0F26                          l1041 11F8  
                        l1025 1126                          l1050 125E                          l1026 1104  
                        l1051 125A                          l1151 19A6                          l1127 0FB0  
                        l1119 0F2A                          l1080 1462                          l1091 14D0  
                        l3011 1010                          l1092 14CC                          l1158 1A24  
                        l3015 1014                          l3113 116C                          l3105 114A  
                        l3115 1170                          l3123 1182                          l3035 1058  
                        l3213 0CE4                          l3141 121C                          l3133 11E8  
                        l4013 074C                          l4005 0714                          l3231 0D24  
                        l3215 0CE8                          l3151 1232                          l3047 107C  
                        l3039 105C                          l4031 079E                          l3313 0F8C  
                        l3241 0D56                          l3233 0D28                          l3217 0CF8  
                        l3091 1116                          l3403 23FC                          l4035 07B0  
                        l4019 0750                          l4301 156E                          l4205 135C  
                        l3325 0FCE                          l3309 0F6E                          l3157 123C  
                        l3077 10B8                          l3421 26AA                          l3501 0AD4  
                        l4045 089C                          l4037 07BA                          l4029 0788  
                        l4303 1570                          l4231 13C2                          l4223 13AA  
                        l3191 12D4                          l3351 2264                          l3407 240A  
                        l4039 0834                          l4047 08B2                          l4321 24BC  
                        l4241 1412                          l4217 1394                          l4209 1360  
                        l3185 12CA                          l3177 12A4                          l3089 1112  
                        l3601 1E2C                          l3417 26A4                          l3433 26C8  
                        l3353 226C                          l3345 224E                          l4049 08B8  
                        l3283 0ED2                          l3371 22A4                          l3363 228C  
                        l3339 223E                          l3515 0C8E                          l4325 24CE  
                        l4317 24AC                          l4261 1478                          l3189 12D2  
                        l3621 1E78                          l3525 1BF6                          l3429 26C0  
                        l3509 0BEE                          l4413 255A                          l4255 1460  
                        l3703 1F80                          l3711 271E                          l3631 1E90  
                        l3447 2780                          l3439 2768                          l3471 16C0  
                        l3367 2296                          l3391 23D2                          l3383 23B8  
                        l4329 24DE                          l4337 2516                          l4249 143A  
                        l4185 131C                          l3801 1A56                          l3289 0EF0  
                        l3721 206E                          l3633 1E9C                          l3625 1E88  
                        l3609 1E5C                          l3561 1C8C                          l3393 23DA  
                        l4417 256E                          l4521 1B1C                          l4291 1538  
                        l4267 1496                          l3571 1CA4                          l3459 2890  
                        l3387 23C4                          l3491 0A0A                          l4189 1320  
                        l3741 20C8                          l3581 1DDE                          l3573 1CB0  
                        l3565 1C9C                          l3477 1794                          l4613 1CCA  
                        l4295 1562                          l4287 1514                          l3647 22D0  
                        l3399 23F2                          l3831 0052                          l3823 0032  
                        l4551 1B80                          l3817 1A96                          l3737 20B8  
                        l3681 2226                          l3673 21D4                          l3649 22DC  
                        l3497 0AAA                          l3913 03E6                          l3833 0056  
                        l3841 00A8                          l3755 20F8                          l3747 20D0  
                        l3659 2310                          l3771 245A                          l3763 2426  
                        l3931 0434                          l3835 005A                          l3827 0044  
                        l3781 19B6                          l3749 20DC                          l3677 2208  
                        l3693 1F1C                          l3765 2432                          l3909 036E  
                        l3829 004E                          l4485 1AB8                          l4645 1DB8  
                        l3791 19E6                          l3943 04D8                          l3919 03EA  
                        l3871 0186                          l3855 00FE                          l3839 0060  
                _transmitData 1AA8                          l3793 1A0C                          l3697 1F32  
                        l3689 1EE8                          l3937 04BE                          l3787 19D4  
                        l3971 0668                          l3955 0514                          l3939 04CA  
                        l3883 0232                          l3789 19DA                          l3981 069C  
                        l3965 064E                          l3949 0500                          l3973 0672  
                        l3799 1A4A                          l3967 065A                          l3959 0576  
                        l3895 02D8                          l3879 0204                          l3995 06F0  
                        l3899 0306                          l3999 0710                          STR_1 FF4E  
                        STR_2 FFD9                          STR_3 FFCF                          STR_4 FF28  
                        STR_5 FF91                          STR_6 FFBA                          STR_7 FF3C  
                        STR_8 FFE3                          STR_9 FEF1                          u2210 112E  
                        u3100 2222                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          u2160 10DA                          u3040 1EA2  
                        _LATD 000F8C                          _LATE 000F8D                          u2170 10EA  
                        u3220 20E2                          u2420 12B0                          u2340 1240  
                        u2180 10EC                          u3060 22E0                          u4020 1BA6  
                        u2360 1254                          u3330 1A60                          u2610 0F7C  
                        u2530 0D44                          u3170 205C                          u3250 2436  
                        u4107 1D8E                          u2620 0F9A                          u3180 208C  
                        u3500 0420                          u4117 1DAA                          u4127 1B94  
                        u3440 027E                          u3185 2082                          u4137 1BB0  
                        u4057 1CDA                          u2570 0F20                          u2730 23DE  
                        u3530 04E6                          u4147 2152                          u4067 1D1E  
                printf@tmpval 00AA                          u2900 1BE4                          u3540 04F6  
                        u4157 2164                          u4077 1D3A                          u2670 2270  
                        u3470 02D8                          u4167 17F6                          u2911 1C06  
                        u4087 1D56                          u4177 2622                          u4097 1D72  
                        u2770 26AE                          u4187 263A                          u3900 1546  
                        u4197 264A                          _PMD1 000F3E                          u3670 08CA  
                        _PMD2 000F3D                          u3850 14C6                          u2970 1CB6  
                        u2891 1BDA                          u2980 1DCC                          u3890 1522  
     LoRaStandbyMode@regValue 0005                          _batt 006A                          _main 1CC8  
                        _temp 0068                          _tips 0064                          fsr1h 000FE2  
                        fsr2h 000FDA                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 005E  
                        prodh 000FF4                          prodl 000FF3                          start 0024  
             ___fldiv@new_exp 0020          LoRaTXData@dataLength 0059                  ___param_bank 000000  
           transmitData@i_881 00BA                  ?_readBattery 0001                         ??_Isr 0001  
           transmitData@flags 00B7                  _BAUDCON2bits 000F70                 ___fltol@sign1 0039  
             __end_of___fladd 12F0                         ?_main 0001               __end_of___fldiv 1578  
             __end_of___awdiv 22AE               __end_of___lbdiv 26CC               __end_of___flneg 2730  
                       STR_10 FFED                         STR_11 FFF7                         STR_12 FFA1  
                       STR_13 FF81              _LoRaSetFrequency 2330                         STR_14 FECD  
                       STR_15 FF13                         STR_16 FF71                         _CRC16 24D8  
                       STR_17 FFC5                         STR_18 FFAE                    _LoRaTXData 2530  
                       STR_19 FF60               __end_of___awmod 2414               __end_of___lbmod 2788  
             __end_of___flmul 0FE4               __end_of___flsub 261A               __end_of___fltol 210A  
             __end_of___lldiv 2330               ___awdiv@divisor 0009           SPI2ReadByte@address 0001  
             __end_of___llmod 247A                    _LoRaTXMode 27DC                         i2l167 0020  
             ___awdiv@counter 000B                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRMT2 007B91                         _TRISD 000F95  
                       _TRISE 000F96               __end_of_dpowers FECD                         _scale 08E8  
                       _putch 288E                         tablat 000FF5                         ttemp5 005F  
                       ttemp6 0062                         ttemp7 0066                         status 000FD8  
                       wtemp8 005F               ___lbdiv@divisor 0005               ___lbdiv@counter 0007  
             _LoRaOptimalLoad 17E2               __initialization 2658                  __end_of_main 1DC0  
          LoRaTXMode@regValue 0057                  ?_setLoRaMode 0001         LoRaSleepMode@regValue 0005  
                      ??_main 00BD                        ?_CRC16 0001               _LoRaStandbyMode 284C  
               __activetblptr 000002          __size_of__tdiv_to_l_ 00FE               _readTemperature 2730  
          _readOpModeRegister 28CC            __size_of_LoRaStart 0096              ___llmod@dividend 000E  
                      ?_scale 0028                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 0007                        ?_putch 0001           LoRaGetFrequency@mid 0041  
         LoRaGetFrequency@lsb 0042           LoRaGetFrequency@msb 0040          SPI2ReadByte@dataByte 0002  
         ?_readOpModeRegister 0001             _LoRaClearIRQFlags 28B8                        _SPBRG2 000F75  
           ?_LoRaGetFrequency 0028                        _SSP2IF 007D27                        _TXREG2 000F73  
            __end_of___xxtofl 1AA8         readTemperature@result 0005  __size_of_writeOpModeRegister 000E  
          ?_LoRaClearIRQFlags 0001            ??_LoRaGetFrequency 002C   __size_of_disablePeripherals 004E  
            __end_of__powers_ FE51                        ___flge 1EB4                        ___fleq 21A0  
                   ??___fladd 003F                        ___wmul 2802                     ??___fldiv 0017  
                   ??___awdiv 000B                     ??___lbdiv 0006                     ??___flneg 0005  
         ??_LoRaClearIRQFlags 0004                     ??___awmod 0005                     ??___lbmod 0002  
                   ??___flmul 0017                     ??___flsub 004F                     ??___fltol 0035  
                   ??___lldiv 0009                     ??___llmod 0016          __size_of_configureIO 002A  
       __end_of_SPI2WriteByte 2658                        _fround 1578                        clear_0 267E  
        ??_readOpModeRegister 0003              ___awdiv@quotient 000D               ___awmod@divisor 0003  
                      _txData 006C               ___awmod@counter 0005                        _printf 0028  
                 ?_LoRaTXData 0058             SPI2WriteByte@data 0001                   ?_LoRaTXMode 0001  
           readBattery@result 0005                  __mediumconst FC1C                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8     __end_of_LoRaClearIRQFlags 28C4  
            ___lbdiv@dividend 0006       __end_of_LoRaOptimalLoad 1968                    ___flge@ff1 0001  
                  ___flge@ff2 0005                  ___xxtofl@arg 000B                  ___xxtofl@exp 000A  
                ___xxtofl@val 0001                    ___fleq@ff1 0001                    ___fleq@ff2 0005  
             ___lbmod@divisor 0001                    __accesstop 0060       __end_of__initialization 2684  
             ___lbmod@counter 0003                    ___flneg@f1 0001                 __end_of_CRC16 2530  
               ___rparam_used 000001                    ___fltol@f1 0031                __pcstackCOMRAM 0001  
           __end_of_LoRaStart 21A0                  __pidataBANK0 28C4       __end_of_LoRaStandbyMode 2866  
               __end_of_scale 0CB8          __size_of_readBattery 002A                 __end_of_putch 289E  
     __end_of_readTemperature 275E              ___lbdiv@quotient 0008                       ??_CRC16 0004  
         transmitData@calcCRC 00B8                    __div_to_l_ 1DC0         __end_of_LoRaSleepMode 288E  
             __div_to_l_@exp1 000E               __div_to_l_@cntr 000D                       ??_scale 002C  
             __div_to_l_@quot 0009                       ??_putch 0001                    __pbssBANK0 0060  
    __end_of_LoRaSetFrequency 23A4           __size_of_LoRaTXData 0056                 __div_to_l_@f1 0001  
               __div_to_l_@f2 0005           __size_of_LoRaTXMode 0026                LoRaTXData@data 0058  
                     ?___flge 0001                       ?___fleq 0001                       ?___wmul 0001  
               ?_SPI2ReadByte 0001                       ?_fround 0028                       ?_printf 004F  
        __size_of_setLoRaMode 0014                    CRC16@nData 0001            __size_of_setupAtoD 0036  
                  CRC16@nTemp 0006                     ?___xxtofl 0001                       _SPBRGH2 000F76  
                     _SSP2BUF 000F6F    __size_of_LoRaClearIRQFlags 000C              ?_LoRaOptimalLoad 0001  
    __size_of_LoRaGetIRQFlags 000C             __end_of__npowers_ FE85                       __Hparam 0000  
                  _scale$2400 002C                       __Lparam 0000                ??_SPI2ReadByte 0001  
             __size_of___flge 00D0               __size_of___fleq 008A                       ___fladd 0FE4  
                     ___fldiv 12F0                       ___awdiv 222A                       ___lbdiv 2692  
                     ___flneg 2702                       ___awmod 23A4              ?_LoRaStandbyMode 0001  
                     ___lbmod 275E                       ___flmul 0CB8                       ___flsub 25D4  
                     ___fltol 2050                       ___lldiv 22AE               __size_of___wmul 0026  
                     ___llmod 2414                       _address 00BF                       __pcinit 2658  
             __size_of_fround 026A              ?_readTemperature 0001                       __ramtop 1000  
                     __ptext0 1CC8                       __ptext1 1AA8                       __ptext2 2530  
                     __ptext3 27DC                       __ptext4 210A                       __ptext5 0028  
                     __ptext6 08E8                       __ptext7 23A4                       __ptext8 222A  
                     __ptext9 288E               __size_of_printf 08C0           _writeOpModeRegister 289E  
           __end_of_hexpowers FEA5                   ?__div_to_l_ 0001                  __size_of_Isr 001C  
                     _dpowers FEA5                    ??___xxtofl 0005              ___awmod@dividend 0001  
               transmitData@i 00BC                 transmitData@j 00BB          end_of_initialization 2684  
                CRC16@wLength 0002                 __Lmediumconst FC1C          ?_writeOpModeRegister 0001  
             ___lldiv@divisor 0005             __end_of_setupAtoD 2702               ___lldiv@counter 000D  
                     printf@c 00B6                       printf@f 004F                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
               ?_USART2_Start 0001                __tdiv_to_l_@f1 0001                __tdiv_to_l_@f2 0005  
   __size_of_LoRaGetFrequency 00CC                 ??__tdiv_to_l_ 0009                  ??_LoRaTXData 005A  
                ??_LoRaTXMode 0057                   ___fladd@grs 0046              ___lbmod@dividend 0002  
               ___xxtofl@sign 0009                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISDbits 000F95                     _TRISEbits 000F96                   ___fldiv@grs 0022  
                 ___fldiv@rem 001B                   ___lbmod@rem 0004                   ___flmul@grs 001D  
       ??_writeOpModeRegister 0004    __end_of_disablePeripherals 25D4            __end_of_LoRaTXData 2586  
         __size_of__div_to_l_ 00F4            __end_of_LoRaTXMode 2802                 ??_configureIO 0002  
              ??_USART2_Start 0001                __end_of___flge 1F84                __end_of___fleq 222A  
           ??_LoRaGetIRQFlags 0003       LoRaOptimalLoad@syncWord 0007                __end_of___wmul 2828  
                   _LoRaStart 210A   __size_of_readOpModeRegister 0008                __end_of_fround 17E2  
              __end_of_printf 08E8           start_initialization 2658                   __end_of_Isr 0024  
         __end_of__tdiv_to_l_ 1CC8          __end_of_SPI2ReadByte 284C                 ?_transmitData 0001  
      __size_of_SPI2WriteByte 003E               ___llmod@divisor 0012               ___llmod@counter 0016  
           ?_LoRaSetFrequency 003B  LoRaGetFrequency@intermediate 0038            ??_LoRaSetFrequency 003F  
               ??_readBattery 0003                      ??___flge 0009                      ??___fleq 0009  
                    ??___wmul 0005                   __pdataBANK0 00BF                      ??_fround 002C  
                  ?_LoRaStart 0057                      ??_printf 0055           __end_of_configureIO 27DC  
                   ___fladd@a 003B                     ___fladd@b 0037                    fround@prec 0036  
                   ___fldiv@a 0013                     ___fldiv@b 000F                     ___flmul@a 0013  
                   ___flmul@b 000F                     ___flsub@a 004B                     ___flsub@b 0047  
               __pcstackBANK0 009E             __size_of___xxtofl 0140                ??_transmitData 005D  
           LoRaStart@syncWord 005B       LoRaGetIRQFlags@regValue 0003                     __pintcode 0008  
               __pmediumconst FC1C                      ?___fladd 0037        __size_of_LoRaSleepMode 0014  
                    ?___fldiv 000F                      ?___awdiv 0007                      ?___lbdiv 0005  
                    ?___flneg 0001                      ?___awmod 0001                      ?___lbmod 0001  
                    ?___flmul 000F                      ?___flsub 0047                      ?___fltol 0031  
                    ?___lldiv 0001                      ?___llmod 000E                     __npowers_ FE51  
               ??_setLoRaMode 0005           LoRaSetFrequency@mid 0040           LoRaSetFrequency@lsb 0041  
         LoRaSetFrequency@msb 003F              _LoRaGetFrequency 1F84                 _SPI2WriteByte 261A  
                 __tdiv_to_l_ 1BCA           __end_of_readBattery 27B2                __size_of_CRC16 0058  
                ??__div_to_l_ 0009  LoRaSetFrequency@intermediate 0042                     _hexpowers FE85  
                _messageCount 0060                __size_of_scale 03D0          __end_of_USART2_Start 24D8  
              __size_of_putch 0010                CRC16@wCRCTable FC1D                ___wmul@product 0005  
                    _LATAbits 000F89                      _LATDbits 000F8C                      _LATEbits 000F8D  
                    _PMD0bits 000F3F                      _PMD1bits 000F3E                      _PMD2bits 000F3D  
          __end_of__div_to_l_ 1EB4      __size_of_LoRaOptimalLoad 0186                   _configureIO 27B2  
                   _setupAtoD 26CC                ?_SPI2WriteByte 0001                   ??_LoRaStart 005C  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
           ___wmul@multiplier 0001                    printf@flag 00A6         __size_of_SPI2ReadByte 0024  
                  printf@eexp 00A8                    printf@fval 00B2                    printf@prec 00A4  
    __size_of_LoRaStandbyMode 001A           __end_of_setLoRaMode 287A           setLoRaMode@regValue 0005  
    __size_of_readTemperature 002E          SPI2WriteByte@address 0003                 _LoRaSleepMode 287A  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 266C  
      __end_ofCRC16@wCRCTable FE1D               _LoRaGetIRQFlags 28AC                      __Hrparam 0000  
                    __Lrparam 0000                   _readBattery 2788                    ?_setupAtoD 0001  
        __end_of_transmitData 1BCA                  _SPI2ReadByte 2828              __size_of___fladd 030C  
            __size_of___fldiv 0288              __size_of___awdiv 0084              __size_of___lbdiv 003A  
            __size_of___flneg 002E              __size_of___awmod 0070              __size_of___lbmod 002A  
            __size_of___flmul 032C              __size_of___flsub 0046              __size_of___fltol 00BA  
            __size_of___lldiv 0082              __size_of___llmod 0066            _disablePeripherals 2586  
                 _fround$2398 0032                   _fround$2399 002E                    _ANSELAbits 000F38  
                  _ANSELBbits 000F39                    _ANSELDbits 000F3B                    _ANSELEbits 000F3C  
                    ___xxtofl 1968           ?_disablePeripherals 0001                ?_LoRaSleepMode 0001  
                    __ptext10 1578                      __ptext11 275E                      __ptext20 2702  
                    __ptext12 2692                      __ptext21 1EB4                      __ptext13 1BCA  
                    __ptext30 289E                      __ptext22 21A0                      __ptext14 1DC0  
                    __ptext31 28CC                      __ptext23 2330                      __ptext15 2802  
                    __ptext40 26CC                      __ptext32 28AC                      __ptext24 2050  
                    __ptext16 2414                      __ptext41 2730                      __ptext33 1F84  
                    __ptext25 0CB8                      __ptext17 22AE                      __ptext42 2788  
                    __ptext34 1968                      __ptext26 17E2                      __ptext18 25D4  
                    __ptext43 2586                      __ptext35 12F0                      __ptext27 2866  
                    __ptext19 0FE4                      __ptext44 27B2                      __ptext36 2828  
                    __ptext28 284C                      __ptext45 247A                      __ptext37 28B8  
                    __ptext29 287A                      __ptext38 261A                      __ptext39 24D8  
 __end_of_writeOpModeRegister 28AC                      __powers_ FE1D                  _SSP2CON1bits 000F6C  
               LoRaStart@freq 0057                 __size_of_main 00F8       LoRaGetFrequency@freqMHz 003C  
               CRC16@wCRCWord 0007       LoRaSetFrequency@freqMHz 003B          ??_disablePeripherals 0001  
                    int$flags 005E               ??_SPI2WriteByte 0002    __end_of_readOpModeRegister 28D4  
                   printf@idx 00A2                   _setLoRaMode 2866                     printf@val 00AE  
        USART2_Start@baudrate 0001                  _SSP2STATbits 000F6D             ??_LoRaOptimalLoad 0006  
   __size_of_LoRaSetFrequency 0074                     putch@data 0001                    _INTCONbits 000FF2  
       __size_of_USART2_Start 005E                      scale@scl 0030   writeOpModeRegister@regValue 0004  
     __end_of_LoRaGetIRQFlags 28B8             ??_LoRaStandbyMode 0005                      intlevel2 0000  
            __tdiv_to_l_@exp1 0011              __tdiv_to_l_@cntr 0010      __end_of_LoRaGetFrequency 2050  
            __tdiv_to_l_@quot 000C                   LoRaTXData@i 005A                  _VREFCON0bits 000F42  
            ___lldiv@dividend 0001             ??_readTemperature 0003                    _RCSTA2bits 000F71  
                    printf@ap 00A3                   ??_setupAtoD 0001                  _USART2_Start 247A  
                ?__tdiv_to_l_ 0001                   _printf$2401 009E              ___lldiv@quotient 0009  
             ??_LoRaSleepMode 0005                 ___fladd@signs 0043                  ___fladd@aexp 0044  
                ___fladd@bexp 0045         __size_of_transmitData 0122  
